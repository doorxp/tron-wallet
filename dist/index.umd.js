(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('buffer'), require('crypto'), require('path'), require('fs'), require('util'), require('assert')) :
	typeof define === 'function' && define.amd ? define(['buffer', 'crypto', 'path', 'fs', 'util', 'assert'], factory) :
	(global.index = factory(global.buffer,global.crypto,global.path,global.fs,global.util,global.assert));
}(this, (function (buffer,crypto,path,fs,util,assert) { 'use strict';

	buffer = buffer && buffer.hasOwnProperty('default') ? buffer['default'] : buffer;
	crypto = crypto && crypto.hasOwnProperty('default') ? crypto['default'] : crypto;
	path = path && path.hasOwnProperty('default') ? path['default'] : path;
	fs = fs && fs.hasOwnProperty('default') ? fs['default'] : fs;
	util = util && util.hasOwnProperty('default') ? util['default'] : util;
	assert = assert && assert.hasOwnProperty('default') ? assert['default'] : assert;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var safeBuffer = createCommonjsModule(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */

	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	};
	});
	var safeBuffer_1 = safeBuffer.Buffer;

	var createHash = crypto.createHash;

	var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

	function checkBuffer (buf, name) {
	  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
	    throw new TypeError(name + ' must be a buffer or string')
	  }
	}

	var precondition = function (password, salt, iterations, keylen) {
	  checkBuffer(password, 'Password');
	  checkBuffer(salt, 'Salt');

	  if (typeof iterations !== 'number') {
	    throw new TypeError('Iterations not a number')
	  }

	  if (iterations < 0) {
	    throw new TypeError('Bad iterations')
	  }

	  if (typeof keylen !== 'number') {
	    throw new TypeError('Key length not a number')
	  }

	  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
	    throw new TypeError('Bad key length')
	  }
	};

	var createHmac = crypto.createHmac;

	var defaultEncoding;
	/* istanbul ignore next */
	if (process.browser) {
	  defaultEncoding = 'utf-8';
	} else {
	  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

	  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
	}
	var defaultEncoding_1 = defaultEncoding;

	var sizes = {
	  md5: 16,
	  sha1: 20,
	  sha224: 28,
	  sha256: 32,
	  sha384: 48,
	  sha512: 64,
	  rmd160: 20,
	  ripemd160: 20
	};




	var Buffer$1 = safeBuffer.Buffer;

	function pbkdf2 (password, salt, iterations, keylen, digest) {
	  precondition(password, salt, iterations, keylen);

	  if (!Buffer$1.isBuffer(password)) password = Buffer$1.from(password, defaultEncoding_1);
	  if (!Buffer$1.isBuffer(salt)) salt = Buffer$1.from(salt, defaultEncoding_1);

	  digest = digest || 'sha1';

	  var DK = Buffer$1.allocUnsafe(keylen);
	  var block1 = Buffer$1.allocUnsafe(salt.length + 4);
	  salt.copy(block1, 0, 0, salt.length);

	  var destPos = 0;
	  var hLen = sizes[digest];
	  var l = Math.ceil(keylen / hLen);

	  for (var i = 1; i <= l; i++) {
	    block1.writeUInt32BE(i, salt.length);

	    var T = createHmac(digest, password).update(block1).digest();
	    var U = T;

	    for (var j = 1; j < iterations; j++) {
	      U = createHmac(digest, password).update(U).digest();
	      for (var k = 0; k < hLen; k++) T[k] ^= U[k];
	    }

	    T.copy(DK, destPos);
	    destPos += hLen;
	  }

	  return DK
	}

	var sync = pbkdf2;

	var Buffer$2 = safeBuffer.Buffer;

	var ZERO_BUF;
	var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
	var toBrowser = {
	  'sha': 'SHA-1',
	  'sha-1': 'SHA-1',
	  'sha1': 'SHA-1',
	  'sha256': 'SHA-256',
	  'sha-256': 'SHA-256',
	  'sha384': 'SHA-384',
	  'sha-384': 'SHA-384',
	  'sha-512': 'SHA-512',
	  'sha512': 'SHA-512'
	};
	var checks = [];
	function checkNative (algo) {
	  if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
	    return Promise.resolve(false)
	  }
	  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
	    return Promise.resolve(false)
	  }
	  if (checks[algo] !== undefined) {
	    return checks[algo]
	  }
	  ZERO_BUF = ZERO_BUF || Buffer$2.alloc(8);
	  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
	    .then(function () {
	      return true
	    }).catch(function () {
	      return false
	    });
	  checks[algo] = prom;
	  return prom
	}

	function browserPbkdf2 (password, salt, iterations, length, algo) {
	  return subtle.importKey(
	    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
	  ).then(function (key) {
	    return subtle.deriveBits({
	      name: 'PBKDF2',
	      salt: salt,
	      iterations: iterations,
	      hash: {
	        name: algo
	      }
	    }, key, length << 3)
	  }).then(function (res) {
	    return Buffer$2.from(res)
	  })
	}

	function resolvePromise (promise, callback) {
	  promise.then(function (out) {
	    process.nextTick(function () {
	      callback(null, out);
	    });
	  }, function (e) {
	    process.nextTick(function () {
	      callback(e);
	    });
	  });
	}
	var async = function (password, salt, iterations, keylen, digest, callback) {
	  if (typeof digest === 'function') {
	    callback = digest;
	    digest = undefined;
	  }

	  digest = digest || 'sha1';
	  var algo = toBrowser[digest.toLowerCase()];

	  if (!algo || typeof commonjsGlobal.Promise !== 'function') {
	    return process.nextTick(function () {
	      var out;
	      try {
	        out = sync(password, salt, iterations, keylen, digest);
	      } catch (e) {
	        return callback(e)
	      }
	      callback(null, out);
	    })
	  }

	  precondition(password, salt, iterations, keylen);
	  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
	  if (!Buffer$2.isBuffer(password)) password = Buffer$2.from(password, defaultEncoding_1);
	  if (!Buffer$2.isBuffer(salt)) salt = Buffer$2.from(salt, defaultEncoding_1);

	  resolvePromise(checkNative(algo).then(function (resp) {
	    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

	    return sync(password, salt, iterations, keylen, digest)
	  }), callback);
	};

	var pbkdf2$1 = createCommonjsModule(function (module, exports) {
	function nativePBKDF2 (password, salt, iterations, keylen, digest, callback) {
	  precondition(password, salt, iterations, keylen);

	  if (typeof digest === 'function') {
	    callback = digest;
	    digest = 'sha1';
	  }
	  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

	  return crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)
	}

	function nativePBKDF2Sync (password, salt, iterations, keylen, digest) {
	  precondition(password, salt, iterations, keylen);
	  digest = digest || 'sha1';
	  return crypto.pbkdf2Sync(password, salt, iterations, keylen, digest)
	}

	/* istanbul ignore next */
	if (!crypto.pbkdf2Sync || crypto.pbkdf2Sync.toString().indexOf('keylen, digest') === -1) {
	  exports.pbkdf2Sync = sync;
	  exports.pbkdf2 = async;

	// native
	} else {
	  exports.pbkdf2Sync = nativePBKDF2Sync;
	  exports.pbkdf2 = nativePBKDF2;
	}
	});
	var pbkdf2_1 = pbkdf2$1.pbkdf2Sync;
	var pbkdf2_2 = pbkdf2$1.pbkdf2;

	var randombytes = crypto.randomBytes;

	var unorm = createCommonjsModule(function (module) {
	(function (root) {

	/***** unorm.js *****/

	/*
	 * UnicodeNormalizer 1.0.0
	 * Copyright (c) 2008 Matsuza
	 * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
	 * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
	 * $Rev: 13309 $
	 */

	   var DEFAULT_FEATURE = [null, 0, {}];
	   var CACHE_THRESHOLD = 10;
	   var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
	   var NCount = VCount * TCount; // 588
	   var SCount = LCount * NCount; // 11172

	   var UChar = function(cp, feature){
	      this.codepoint = cp;
	      this.feature = feature;
	   };

	   // Strategies
	   var cache = {};
	   var cacheCounter = [];
	   for (var i = 0; i <= 0xFF; ++i){
	      cacheCounter[i] = 0;
	   }

	   function fromCache(next, cp, needFeature){
	      var ret = cache[cp];
	      if(!ret){
	         ret = next(cp, needFeature);
	         if(!!ret.feature && ++cacheCounter[(cp >> 8) & 0xFF] > CACHE_THRESHOLD){
	            cache[cp] = ret;
	         }
	      }
	      return ret;
	   }

	   function fromData(next, cp, needFeature){
	      var hash = cp & 0xFF00;
	      var dunit = UChar.udata[hash] || {};
	      var f = dunit[cp];
	      return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
	   }
	   function fromCpOnly(next, cp, needFeature){
	      return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
	   }
	   function fromRuleBasedJamo(next, cp, needFeature){
	      var j;
	      if(cp < LBase || (LBase + LCount <= cp && cp < SBase) || (SBase + SCount < cp)){
	         return next(cp, needFeature);
	      }
	      if(LBase <= cp && cp < LBase + LCount){
	         var c = {};
	         var base = (cp - LBase) * VCount;
	         for (j = 0; j < VCount; ++j){
	            c[VBase + j] = SBase + TCount * (j + base);
	         }
	         return new UChar(cp, [,,c]);
	      }

	      var SIndex = cp - SBase;
	      var TIndex = SIndex % TCount;
	      var feature = [];
	      if(TIndex !== 0){
	         feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];
	      } else {
	         feature[0] = [LBase + Math.floor(SIndex / NCount), VBase + Math.floor((SIndex % NCount) / TCount)];
	         feature[2] = {};
	         for (j = 1; j < TCount; ++j){
	            feature[2][TBase + j] = cp + j;
	         }
	      }
	      return new UChar(cp, feature);
	   }
	   function fromCpFilter(next, cp, needFeature){
	      return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
	   }

	   var strategies = [fromCpFilter, fromCache, fromCpOnly, fromRuleBasedJamo, fromData];

	   UChar.fromCharCode = strategies.reduceRight(function (next, strategy) {
	      return function (cp, needFeature) {
	         return strategy(next, cp, needFeature);
	      };
	   }, null);

	   UChar.isHighSurrogate = function(cp){
	      return cp >= 0xD800 && cp <= 0xDBFF;
	   };
	   UChar.isLowSurrogate = function(cp){
	      return cp >= 0xDC00 && cp <= 0xDFFF;
	   };

	   UChar.prototype.prepFeature = function(){
	      if(!this.feature){
	         this.feature = UChar.fromCharCode(this.codepoint, true).feature;
	      }
	   };

	   UChar.prototype.toString = function(){
	      if(this.codepoint < 0x10000){
	         return String.fromCharCode(this.codepoint);
	      } else {
	         var x = this.codepoint - 0x10000;
	         return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
	      }
	   };

	   UChar.prototype.getDecomp = function(){
	      this.prepFeature();
	      return this.feature[0] || null;
	   };

	   UChar.prototype.isCompatibility = function(){
	      this.prepFeature();
	      return !!this.feature[1] && (this.feature[1] & (1 << 8));
	   };
	   UChar.prototype.isExclude = function(){
	      this.prepFeature();
	      return !!this.feature[1] && (this.feature[1] & (1 << 9));
	   };
	   UChar.prototype.getCanonicalClass = function(){
	      this.prepFeature();
	      return !!this.feature[1] ? (this.feature[1] & 0xff) : 0;
	   };
	   UChar.prototype.getComposite = function(following){
	      this.prepFeature();
	      if(!this.feature[2]){
	         return null;
	      }
	      var cp = this.feature[2][following.codepoint];
	      return cp ? UChar.fromCharCode(cp) : null;
	   };

	   var UCharIterator = function(str){
	      this.str = str;
	      this.cursor = 0;
	   };
	   UCharIterator.prototype.next = function(){
	      if(!!this.str && this.cursor < this.str.length){
	         var cp = this.str.charCodeAt(this.cursor++);
	         var d;
	         if(UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate((d = this.str.charCodeAt(this.cursor)))){
	            cp = (cp - 0xD800) * 0x400 + (d -0xDC00) + 0x10000;
	            ++this.cursor;
	         }
	         return UChar.fromCharCode(cp);
	      } else {
	         this.str = null;
	         return null;
	      }
	   };

	   var RecursDecompIterator = function(it, cano){
	      this.it = it;
	      this.canonical = cano;
	      this.resBuf = [];
	   };

	   RecursDecompIterator.prototype.next = function(){
	      function recursiveDecomp(cano, uchar){
	         var decomp = uchar.getDecomp();
	         if(!!decomp && !(cano && uchar.isCompatibility())){
	            var ret = [];
	            for(var i = 0; i < decomp.length; ++i){
	               var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
	                ret = ret.concat(a);
	            }
	            return ret;
	         } else {
	            return [uchar];
	         }
	      }
	      if(this.resBuf.length === 0){
	         var uchar = this.it.next();
	         if(!uchar){
	            return null;
	         }
	         this.resBuf = recursiveDecomp(this.canonical, uchar);
	      }
	      return this.resBuf.shift();
	   };

	   var DecompIterator = function(it){
	      this.it = it;
	      this.resBuf = [];
	   };

	   DecompIterator.prototype.next = function(){
	      var cc;
	      if(this.resBuf.length === 0){
	         do{
	            var uchar = this.it.next();
	            if(!uchar){
	               break;
	            }
	            cc = uchar.getCanonicalClass();
	            var inspt = this.resBuf.length;
	            if(cc !== 0){
	               for(; inspt > 0; --inspt){
	                  var uchar2 = this.resBuf[inspt - 1];
	                  var cc2 = uchar2.getCanonicalClass();
	                  if(cc2 <= cc){
	                     break;
	                  }
	               }
	            }
	            this.resBuf.splice(inspt, 0, uchar);
	         } while(cc !== 0);
	      }
	      return this.resBuf.shift();
	   };

	   var CompIterator = function(it){
	      this.it = it;
	      this.procBuf = [];
	      this.resBuf = [];
	      this.lastClass = null;
	   };

	   CompIterator.prototype.next = function(){
	      while(this.resBuf.length === 0){
	         var uchar = this.it.next();
	         if(!uchar){
	            this.resBuf = this.procBuf;
	            this.procBuf = [];
	            break;
	         }
	         if(this.procBuf.length === 0){
	            this.lastClass = uchar.getCanonicalClass();
	            this.procBuf.push(uchar);
	         } else {
	            var starter = this.procBuf[0];
	            var composite = starter.getComposite(uchar);
	            var cc = uchar.getCanonicalClass();
	            if(!!composite && (this.lastClass < cc || this.lastClass === 0)){
	               this.procBuf[0] = composite;
	            } else {
	               if(cc === 0){
	                  this.resBuf = this.procBuf;
	                  this.procBuf = [];
	               }
	               this.lastClass = cc;
	               this.procBuf.push(uchar);
	            }
	         }
	      }
	      return this.resBuf.shift();
	   };

	   var createIterator = function(mode, str){
	      switch(mode){
	         case "NFD":
	            return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
	         case "NFKD":
	            return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
	         case "NFC":
	            return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
	         case "NFKC":
	            return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
	      }
	      throw mode + " is invalid";
	   };
	   var normalize = function(mode, str){
	      var it = createIterator(mode, str);
	      var ret = "";
	      var uchar;
	      while(!!(uchar = it.next())){
	         ret += uchar.toString();
	      }
	      return ret;
	   };

	   /* API functions */
	   function nfd(str){
	      return normalize("NFD", str);
	   }

	   function nfkd(str){
	      return normalize("NFKD", str);
	   }

	   function nfc(str){
	      return normalize("NFC", str);
	   }

	   function nfkc(str){
	      return normalize("NFKC", str);
	   }

	/* Unicode data */
	UChar.udata={
	0:{60:[,,{824:8814}],61:[,,{824:8800}],62:[,,{824:8815}],65:[,,{768:192,769:193,770:194,771:195,772:256,774:258,775:550,776:196,777:7842,778:197,780:461,783:512,785:514,803:7840,805:7680,808:260}],66:[,,{775:7682,803:7684,817:7686}],67:[,,{769:262,770:264,775:266,780:268,807:199}],68:[,,{775:7690,780:270,803:7692,807:7696,813:7698,817:7694}],69:[,,{768:200,769:201,770:202,771:7868,772:274,774:276,775:278,776:203,777:7866,780:282,783:516,785:518,803:7864,807:552,808:280,813:7704,816:7706}],70:[,,{775:7710}],71:[,,{769:500,770:284,772:7712,774:286,775:288,780:486,807:290}],72:[,,{770:292,775:7714,776:7718,780:542,803:7716,807:7720,814:7722}],73:[,,{768:204,769:205,770:206,771:296,772:298,774:300,775:304,776:207,777:7880,780:463,783:520,785:522,803:7882,808:302,816:7724}],74:[,,{770:308}],75:[,,{769:7728,780:488,803:7730,807:310,817:7732}],76:[,,{769:313,780:317,803:7734,807:315,813:7740,817:7738}],77:[,,{769:7742,775:7744,803:7746}],78:[,,{768:504,769:323,771:209,775:7748,780:327,803:7750,807:325,813:7754,817:7752}],79:[,,{768:210,769:211,770:212,771:213,772:332,774:334,775:558,776:214,777:7886,779:336,780:465,783:524,785:526,795:416,803:7884,808:490}],80:[,,{769:7764,775:7766}],82:[,,{769:340,775:7768,780:344,783:528,785:530,803:7770,807:342,817:7774}],83:[,,{769:346,770:348,775:7776,780:352,803:7778,806:536,807:350}],84:[,,{775:7786,780:356,803:7788,806:538,807:354,813:7792,817:7790}],85:[,,{768:217,769:218,770:219,771:360,772:362,774:364,776:220,777:7910,778:366,779:368,780:467,783:532,785:534,795:431,803:7908,804:7794,808:370,813:7798,816:7796}],86:[,,{771:7804,803:7806}],87:[,,{768:7808,769:7810,770:372,775:7814,776:7812,803:7816}],88:[,,{775:7818,776:7820}],89:[,,{768:7922,769:221,770:374,771:7928,772:562,775:7822,776:376,777:7926,803:7924}],90:[,,{769:377,770:7824,775:379,780:381,803:7826,817:7828}],97:[,,{768:224,769:225,770:226,771:227,772:257,774:259,775:551,776:228,777:7843,778:229,780:462,783:513,785:515,803:7841,805:7681,808:261}],98:[,,{775:7683,803:7685,817:7687}],99:[,,{769:263,770:265,775:267,780:269,807:231}],100:[,,{775:7691,780:271,803:7693,807:7697,813:7699,817:7695}],101:[,,{768:232,769:233,770:234,771:7869,772:275,774:277,775:279,776:235,777:7867,780:283,783:517,785:519,803:7865,807:553,808:281,813:7705,816:7707}],102:[,,{775:7711}],103:[,,{769:501,770:285,772:7713,774:287,775:289,780:487,807:291}],104:[,,{770:293,775:7715,776:7719,780:543,803:7717,807:7721,814:7723,817:7830}],105:[,,{768:236,769:237,770:238,771:297,772:299,774:301,776:239,777:7881,780:464,783:521,785:523,803:7883,808:303,816:7725}],106:[,,{770:309,780:496}],107:[,,{769:7729,780:489,803:7731,807:311,817:7733}],108:[,,{769:314,780:318,803:7735,807:316,813:7741,817:7739}],109:[,,{769:7743,775:7745,803:7747}],110:[,,{768:505,769:324,771:241,775:7749,780:328,803:7751,807:326,813:7755,817:7753}],111:[,,{768:242,769:243,770:244,771:245,772:333,774:335,775:559,776:246,777:7887,779:337,780:466,783:525,785:527,795:417,803:7885,808:491}],112:[,,{769:7765,775:7767}],114:[,,{769:341,775:7769,780:345,783:529,785:531,803:7771,807:343,817:7775}],115:[,,{769:347,770:349,775:7777,780:353,803:7779,806:537,807:351}],116:[,,{775:7787,776:7831,780:357,803:7789,806:539,807:355,813:7793,817:7791}],117:[,,{768:249,769:250,770:251,771:361,772:363,774:365,776:252,777:7911,778:367,779:369,780:468,783:533,785:535,795:432,803:7909,804:7795,808:371,813:7799,816:7797}],118:[,,{771:7805,803:7807}],119:[,,{768:7809,769:7811,770:373,775:7815,776:7813,778:7832,803:7817}],120:[,,{775:7819,776:7821}],121:[,,{768:7923,769:253,770:375,771:7929,772:563,775:7823,776:255,777:7927,778:7833,803:7925}],122:[,,{769:378,770:7825,775:380,780:382,803:7827,817:7829}],160:[[32],256],168:[[32,776],256,{768:8173,769:901,834:8129}],170:[[97],256],175:[[32,772],256],178:[[50],256],179:[[51],256],180:[[32,769],256],181:[[956],256],184:[[32,807],256],185:[[49],256],186:[[111],256],188:[[49,8260,52],256],189:[[49,8260,50],256],190:[[51,8260,52],256],192:[[65,768]],193:[[65,769]],194:[[65,770],,{768:7846,769:7844,771:7850,777:7848}],195:[[65,771]],196:[[65,776],,{772:478}],197:[[65,778],,{769:506}],198:[,,{769:508,772:482}],199:[[67,807],,{769:7688}],200:[[69,768]],201:[[69,769]],202:[[69,770],,{768:7872,769:7870,771:7876,777:7874}],203:[[69,776]],204:[[73,768]],205:[[73,769]],206:[[73,770]],207:[[73,776],,{769:7726}],209:[[78,771]],210:[[79,768]],211:[[79,769]],212:[[79,770],,{768:7890,769:7888,771:7894,777:7892}],213:[[79,771],,{769:7756,772:556,776:7758}],214:[[79,776],,{772:554}],216:[,,{769:510}],217:[[85,768]],218:[[85,769]],219:[[85,770]],220:[[85,776],,{768:475,769:471,772:469,780:473}],221:[[89,769]],224:[[97,768]],225:[[97,769]],226:[[97,770],,{768:7847,769:7845,771:7851,777:7849}],227:[[97,771]],228:[[97,776],,{772:479}],229:[[97,778],,{769:507}],230:[,,{769:509,772:483}],231:[[99,807],,{769:7689}],232:[[101,768]],233:[[101,769]],234:[[101,770],,{768:7873,769:7871,771:7877,777:7875}],235:[[101,776]],236:[[105,768]],237:[[105,769]],238:[[105,770]],239:[[105,776],,{769:7727}],241:[[110,771]],242:[[111,768]],243:[[111,769]],244:[[111,770],,{768:7891,769:7889,771:7895,777:7893}],245:[[111,771],,{769:7757,772:557,776:7759}],246:[[111,776],,{772:555}],248:[,,{769:511}],249:[[117,768]],250:[[117,769]],251:[[117,770]],252:[[117,776],,{768:476,769:472,772:470,780:474}],253:[[121,769]],255:[[121,776]]},
	256:{256:[[65,772]],257:[[97,772]],258:[[65,774],,{768:7856,769:7854,771:7860,777:7858}],259:[[97,774],,{768:7857,769:7855,771:7861,777:7859}],260:[[65,808]],261:[[97,808]],262:[[67,769]],263:[[99,769]],264:[[67,770]],265:[[99,770]],266:[[67,775]],267:[[99,775]],268:[[67,780]],269:[[99,780]],270:[[68,780]],271:[[100,780]],274:[[69,772],,{768:7700,769:7702}],275:[[101,772],,{768:7701,769:7703}],276:[[69,774]],277:[[101,774]],278:[[69,775]],279:[[101,775]],280:[[69,808]],281:[[101,808]],282:[[69,780]],283:[[101,780]],284:[[71,770]],285:[[103,770]],286:[[71,774]],287:[[103,774]],288:[[71,775]],289:[[103,775]],290:[[71,807]],291:[[103,807]],292:[[72,770]],293:[[104,770]],296:[[73,771]],297:[[105,771]],298:[[73,772]],299:[[105,772]],300:[[73,774]],301:[[105,774]],302:[[73,808]],303:[[105,808]],304:[[73,775]],306:[[73,74],256],307:[[105,106],256],308:[[74,770]],309:[[106,770]],310:[[75,807]],311:[[107,807]],313:[[76,769]],314:[[108,769]],315:[[76,807]],316:[[108,807]],317:[[76,780]],318:[[108,780]],319:[[76,183],256],320:[[108,183],256],323:[[78,769]],324:[[110,769]],325:[[78,807]],326:[[110,807]],327:[[78,780]],328:[[110,780]],329:[[700,110],256],332:[[79,772],,{768:7760,769:7762}],333:[[111,772],,{768:7761,769:7763}],334:[[79,774]],335:[[111,774]],336:[[79,779]],337:[[111,779]],340:[[82,769]],341:[[114,769]],342:[[82,807]],343:[[114,807]],344:[[82,780]],345:[[114,780]],346:[[83,769],,{775:7780}],347:[[115,769],,{775:7781}],348:[[83,770]],349:[[115,770]],350:[[83,807]],351:[[115,807]],352:[[83,780],,{775:7782}],353:[[115,780],,{775:7783}],354:[[84,807]],355:[[116,807]],356:[[84,780]],357:[[116,780]],360:[[85,771],,{769:7800}],361:[[117,771],,{769:7801}],362:[[85,772],,{776:7802}],363:[[117,772],,{776:7803}],364:[[85,774]],365:[[117,774]],366:[[85,778]],367:[[117,778]],368:[[85,779]],369:[[117,779]],370:[[85,808]],371:[[117,808]],372:[[87,770]],373:[[119,770]],374:[[89,770]],375:[[121,770]],376:[[89,776]],377:[[90,769]],378:[[122,769]],379:[[90,775]],380:[[122,775]],381:[[90,780]],382:[[122,780]],383:[[115],256,{775:7835}],416:[[79,795],,{768:7900,769:7898,771:7904,777:7902,803:7906}],417:[[111,795],,{768:7901,769:7899,771:7905,777:7903,803:7907}],431:[[85,795],,{768:7914,769:7912,771:7918,777:7916,803:7920}],432:[[117,795],,{768:7915,769:7913,771:7919,777:7917,803:7921}],439:[,,{780:494}],452:[[68,381],256],453:[[68,382],256],454:[[100,382],256],455:[[76,74],256],456:[[76,106],256],457:[[108,106],256],458:[[78,74],256],459:[[78,106],256],460:[[110,106],256],461:[[65,780]],462:[[97,780]],463:[[73,780]],464:[[105,780]],465:[[79,780]],466:[[111,780]],467:[[85,780]],468:[[117,780]],469:[[220,772]],470:[[252,772]],471:[[220,769]],472:[[252,769]],473:[[220,780]],474:[[252,780]],475:[[220,768]],476:[[252,768]],478:[[196,772]],479:[[228,772]],480:[[550,772]],481:[[551,772]],482:[[198,772]],483:[[230,772]],486:[[71,780]],487:[[103,780]],488:[[75,780]],489:[[107,780]],490:[[79,808],,{772:492}],491:[[111,808],,{772:493}],492:[[490,772]],493:[[491,772]],494:[[439,780]],495:[[658,780]],496:[[106,780]],497:[[68,90],256],498:[[68,122],256],499:[[100,122],256],500:[[71,769]],501:[[103,769]],504:[[78,768]],505:[[110,768]],506:[[197,769]],507:[[229,769]],508:[[198,769]],509:[[230,769]],510:[[216,769]],511:[[248,769]],66045:[,220]},
	512:{512:[[65,783]],513:[[97,783]],514:[[65,785]],515:[[97,785]],516:[[69,783]],517:[[101,783]],518:[[69,785]],519:[[101,785]],520:[[73,783]],521:[[105,783]],522:[[73,785]],523:[[105,785]],524:[[79,783]],525:[[111,783]],526:[[79,785]],527:[[111,785]],528:[[82,783]],529:[[114,783]],530:[[82,785]],531:[[114,785]],532:[[85,783]],533:[[117,783]],534:[[85,785]],535:[[117,785]],536:[[83,806]],537:[[115,806]],538:[[84,806]],539:[[116,806]],542:[[72,780]],543:[[104,780]],550:[[65,775],,{772:480}],551:[[97,775],,{772:481}],552:[[69,807],,{774:7708}],553:[[101,807],,{774:7709}],554:[[214,772]],555:[[246,772]],556:[[213,772]],557:[[245,772]],558:[[79,775],,{772:560}],559:[[111,775],,{772:561}],560:[[558,772]],561:[[559,772]],562:[[89,772]],563:[[121,772]],658:[,,{780:495}],688:[[104],256],689:[[614],256],690:[[106],256],691:[[114],256],692:[[633],256],693:[[635],256],694:[[641],256],695:[[119],256],696:[[121],256],728:[[32,774],256],729:[[32,775],256],730:[[32,778],256],731:[[32,808],256],732:[[32,771],256],733:[[32,779],256],736:[[611],256],737:[[108],256],738:[[115],256],739:[[120],256],740:[[661],256],66272:[,220]},
	768:{768:[,230],769:[,230],770:[,230],771:[,230],772:[,230],773:[,230],774:[,230],775:[,230],776:[,230,{769:836}],777:[,230],778:[,230],779:[,230],780:[,230],781:[,230],782:[,230],783:[,230],784:[,230],785:[,230],786:[,230],787:[,230],788:[,230],789:[,232],790:[,220],791:[,220],792:[,220],793:[,220],794:[,232],795:[,216],796:[,220],797:[,220],798:[,220],799:[,220],800:[,220],801:[,202],802:[,202],803:[,220],804:[,220],805:[,220],806:[,220],807:[,202],808:[,202],809:[,220],810:[,220],811:[,220],812:[,220],813:[,220],814:[,220],815:[,220],816:[,220],817:[,220],818:[,220],819:[,220],820:[,1],821:[,1],822:[,1],823:[,1],824:[,1],825:[,220],826:[,220],827:[,220],828:[,220],829:[,230],830:[,230],831:[,230],832:[[768],230],833:[[769],230],834:[,230],835:[[787],230],836:[[776,769],230],837:[,240],838:[,230],839:[,220],840:[,220],841:[,220],842:[,230],843:[,230],844:[,230],845:[,220],846:[,220],848:[,230],849:[,230],850:[,230],851:[,220],852:[,220],853:[,220],854:[,220],855:[,230],856:[,232],857:[,220],858:[,220],859:[,230],860:[,233],861:[,234],862:[,234],863:[,233],864:[,234],865:[,234],866:[,233],867:[,230],868:[,230],869:[,230],870:[,230],871:[,230],872:[,230],873:[,230],874:[,230],875:[,230],876:[,230],877:[,230],878:[,230],879:[,230],884:[[697]],890:[[32,837],256],894:[[59]],900:[[32,769],256],901:[[168,769]],902:[[913,769]],903:[[183]],904:[[917,769]],905:[[919,769]],906:[[921,769]],908:[[927,769]],910:[[933,769]],911:[[937,769]],912:[[970,769]],913:[,,{768:8122,769:902,772:8121,774:8120,787:7944,788:7945,837:8124}],917:[,,{768:8136,769:904,787:7960,788:7961}],919:[,,{768:8138,769:905,787:7976,788:7977,837:8140}],921:[,,{768:8154,769:906,772:8153,774:8152,776:938,787:7992,788:7993}],927:[,,{768:8184,769:908,787:8008,788:8009}],929:[,,{788:8172}],933:[,,{768:8170,769:910,772:8169,774:8168,776:939,788:8025}],937:[,,{768:8186,769:911,787:8040,788:8041,837:8188}],938:[[921,776]],939:[[933,776]],940:[[945,769],,{837:8116}],941:[[949,769]],942:[[951,769],,{837:8132}],943:[[953,769]],944:[[971,769]],945:[,,{768:8048,769:940,772:8113,774:8112,787:7936,788:7937,834:8118,837:8115}],949:[,,{768:8050,769:941,787:7952,788:7953}],951:[,,{768:8052,769:942,787:7968,788:7969,834:8134,837:8131}],953:[,,{768:8054,769:943,772:8145,774:8144,776:970,787:7984,788:7985,834:8150}],959:[,,{768:8056,769:972,787:8000,788:8001}],961:[,,{787:8164,788:8165}],965:[,,{768:8058,769:973,772:8161,774:8160,776:971,787:8016,788:8017,834:8166}],969:[,,{768:8060,769:974,787:8032,788:8033,834:8182,837:8179}],970:[[953,776],,{768:8146,769:912,834:8151}],971:[[965,776],,{768:8162,769:944,834:8167}],972:[[959,769]],973:[[965,769]],974:[[969,769],,{837:8180}],976:[[946],256],977:[[952],256],978:[[933],256,{769:979,776:980}],979:[[978,769]],980:[[978,776]],981:[[966],256],982:[[960],256],1008:[[954],256],1009:[[961],256],1010:[[962],256],1012:[[920],256],1013:[[949],256],1017:[[931],256],66422:[,230],66423:[,230],66424:[,230],66425:[,230],66426:[,230]},
	1024:{1024:[[1045,768]],1025:[[1045,776]],1027:[[1043,769]],1030:[,,{776:1031}],1031:[[1030,776]],1036:[[1050,769]],1037:[[1048,768]],1038:[[1059,774]],1040:[,,{774:1232,776:1234}],1043:[,,{769:1027}],1045:[,,{768:1024,774:1238,776:1025}],1046:[,,{774:1217,776:1244}],1047:[,,{776:1246}],1048:[,,{768:1037,772:1250,774:1049,776:1252}],1049:[[1048,774]],1050:[,,{769:1036}],1054:[,,{776:1254}],1059:[,,{772:1262,774:1038,776:1264,779:1266}],1063:[,,{776:1268}],1067:[,,{776:1272}],1069:[,,{776:1260}],1072:[,,{774:1233,776:1235}],1075:[,,{769:1107}],1077:[,,{768:1104,774:1239,776:1105}],1078:[,,{774:1218,776:1245}],1079:[,,{776:1247}],1080:[,,{768:1117,772:1251,774:1081,776:1253}],1081:[[1080,774]],1082:[,,{769:1116}],1086:[,,{776:1255}],1091:[,,{772:1263,774:1118,776:1265,779:1267}],1095:[,,{776:1269}],1099:[,,{776:1273}],1101:[,,{776:1261}],1104:[[1077,768]],1105:[[1077,776]],1107:[[1075,769]],1110:[,,{776:1111}],1111:[[1110,776]],1116:[[1082,769]],1117:[[1080,768]],1118:[[1091,774]],1140:[,,{783:1142}],1141:[,,{783:1143}],1142:[[1140,783]],1143:[[1141,783]],1155:[,230],1156:[,230],1157:[,230],1158:[,230],1159:[,230],1217:[[1046,774]],1218:[[1078,774]],1232:[[1040,774]],1233:[[1072,774]],1234:[[1040,776]],1235:[[1072,776]],1238:[[1045,774]],1239:[[1077,774]],1240:[,,{776:1242}],1241:[,,{776:1243}],1242:[[1240,776]],1243:[[1241,776]],1244:[[1046,776]],1245:[[1078,776]],1246:[[1047,776]],1247:[[1079,776]],1250:[[1048,772]],1251:[[1080,772]],1252:[[1048,776]],1253:[[1080,776]],1254:[[1054,776]],1255:[[1086,776]],1256:[,,{776:1258}],1257:[,,{776:1259}],1258:[[1256,776]],1259:[[1257,776]],1260:[[1069,776]],1261:[[1101,776]],1262:[[1059,772]],1263:[[1091,772]],1264:[[1059,776]],1265:[[1091,776]],1266:[[1059,779]],1267:[[1091,779]],1268:[[1063,776]],1269:[[1095,776]],1272:[[1067,776]],1273:[[1099,776]]},
	1280:{1415:[[1381,1410],256],1425:[,220],1426:[,230],1427:[,230],1428:[,230],1429:[,230],1430:[,220],1431:[,230],1432:[,230],1433:[,230],1434:[,222],1435:[,220],1436:[,230],1437:[,230],1438:[,230],1439:[,230],1440:[,230],1441:[,230],1442:[,220],1443:[,220],1444:[,220],1445:[,220],1446:[,220],1447:[,220],1448:[,230],1449:[,230],1450:[,220],1451:[,230],1452:[,230],1453:[,222],1454:[,228],1455:[,230],1456:[,10],1457:[,11],1458:[,12],1459:[,13],1460:[,14],1461:[,15],1462:[,16],1463:[,17],1464:[,18],1465:[,19],1466:[,19],1467:[,20],1468:[,21],1469:[,22],1471:[,23],1473:[,24],1474:[,25],1476:[,230],1477:[,220],1479:[,18]},
	1536:{1552:[,230],1553:[,230],1554:[,230],1555:[,230],1556:[,230],1557:[,230],1558:[,230],1559:[,230],1560:[,30],1561:[,31],1562:[,32],1570:[[1575,1619]],1571:[[1575,1620]],1572:[[1608,1620]],1573:[[1575,1621]],1574:[[1610,1620]],1575:[,,{1619:1570,1620:1571,1621:1573}],1608:[,,{1620:1572}],1610:[,,{1620:1574}],1611:[,27],1612:[,28],1613:[,29],1614:[,30],1615:[,31],1616:[,32],1617:[,33],1618:[,34],1619:[,230],1620:[,230],1621:[,220],1622:[,220],1623:[,230],1624:[,230],1625:[,230],1626:[,230],1627:[,230],1628:[,220],1629:[,230],1630:[,230],1631:[,220],1648:[,35],1653:[[1575,1652],256],1654:[[1608,1652],256],1655:[[1735,1652],256],1656:[[1610,1652],256],1728:[[1749,1620]],1729:[,,{1620:1730}],1730:[[1729,1620]],1746:[,,{1620:1747}],1747:[[1746,1620]],1749:[,,{1620:1728}],1750:[,230],1751:[,230],1752:[,230],1753:[,230],1754:[,230],1755:[,230],1756:[,230],1759:[,230],1760:[,230],1761:[,230],1762:[,230],1763:[,220],1764:[,230],1767:[,230],1768:[,230],1770:[,220],1771:[,230],1772:[,230],1773:[,220]},
	1792:{1809:[,36],1840:[,230],1841:[,220],1842:[,230],1843:[,230],1844:[,220],1845:[,230],1846:[,230],1847:[,220],1848:[,220],1849:[,220],1850:[,230],1851:[,220],1852:[,220],1853:[,230],1854:[,220],1855:[,230],1856:[,230],1857:[,230],1858:[,220],1859:[,230],1860:[,220],1861:[,230],1862:[,220],1863:[,230],1864:[,220],1865:[,230],1866:[,230],2027:[,230],2028:[,230],2029:[,230],2030:[,230],2031:[,230],2032:[,230],2033:[,230],2034:[,220],2035:[,230]},
	2048:{2070:[,230],2071:[,230],2072:[,230],2073:[,230],2075:[,230],2076:[,230],2077:[,230],2078:[,230],2079:[,230],2080:[,230],2081:[,230],2082:[,230],2083:[,230],2085:[,230],2086:[,230],2087:[,230],2089:[,230],2090:[,230],2091:[,230],2092:[,230],2093:[,230],2137:[,220],2138:[,220],2139:[,220],2276:[,230],2277:[,230],2278:[,220],2279:[,230],2280:[,230],2281:[,220],2282:[,230],2283:[,230],2284:[,230],2285:[,220],2286:[,220],2287:[,220],2288:[,27],2289:[,28],2290:[,29],2291:[,230],2292:[,230],2293:[,230],2294:[,220],2295:[,230],2296:[,230],2297:[,220],2298:[,220],2299:[,230],2300:[,230],2301:[,230],2302:[,230],2303:[,230]},
	2304:{2344:[,,{2364:2345}],2345:[[2344,2364]],2352:[,,{2364:2353}],2353:[[2352,2364]],2355:[,,{2364:2356}],2356:[[2355,2364]],2364:[,7],2381:[,9],2385:[,230],2386:[,220],2387:[,230],2388:[,230],2392:[[2325,2364],512],2393:[[2326,2364],512],2394:[[2327,2364],512],2395:[[2332,2364],512],2396:[[2337,2364],512],2397:[[2338,2364],512],2398:[[2347,2364],512],2399:[[2351,2364],512],2492:[,7],2503:[,,{2494:2507,2519:2508}],2507:[[2503,2494]],2508:[[2503,2519]],2509:[,9],2524:[[2465,2492],512],2525:[[2466,2492],512],2527:[[2479,2492],512]},
	2560:{2611:[[2610,2620],512],2614:[[2616,2620],512],2620:[,7],2637:[,9],2649:[[2582,2620],512],2650:[[2583,2620],512],2651:[[2588,2620],512],2654:[[2603,2620],512],2748:[,7],2765:[,9],68109:[,220],68111:[,230],68152:[,230],68153:[,1],68154:[,220],68159:[,9],68325:[,230],68326:[,220]},
	2816:{2876:[,7],2887:[,,{2878:2891,2902:2888,2903:2892}],2888:[[2887,2902]],2891:[[2887,2878]],2892:[[2887,2903]],2893:[,9],2908:[[2849,2876],512],2909:[[2850,2876],512],2962:[,,{3031:2964}],2964:[[2962,3031]],3014:[,,{3006:3018,3031:3020}],3015:[,,{3006:3019}],3018:[[3014,3006]],3019:[[3015,3006]],3020:[[3014,3031]],3021:[,9]},
	3072:{3142:[,,{3158:3144}],3144:[[3142,3158]],3149:[,9],3157:[,84],3158:[,91],3260:[,7],3263:[,,{3285:3264}],3264:[[3263,3285]],3270:[,,{3266:3274,3285:3271,3286:3272}],3271:[[3270,3285]],3272:[[3270,3286]],3274:[[3270,3266],,{3285:3275}],3275:[[3274,3285]],3277:[,9]},
	3328:{3398:[,,{3390:3402,3415:3404}],3399:[,,{3390:3403}],3402:[[3398,3390]],3403:[[3399,3390]],3404:[[3398,3415]],3405:[,9],3530:[,9],3545:[,,{3530:3546,3535:3548,3551:3550}],3546:[[3545,3530]],3548:[[3545,3535],,{3530:3549}],3549:[[3548,3530]],3550:[[3545,3551]]},
	3584:{3635:[[3661,3634],256],3640:[,103],3641:[,103],3642:[,9],3656:[,107],3657:[,107],3658:[,107],3659:[,107],3763:[[3789,3762],256],3768:[,118],3769:[,118],3784:[,122],3785:[,122],3786:[,122],3787:[,122],3804:[[3755,3737],256],3805:[[3755,3745],256]},
	3840:{3852:[[3851],256],3864:[,220],3865:[,220],3893:[,220],3895:[,220],3897:[,216],3907:[[3906,4023],512],3917:[[3916,4023],512],3922:[[3921,4023],512],3927:[[3926,4023],512],3932:[[3931,4023],512],3945:[[3904,4021],512],3953:[,129],3954:[,130],3955:[[3953,3954],512],3956:[,132],3957:[[3953,3956],512],3958:[[4018,3968],512],3959:[[4018,3969],256],3960:[[4019,3968],512],3961:[[4019,3969],256],3962:[,130],3963:[,130],3964:[,130],3965:[,130],3968:[,130],3969:[[3953,3968],512],3970:[,230],3971:[,230],3972:[,9],3974:[,230],3975:[,230],3987:[[3986,4023],512],3997:[[3996,4023],512],4002:[[4001,4023],512],4007:[[4006,4023],512],4012:[[4011,4023],512],4025:[[3984,4021],512],4038:[,220]},
	4096:{4133:[,,{4142:4134}],4134:[[4133,4142]],4151:[,7],4153:[,9],4154:[,9],4237:[,220],4348:[[4316],256],69702:[,9],69759:[,9],69785:[,,{69818:69786}],69786:[[69785,69818]],69787:[,,{69818:69788}],69788:[[69787,69818]],69797:[,,{69818:69803}],69803:[[69797,69818]],69817:[,9],69818:[,7]},
	4352:{69888:[,230],69889:[,230],69890:[,230],69934:[[69937,69927]],69935:[[69938,69927]],69937:[,,{69927:69934}],69938:[,,{69927:69935}],69939:[,9],69940:[,9],70003:[,7],70080:[,9]},
	4608:{70197:[,9],70198:[,7],70377:[,7],70378:[,9]},
	4864:{4957:[,230],4958:[,230],4959:[,230],70460:[,7],70471:[,,{70462:70475,70487:70476}],70475:[[70471,70462]],70476:[[70471,70487]],70477:[,9],70502:[,230],70503:[,230],70504:[,230],70505:[,230],70506:[,230],70507:[,230],70508:[,230],70512:[,230],70513:[,230],70514:[,230],70515:[,230],70516:[,230]},
	5120:{70841:[,,{70832:70844,70842:70843,70845:70846}],70843:[[70841,70842]],70844:[[70841,70832]],70846:[[70841,70845]],70850:[,9],70851:[,7]},
	5376:{71096:[,,{71087:71098}],71097:[,,{71087:71099}],71098:[[71096,71087]],71099:[[71097,71087]],71103:[,9],71104:[,7]},
	5632:{71231:[,9],71350:[,9],71351:[,7]},
	5888:{5908:[,9],5940:[,9],6098:[,9],6109:[,230]},
	6144:{6313:[,228]},
	6400:{6457:[,222],6458:[,230],6459:[,220]},
	6656:{6679:[,230],6680:[,220],6752:[,9],6773:[,230],6774:[,230],6775:[,230],6776:[,230],6777:[,230],6778:[,230],6779:[,230],6780:[,230],6783:[,220],6832:[,230],6833:[,230],6834:[,230],6835:[,230],6836:[,230],6837:[,220],6838:[,220],6839:[,220],6840:[,220],6841:[,220],6842:[,220],6843:[,230],6844:[,230],6845:[,220]},
	6912:{6917:[,,{6965:6918}],6918:[[6917,6965]],6919:[,,{6965:6920}],6920:[[6919,6965]],6921:[,,{6965:6922}],6922:[[6921,6965]],6923:[,,{6965:6924}],6924:[[6923,6965]],6925:[,,{6965:6926}],6926:[[6925,6965]],6929:[,,{6965:6930}],6930:[[6929,6965]],6964:[,7],6970:[,,{6965:6971}],6971:[[6970,6965]],6972:[,,{6965:6973}],6973:[[6972,6965]],6974:[,,{6965:6976}],6975:[,,{6965:6977}],6976:[[6974,6965]],6977:[[6975,6965]],6978:[,,{6965:6979}],6979:[[6978,6965]],6980:[,9],7019:[,230],7020:[,220],7021:[,230],7022:[,230],7023:[,230],7024:[,230],7025:[,230],7026:[,230],7027:[,230],7082:[,9],7083:[,9],7142:[,7],7154:[,9],7155:[,9]},
	7168:{7223:[,7],7376:[,230],7377:[,230],7378:[,230],7380:[,1],7381:[,220],7382:[,220],7383:[,220],7384:[,220],7385:[,220],7386:[,230],7387:[,230],7388:[,220],7389:[,220],7390:[,220],7391:[,220],7392:[,230],7394:[,1],7395:[,1],7396:[,1],7397:[,1],7398:[,1],7399:[,1],7400:[,1],7405:[,220],7412:[,230],7416:[,230],7417:[,230]},
	7424:{7468:[[65],256],7469:[[198],256],7470:[[66],256],7472:[[68],256],7473:[[69],256],7474:[[398],256],7475:[[71],256],7476:[[72],256],7477:[[73],256],7478:[[74],256],7479:[[75],256],7480:[[76],256],7481:[[77],256],7482:[[78],256],7484:[[79],256],7485:[[546],256],7486:[[80],256],7487:[[82],256],7488:[[84],256],7489:[[85],256],7490:[[87],256],7491:[[97],256],7492:[[592],256],7493:[[593],256],7494:[[7426],256],7495:[[98],256],7496:[[100],256],7497:[[101],256],7498:[[601],256],7499:[[603],256],7500:[[604],256],7501:[[103],256],7503:[[107],256],7504:[[109],256],7505:[[331],256],7506:[[111],256],7507:[[596],256],7508:[[7446],256],7509:[[7447],256],7510:[[112],256],7511:[[116],256],7512:[[117],256],7513:[[7453],256],7514:[[623],256],7515:[[118],256],7516:[[7461],256],7517:[[946],256],7518:[[947],256],7519:[[948],256],7520:[[966],256],7521:[[967],256],7522:[[105],256],7523:[[114],256],7524:[[117],256],7525:[[118],256],7526:[[946],256],7527:[[947],256],7528:[[961],256],7529:[[966],256],7530:[[967],256],7544:[[1085],256],7579:[[594],256],7580:[[99],256],7581:[[597],256],7582:[[240],256],7583:[[604],256],7584:[[102],256],7585:[[607],256],7586:[[609],256],7587:[[613],256],7588:[[616],256],7589:[[617],256],7590:[[618],256],7591:[[7547],256],7592:[[669],256],7593:[[621],256],7594:[[7557],256],7595:[[671],256],7596:[[625],256],7597:[[624],256],7598:[[626],256],7599:[[627],256],7600:[[628],256],7601:[[629],256],7602:[[632],256],7603:[[642],256],7604:[[643],256],7605:[[427],256],7606:[[649],256],7607:[[650],256],7608:[[7452],256],7609:[[651],256],7610:[[652],256],7611:[[122],256],7612:[[656],256],7613:[[657],256],7614:[[658],256],7615:[[952],256],7616:[,230],7617:[,230],7618:[,220],7619:[,230],7620:[,230],7621:[,230],7622:[,230],7623:[,230],7624:[,230],7625:[,230],7626:[,220],7627:[,230],7628:[,230],7629:[,234],7630:[,214],7631:[,220],7632:[,202],7633:[,230],7634:[,230],7635:[,230],7636:[,230],7637:[,230],7638:[,230],7639:[,230],7640:[,230],7641:[,230],7642:[,230],7643:[,230],7644:[,230],7645:[,230],7646:[,230],7647:[,230],7648:[,230],7649:[,230],7650:[,230],7651:[,230],7652:[,230],7653:[,230],7654:[,230],7655:[,230],7656:[,230],7657:[,230],7658:[,230],7659:[,230],7660:[,230],7661:[,230],7662:[,230],7663:[,230],7664:[,230],7665:[,230],7666:[,230],7667:[,230],7668:[,230],7669:[,230],7676:[,233],7677:[,220],7678:[,230],7679:[,220]},
	7680:{7680:[[65,805]],7681:[[97,805]],7682:[[66,775]],7683:[[98,775]],7684:[[66,803]],7685:[[98,803]],7686:[[66,817]],7687:[[98,817]],7688:[[199,769]],7689:[[231,769]],7690:[[68,775]],7691:[[100,775]],7692:[[68,803]],7693:[[100,803]],7694:[[68,817]],7695:[[100,817]],7696:[[68,807]],7697:[[100,807]],7698:[[68,813]],7699:[[100,813]],7700:[[274,768]],7701:[[275,768]],7702:[[274,769]],7703:[[275,769]],7704:[[69,813]],7705:[[101,813]],7706:[[69,816]],7707:[[101,816]],7708:[[552,774]],7709:[[553,774]],7710:[[70,775]],7711:[[102,775]],7712:[[71,772]],7713:[[103,772]],7714:[[72,775]],7715:[[104,775]],7716:[[72,803]],7717:[[104,803]],7718:[[72,776]],7719:[[104,776]],7720:[[72,807]],7721:[[104,807]],7722:[[72,814]],7723:[[104,814]],7724:[[73,816]],7725:[[105,816]],7726:[[207,769]],7727:[[239,769]],7728:[[75,769]],7729:[[107,769]],7730:[[75,803]],7731:[[107,803]],7732:[[75,817]],7733:[[107,817]],7734:[[76,803],,{772:7736}],7735:[[108,803],,{772:7737}],7736:[[7734,772]],7737:[[7735,772]],7738:[[76,817]],7739:[[108,817]],7740:[[76,813]],7741:[[108,813]],7742:[[77,769]],7743:[[109,769]],7744:[[77,775]],7745:[[109,775]],7746:[[77,803]],7747:[[109,803]],7748:[[78,775]],7749:[[110,775]],7750:[[78,803]],7751:[[110,803]],7752:[[78,817]],7753:[[110,817]],7754:[[78,813]],7755:[[110,813]],7756:[[213,769]],7757:[[245,769]],7758:[[213,776]],7759:[[245,776]],7760:[[332,768]],7761:[[333,768]],7762:[[332,769]],7763:[[333,769]],7764:[[80,769]],7765:[[112,769]],7766:[[80,775]],7767:[[112,775]],7768:[[82,775]],7769:[[114,775]],7770:[[82,803],,{772:7772}],7771:[[114,803],,{772:7773}],7772:[[7770,772]],7773:[[7771,772]],7774:[[82,817]],7775:[[114,817]],7776:[[83,775]],7777:[[115,775]],7778:[[83,803],,{775:7784}],7779:[[115,803],,{775:7785}],7780:[[346,775]],7781:[[347,775]],7782:[[352,775]],7783:[[353,775]],7784:[[7778,775]],7785:[[7779,775]],7786:[[84,775]],7787:[[116,775]],7788:[[84,803]],7789:[[116,803]],7790:[[84,817]],7791:[[116,817]],7792:[[84,813]],7793:[[116,813]],7794:[[85,804]],7795:[[117,804]],7796:[[85,816]],7797:[[117,816]],7798:[[85,813]],7799:[[117,813]],7800:[[360,769]],7801:[[361,769]],7802:[[362,776]],7803:[[363,776]],7804:[[86,771]],7805:[[118,771]],7806:[[86,803]],7807:[[118,803]],7808:[[87,768]],7809:[[119,768]],7810:[[87,769]],7811:[[119,769]],7812:[[87,776]],7813:[[119,776]],7814:[[87,775]],7815:[[119,775]],7816:[[87,803]],7817:[[119,803]],7818:[[88,775]],7819:[[120,775]],7820:[[88,776]],7821:[[120,776]],7822:[[89,775]],7823:[[121,775]],7824:[[90,770]],7825:[[122,770]],7826:[[90,803]],7827:[[122,803]],7828:[[90,817]],7829:[[122,817]],7830:[[104,817]],7831:[[116,776]],7832:[[119,778]],7833:[[121,778]],7834:[[97,702],256],7835:[[383,775]],7840:[[65,803],,{770:7852,774:7862}],7841:[[97,803],,{770:7853,774:7863}],7842:[[65,777]],7843:[[97,777]],7844:[[194,769]],7845:[[226,769]],7846:[[194,768]],7847:[[226,768]],7848:[[194,777]],7849:[[226,777]],7850:[[194,771]],7851:[[226,771]],7852:[[7840,770]],7853:[[7841,770]],7854:[[258,769]],7855:[[259,769]],7856:[[258,768]],7857:[[259,768]],7858:[[258,777]],7859:[[259,777]],7860:[[258,771]],7861:[[259,771]],7862:[[7840,774]],7863:[[7841,774]],7864:[[69,803],,{770:7878}],7865:[[101,803],,{770:7879}],7866:[[69,777]],7867:[[101,777]],7868:[[69,771]],7869:[[101,771]],7870:[[202,769]],7871:[[234,769]],7872:[[202,768]],7873:[[234,768]],7874:[[202,777]],7875:[[234,777]],7876:[[202,771]],7877:[[234,771]],7878:[[7864,770]],7879:[[7865,770]],7880:[[73,777]],7881:[[105,777]],7882:[[73,803]],7883:[[105,803]],7884:[[79,803],,{770:7896}],7885:[[111,803],,{770:7897}],7886:[[79,777]],7887:[[111,777]],7888:[[212,769]],7889:[[244,769]],7890:[[212,768]],7891:[[244,768]],7892:[[212,777]],7893:[[244,777]],7894:[[212,771]],7895:[[244,771]],7896:[[7884,770]],7897:[[7885,770]],7898:[[416,769]],7899:[[417,769]],7900:[[416,768]],7901:[[417,768]],7902:[[416,777]],7903:[[417,777]],7904:[[416,771]],7905:[[417,771]],7906:[[416,803]],7907:[[417,803]],7908:[[85,803]],7909:[[117,803]],7910:[[85,777]],7911:[[117,777]],7912:[[431,769]],7913:[[432,769]],7914:[[431,768]],7915:[[432,768]],7916:[[431,777]],7917:[[432,777]],7918:[[431,771]],7919:[[432,771]],7920:[[431,803]],7921:[[432,803]],7922:[[89,768]],7923:[[121,768]],7924:[[89,803]],7925:[[121,803]],7926:[[89,777]],7927:[[121,777]],7928:[[89,771]],7929:[[121,771]]},
	7936:{7936:[[945,787],,{768:7938,769:7940,834:7942,837:8064}],7937:[[945,788],,{768:7939,769:7941,834:7943,837:8065}],7938:[[7936,768],,{837:8066}],7939:[[7937,768],,{837:8067}],7940:[[7936,769],,{837:8068}],7941:[[7937,769],,{837:8069}],7942:[[7936,834],,{837:8070}],7943:[[7937,834],,{837:8071}],7944:[[913,787],,{768:7946,769:7948,834:7950,837:8072}],7945:[[913,788],,{768:7947,769:7949,834:7951,837:8073}],7946:[[7944,768],,{837:8074}],7947:[[7945,768],,{837:8075}],7948:[[7944,769],,{837:8076}],7949:[[7945,769],,{837:8077}],7950:[[7944,834],,{837:8078}],7951:[[7945,834],,{837:8079}],7952:[[949,787],,{768:7954,769:7956}],7953:[[949,788],,{768:7955,769:7957}],7954:[[7952,768]],7955:[[7953,768]],7956:[[7952,769]],7957:[[7953,769]],7960:[[917,787],,{768:7962,769:7964}],7961:[[917,788],,{768:7963,769:7965}],7962:[[7960,768]],7963:[[7961,768]],7964:[[7960,769]],7965:[[7961,769]],7968:[[951,787],,{768:7970,769:7972,834:7974,837:8080}],7969:[[951,788],,{768:7971,769:7973,834:7975,837:8081}],7970:[[7968,768],,{837:8082}],7971:[[7969,768],,{837:8083}],7972:[[7968,769],,{837:8084}],7973:[[7969,769],,{837:8085}],7974:[[7968,834],,{837:8086}],7975:[[7969,834],,{837:8087}],7976:[[919,787],,{768:7978,769:7980,834:7982,837:8088}],7977:[[919,788],,{768:7979,769:7981,834:7983,837:8089}],7978:[[7976,768],,{837:8090}],7979:[[7977,768],,{837:8091}],7980:[[7976,769],,{837:8092}],7981:[[7977,769],,{837:8093}],7982:[[7976,834],,{837:8094}],7983:[[7977,834],,{837:8095}],7984:[[953,787],,{768:7986,769:7988,834:7990}],7985:[[953,788],,{768:7987,769:7989,834:7991}],7986:[[7984,768]],7987:[[7985,768]],7988:[[7984,769]],7989:[[7985,769]],7990:[[7984,834]],7991:[[7985,834]],7992:[[921,787],,{768:7994,769:7996,834:7998}],7993:[[921,788],,{768:7995,769:7997,834:7999}],7994:[[7992,768]],7995:[[7993,768]],7996:[[7992,769]],7997:[[7993,769]],7998:[[7992,834]],7999:[[7993,834]],8000:[[959,787],,{768:8002,769:8004}],8001:[[959,788],,{768:8003,769:8005}],8002:[[8000,768]],8003:[[8001,768]],8004:[[8000,769]],8005:[[8001,769]],8008:[[927,787],,{768:8010,769:8012}],8009:[[927,788],,{768:8011,769:8013}],8010:[[8008,768]],8011:[[8009,768]],8012:[[8008,769]],8013:[[8009,769]],8016:[[965,787],,{768:8018,769:8020,834:8022}],8017:[[965,788],,{768:8019,769:8021,834:8023}],8018:[[8016,768]],8019:[[8017,768]],8020:[[8016,769]],8021:[[8017,769]],8022:[[8016,834]],8023:[[8017,834]],8025:[[933,788],,{768:8027,769:8029,834:8031}],8027:[[8025,768]],8029:[[8025,769]],8031:[[8025,834]],8032:[[969,787],,{768:8034,769:8036,834:8038,837:8096}],8033:[[969,788],,{768:8035,769:8037,834:8039,837:8097}],8034:[[8032,768],,{837:8098}],8035:[[8033,768],,{837:8099}],8036:[[8032,769],,{837:8100}],8037:[[8033,769],,{837:8101}],8038:[[8032,834],,{837:8102}],8039:[[8033,834],,{837:8103}],8040:[[937,787],,{768:8042,769:8044,834:8046,837:8104}],8041:[[937,788],,{768:8043,769:8045,834:8047,837:8105}],8042:[[8040,768],,{837:8106}],8043:[[8041,768],,{837:8107}],8044:[[8040,769],,{837:8108}],8045:[[8041,769],,{837:8109}],8046:[[8040,834],,{837:8110}],8047:[[8041,834],,{837:8111}],8048:[[945,768],,{837:8114}],8049:[[940]],8050:[[949,768]],8051:[[941]],8052:[[951,768],,{837:8130}],8053:[[942]],8054:[[953,768]],8055:[[943]],8056:[[959,768]],8057:[[972]],8058:[[965,768]],8059:[[973]],8060:[[969,768],,{837:8178}],8061:[[974]],8064:[[7936,837]],8065:[[7937,837]],8066:[[7938,837]],8067:[[7939,837]],8068:[[7940,837]],8069:[[7941,837]],8070:[[7942,837]],8071:[[7943,837]],8072:[[7944,837]],8073:[[7945,837]],8074:[[7946,837]],8075:[[7947,837]],8076:[[7948,837]],8077:[[7949,837]],8078:[[7950,837]],8079:[[7951,837]],8080:[[7968,837]],8081:[[7969,837]],8082:[[7970,837]],8083:[[7971,837]],8084:[[7972,837]],8085:[[7973,837]],8086:[[7974,837]],8087:[[7975,837]],8088:[[7976,837]],8089:[[7977,837]],8090:[[7978,837]],8091:[[7979,837]],8092:[[7980,837]],8093:[[7981,837]],8094:[[7982,837]],8095:[[7983,837]],8096:[[8032,837]],8097:[[8033,837]],8098:[[8034,837]],8099:[[8035,837]],8100:[[8036,837]],8101:[[8037,837]],8102:[[8038,837]],8103:[[8039,837]],8104:[[8040,837]],8105:[[8041,837]],8106:[[8042,837]],8107:[[8043,837]],8108:[[8044,837]],8109:[[8045,837]],8110:[[8046,837]],8111:[[8047,837]],8112:[[945,774]],8113:[[945,772]],8114:[[8048,837]],8115:[[945,837]],8116:[[940,837]],8118:[[945,834],,{837:8119}],8119:[[8118,837]],8120:[[913,774]],8121:[[913,772]],8122:[[913,768]],8123:[[902]],8124:[[913,837]],8125:[[32,787],256],8126:[[953]],8127:[[32,787],256,{768:8141,769:8142,834:8143}],8128:[[32,834],256],8129:[[168,834]],8130:[[8052,837]],8131:[[951,837]],8132:[[942,837]],8134:[[951,834],,{837:8135}],8135:[[8134,837]],8136:[[917,768]],8137:[[904]],8138:[[919,768]],8139:[[905]],8140:[[919,837]],8141:[[8127,768]],8142:[[8127,769]],8143:[[8127,834]],8144:[[953,774]],8145:[[953,772]],8146:[[970,768]],8147:[[912]],8150:[[953,834]],8151:[[970,834]],8152:[[921,774]],8153:[[921,772]],8154:[[921,768]],8155:[[906]],8157:[[8190,768]],8158:[[8190,769]],8159:[[8190,834]],8160:[[965,774]],8161:[[965,772]],8162:[[971,768]],8163:[[944]],8164:[[961,787]],8165:[[961,788]],8166:[[965,834]],8167:[[971,834]],8168:[[933,774]],8169:[[933,772]],8170:[[933,768]],8171:[[910]],8172:[[929,788]],8173:[[168,768]],8174:[[901]],8175:[[96]],8178:[[8060,837]],8179:[[969,837]],8180:[[974,837]],8182:[[969,834],,{837:8183}],8183:[[8182,837]],8184:[[927,768]],8185:[[908]],8186:[[937,768]],8187:[[911]],8188:[[937,837]],8189:[[180]],8190:[[32,788],256,{768:8157,769:8158,834:8159}]},
	8192:{8192:[[8194]],8193:[[8195]],8194:[[32],256],8195:[[32],256],8196:[[32],256],8197:[[32],256],8198:[[32],256],8199:[[32],256],8200:[[32],256],8201:[[32],256],8202:[[32],256],8209:[[8208],256],8215:[[32,819],256],8228:[[46],256],8229:[[46,46],256],8230:[[46,46,46],256],8239:[[32],256],8243:[[8242,8242],256],8244:[[8242,8242,8242],256],8246:[[8245,8245],256],8247:[[8245,8245,8245],256],8252:[[33,33],256],8254:[[32,773],256],8263:[[63,63],256],8264:[[63,33],256],8265:[[33,63],256],8279:[[8242,8242,8242,8242],256],8287:[[32],256],8304:[[48],256],8305:[[105],256],8308:[[52],256],8309:[[53],256],8310:[[54],256],8311:[[55],256],8312:[[56],256],8313:[[57],256],8314:[[43],256],8315:[[8722],256],8316:[[61],256],8317:[[40],256],8318:[[41],256],8319:[[110],256],8320:[[48],256],8321:[[49],256],8322:[[50],256],8323:[[51],256],8324:[[52],256],8325:[[53],256],8326:[[54],256],8327:[[55],256],8328:[[56],256],8329:[[57],256],8330:[[43],256],8331:[[8722],256],8332:[[61],256],8333:[[40],256],8334:[[41],256],8336:[[97],256],8337:[[101],256],8338:[[111],256],8339:[[120],256],8340:[[601],256],8341:[[104],256],8342:[[107],256],8343:[[108],256],8344:[[109],256],8345:[[110],256],8346:[[112],256],8347:[[115],256],8348:[[116],256],8360:[[82,115],256],8400:[,230],8401:[,230],8402:[,1],8403:[,1],8404:[,230],8405:[,230],8406:[,230],8407:[,230],8408:[,1],8409:[,1],8410:[,1],8411:[,230],8412:[,230],8417:[,230],8421:[,1],8422:[,1],8423:[,230],8424:[,220],8425:[,230],8426:[,1],8427:[,1],8428:[,220],8429:[,220],8430:[,220],8431:[,220],8432:[,230]},
	8448:{8448:[[97,47,99],256],8449:[[97,47,115],256],8450:[[67],256],8451:[[176,67],256],8453:[[99,47,111],256],8454:[[99,47,117],256],8455:[[400],256],8457:[[176,70],256],8458:[[103],256],8459:[[72],256],8460:[[72],256],8461:[[72],256],8462:[[104],256],8463:[[295],256],8464:[[73],256],8465:[[73],256],8466:[[76],256],8467:[[108],256],8469:[[78],256],8470:[[78,111],256],8473:[[80],256],8474:[[81],256],8475:[[82],256],8476:[[82],256],8477:[[82],256],8480:[[83,77],256],8481:[[84,69,76],256],8482:[[84,77],256],8484:[[90],256],8486:[[937]],8488:[[90],256],8490:[[75]],8491:[[197]],8492:[[66],256],8493:[[67],256],8495:[[101],256],8496:[[69],256],8497:[[70],256],8499:[[77],256],8500:[[111],256],8501:[[1488],256],8502:[[1489],256],8503:[[1490],256],8504:[[1491],256],8505:[[105],256],8507:[[70,65,88],256],8508:[[960],256],8509:[[947],256],8510:[[915],256],8511:[[928],256],8512:[[8721],256],8517:[[68],256],8518:[[100],256],8519:[[101],256],8520:[[105],256],8521:[[106],256],8528:[[49,8260,55],256],8529:[[49,8260,57],256],8530:[[49,8260,49,48],256],8531:[[49,8260,51],256],8532:[[50,8260,51],256],8533:[[49,8260,53],256],8534:[[50,8260,53],256],8535:[[51,8260,53],256],8536:[[52,8260,53],256],8537:[[49,8260,54],256],8538:[[53,8260,54],256],8539:[[49,8260,56],256],8540:[[51,8260,56],256],8541:[[53,8260,56],256],8542:[[55,8260,56],256],8543:[[49,8260],256],8544:[[73],256],8545:[[73,73],256],8546:[[73,73,73],256],8547:[[73,86],256],8548:[[86],256],8549:[[86,73],256],8550:[[86,73,73],256],8551:[[86,73,73,73],256],8552:[[73,88],256],8553:[[88],256],8554:[[88,73],256],8555:[[88,73,73],256],8556:[[76],256],8557:[[67],256],8558:[[68],256],8559:[[77],256],8560:[[105],256],8561:[[105,105],256],8562:[[105,105,105],256],8563:[[105,118],256],8564:[[118],256],8565:[[118,105],256],8566:[[118,105,105],256],8567:[[118,105,105,105],256],8568:[[105,120],256],8569:[[120],256],8570:[[120,105],256],8571:[[120,105,105],256],8572:[[108],256],8573:[[99],256],8574:[[100],256],8575:[[109],256],8585:[[48,8260,51],256],8592:[,,{824:8602}],8594:[,,{824:8603}],8596:[,,{824:8622}],8602:[[8592,824]],8603:[[8594,824]],8622:[[8596,824]],8653:[[8656,824]],8654:[[8660,824]],8655:[[8658,824]],8656:[,,{824:8653}],8658:[,,{824:8655}],8660:[,,{824:8654}]},
	8704:{8707:[,,{824:8708}],8708:[[8707,824]],8712:[,,{824:8713}],8713:[[8712,824]],8715:[,,{824:8716}],8716:[[8715,824]],8739:[,,{824:8740}],8740:[[8739,824]],8741:[,,{824:8742}],8742:[[8741,824]],8748:[[8747,8747],256],8749:[[8747,8747,8747],256],8751:[[8750,8750],256],8752:[[8750,8750,8750],256],8764:[,,{824:8769}],8769:[[8764,824]],8771:[,,{824:8772}],8772:[[8771,824]],8773:[,,{824:8775}],8775:[[8773,824]],8776:[,,{824:8777}],8777:[[8776,824]],8781:[,,{824:8813}],8800:[[61,824]],8801:[,,{824:8802}],8802:[[8801,824]],8804:[,,{824:8816}],8805:[,,{824:8817}],8813:[[8781,824]],8814:[[60,824]],8815:[[62,824]],8816:[[8804,824]],8817:[[8805,824]],8818:[,,{824:8820}],8819:[,,{824:8821}],8820:[[8818,824]],8821:[[8819,824]],8822:[,,{824:8824}],8823:[,,{824:8825}],8824:[[8822,824]],8825:[[8823,824]],8826:[,,{824:8832}],8827:[,,{824:8833}],8828:[,,{824:8928}],8829:[,,{824:8929}],8832:[[8826,824]],8833:[[8827,824]],8834:[,,{824:8836}],8835:[,,{824:8837}],8836:[[8834,824]],8837:[[8835,824]],8838:[,,{824:8840}],8839:[,,{824:8841}],8840:[[8838,824]],8841:[[8839,824]],8849:[,,{824:8930}],8850:[,,{824:8931}],8866:[,,{824:8876}],8872:[,,{824:8877}],8873:[,,{824:8878}],8875:[,,{824:8879}],8876:[[8866,824]],8877:[[8872,824]],8878:[[8873,824]],8879:[[8875,824]],8882:[,,{824:8938}],8883:[,,{824:8939}],8884:[,,{824:8940}],8885:[,,{824:8941}],8928:[[8828,824]],8929:[[8829,824]],8930:[[8849,824]],8931:[[8850,824]],8938:[[8882,824]],8939:[[8883,824]],8940:[[8884,824]],8941:[[8885,824]]},
	8960:{9001:[[12296]],9002:[[12297]]},
	9216:{9312:[[49],256],9313:[[50],256],9314:[[51],256],9315:[[52],256],9316:[[53],256],9317:[[54],256],9318:[[55],256],9319:[[56],256],9320:[[57],256],9321:[[49,48],256],9322:[[49,49],256],9323:[[49,50],256],9324:[[49,51],256],9325:[[49,52],256],9326:[[49,53],256],9327:[[49,54],256],9328:[[49,55],256],9329:[[49,56],256],9330:[[49,57],256],9331:[[50,48],256],9332:[[40,49,41],256],9333:[[40,50,41],256],9334:[[40,51,41],256],9335:[[40,52,41],256],9336:[[40,53,41],256],9337:[[40,54,41],256],9338:[[40,55,41],256],9339:[[40,56,41],256],9340:[[40,57,41],256],9341:[[40,49,48,41],256],9342:[[40,49,49,41],256],9343:[[40,49,50,41],256],9344:[[40,49,51,41],256],9345:[[40,49,52,41],256],9346:[[40,49,53,41],256],9347:[[40,49,54,41],256],9348:[[40,49,55,41],256],9349:[[40,49,56,41],256],9350:[[40,49,57,41],256],9351:[[40,50,48,41],256],9352:[[49,46],256],9353:[[50,46],256],9354:[[51,46],256],9355:[[52,46],256],9356:[[53,46],256],9357:[[54,46],256],9358:[[55,46],256],9359:[[56,46],256],9360:[[57,46],256],9361:[[49,48,46],256],9362:[[49,49,46],256],9363:[[49,50,46],256],9364:[[49,51,46],256],9365:[[49,52,46],256],9366:[[49,53,46],256],9367:[[49,54,46],256],9368:[[49,55,46],256],9369:[[49,56,46],256],9370:[[49,57,46],256],9371:[[50,48,46],256],9372:[[40,97,41],256],9373:[[40,98,41],256],9374:[[40,99,41],256],9375:[[40,100,41],256],9376:[[40,101,41],256],9377:[[40,102,41],256],9378:[[40,103,41],256],9379:[[40,104,41],256],9380:[[40,105,41],256],9381:[[40,106,41],256],9382:[[40,107,41],256],9383:[[40,108,41],256],9384:[[40,109,41],256],9385:[[40,110,41],256],9386:[[40,111,41],256],9387:[[40,112,41],256],9388:[[40,113,41],256],9389:[[40,114,41],256],9390:[[40,115,41],256],9391:[[40,116,41],256],9392:[[40,117,41],256],9393:[[40,118,41],256],9394:[[40,119,41],256],9395:[[40,120,41],256],9396:[[40,121,41],256],9397:[[40,122,41],256],9398:[[65],256],9399:[[66],256],9400:[[67],256],9401:[[68],256],9402:[[69],256],9403:[[70],256],9404:[[71],256],9405:[[72],256],9406:[[73],256],9407:[[74],256],9408:[[75],256],9409:[[76],256],9410:[[77],256],9411:[[78],256],9412:[[79],256],9413:[[80],256],9414:[[81],256],9415:[[82],256],9416:[[83],256],9417:[[84],256],9418:[[85],256],9419:[[86],256],9420:[[87],256],9421:[[88],256],9422:[[89],256],9423:[[90],256],9424:[[97],256],9425:[[98],256],9426:[[99],256],9427:[[100],256],9428:[[101],256],9429:[[102],256],9430:[[103],256],9431:[[104],256],9432:[[105],256],9433:[[106],256],9434:[[107],256],9435:[[108],256],9436:[[109],256],9437:[[110],256],9438:[[111],256],9439:[[112],256],9440:[[113],256],9441:[[114],256],9442:[[115],256],9443:[[116],256],9444:[[117],256],9445:[[118],256],9446:[[119],256],9447:[[120],256],9448:[[121],256],9449:[[122],256],9450:[[48],256]},
	10752:{10764:[[8747,8747,8747,8747],256],10868:[[58,58,61],256],10869:[[61,61],256],10870:[[61,61,61],256],10972:[[10973,824],512]},
	11264:{11388:[[106],256],11389:[[86],256],11503:[,230],11504:[,230],11505:[,230]},
	11520:{11631:[[11617],256],11647:[,9],11744:[,230],11745:[,230],11746:[,230],11747:[,230],11748:[,230],11749:[,230],11750:[,230],11751:[,230],11752:[,230],11753:[,230],11754:[,230],11755:[,230],11756:[,230],11757:[,230],11758:[,230],11759:[,230],11760:[,230],11761:[,230],11762:[,230],11763:[,230],11764:[,230],11765:[,230],11766:[,230],11767:[,230],11768:[,230],11769:[,230],11770:[,230],11771:[,230],11772:[,230],11773:[,230],11774:[,230],11775:[,230]},
	11776:{11935:[[27597],256],12019:[[40863],256]},
	12032:{12032:[[19968],256],12033:[[20008],256],12034:[[20022],256],12035:[[20031],256],12036:[[20057],256],12037:[[20101],256],12038:[[20108],256],12039:[[20128],256],12040:[[20154],256],12041:[[20799],256],12042:[[20837],256],12043:[[20843],256],12044:[[20866],256],12045:[[20886],256],12046:[[20907],256],12047:[[20960],256],12048:[[20981],256],12049:[[20992],256],12050:[[21147],256],12051:[[21241],256],12052:[[21269],256],12053:[[21274],256],12054:[[21304],256],12055:[[21313],256],12056:[[21340],256],12057:[[21353],256],12058:[[21378],256],12059:[[21430],256],12060:[[21448],256],12061:[[21475],256],12062:[[22231],256],12063:[[22303],256],12064:[[22763],256],12065:[[22786],256],12066:[[22794],256],12067:[[22805],256],12068:[[22823],256],12069:[[22899],256],12070:[[23376],256],12071:[[23424],256],12072:[[23544],256],12073:[[23567],256],12074:[[23586],256],12075:[[23608],256],12076:[[23662],256],12077:[[23665],256],12078:[[24027],256],12079:[[24037],256],12080:[[24049],256],12081:[[24062],256],12082:[[24178],256],12083:[[24186],256],12084:[[24191],256],12085:[[24308],256],12086:[[24318],256],12087:[[24331],256],12088:[[24339],256],12089:[[24400],256],12090:[[24417],256],12091:[[24435],256],12092:[[24515],256],12093:[[25096],256],12094:[[25142],256],12095:[[25163],256],12096:[[25903],256],12097:[[25908],256],12098:[[25991],256],12099:[[26007],256],12100:[[26020],256],12101:[[26041],256],12102:[[26080],256],12103:[[26085],256],12104:[[26352],256],12105:[[26376],256],12106:[[26408],256],12107:[[27424],256],12108:[[27490],256],12109:[[27513],256],12110:[[27571],256],12111:[[27595],256],12112:[[27604],256],12113:[[27611],256],12114:[[27663],256],12115:[[27668],256],12116:[[27700],256],12117:[[28779],256],12118:[[29226],256],12119:[[29238],256],12120:[[29243],256],12121:[[29247],256],12122:[[29255],256],12123:[[29273],256],12124:[[29275],256],12125:[[29356],256],12126:[[29572],256],12127:[[29577],256],12128:[[29916],256],12129:[[29926],256],12130:[[29976],256],12131:[[29983],256],12132:[[29992],256],12133:[[30000],256],12134:[[30091],256],12135:[[30098],256],12136:[[30326],256],12137:[[30333],256],12138:[[30382],256],12139:[[30399],256],12140:[[30446],256],12141:[[30683],256],12142:[[30690],256],12143:[[30707],256],12144:[[31034],256],12145:[[31160],256],12146:[[31166],256],12147:[[31348],256],12148:[[31435],256],12149:[[31481],256],12150:[[31859],256],12151:[[31992],256],12152:[[32566],256],12153:[[32593],256],12154:[[32650],256],12155:[[32701],256],12156:[[32769],256],12157:[[32780],256],12158:[[32786],256],12159:[[32819],256],12160:[[32895],256],12161:[[32905],256],12162:[[33251],256],12163:[[33258],256],12164:[[33267],256],12165:[[33276],256],12166:[[33292],256],12167:[[33307],256],12168:[[33311],256],12169:[[33390],256],12170:[[33394],256],12171:[[33400],256],12172:[[34381],256],12173:[[34411],256],12174:[[34880],256],12175:[[34892],256],12176:[[34915],256],12177:[[35198],256],12178:[[35211],256],12179:[[35282],256],12180:[[35328],256],12181:[[35895],256],12182:[[35910],256],12183:[[35925],256],12184:[[35960],256],12185:[[35997],256],12186:[[36196],256],12187:[[36208],256],12188:[[36275],256],12189:[[36523],256],12190:[[36554],256],12191:[[36763],256],12192:[[36784],256],12193:[[36789],256],12194:[[37009],256],12195:[[37193],256],12196:[[37318],256],12197:[[37324],256],12198:[[37329],256],12199:[[38263],256],12200:[[38272],256],12201:[[38428],256],12202:[[38582],256],12203:[[38585],256],12204:[[38632],256],12205:[[38737],256],12206:[[38750],256],12207:[[38754],256],12208:[[38761],256],12209:[[38859],256],12210:[[38893],256],12211:[[38899],256],12212:[[38913],256],12213:[[39080],256],12214:[[39131],256],12215:[[39135],256],12216:[[39318],256],12217:[[39321],256],12218:[[39340],256],12219:[[39592],256],12220:[[39640],256],12221:[[39647],256],12222:[[39717],256],12223:[[39727],256],12224:[[39730],256],12225:[[39740],256],12226:[[39770],256],12227:[[40165],256],12228:[[40565],256],12229:[[40575],256],12230:[[40613],256],12231:[[40635],256],12232:[[40643],256],12233:[[40653],256],12234:[[40657],256],12235:[[40697],256],12236:[[40701],256],12237:[[40718],256],12238:[[40723],256],12239:[[40736],256],12240:[[40763],256],12241:[[40778],256],12242:[[40786],256],12243:[[40845],256],12244:[[40860],256],12245:[[40864],256]},
	12288:{12288:[[32],256],12330:[,218],12331:[,228],12332:[,232],12333:[,222],12334:[,224],12335:[,224],12342:[[12306],256],12344:[[21313],256],12345:[[21316],256],12346:[[21317],256],12358:[,,{12441:12436}],12363:[,,{12441:12364}],12364:[[12363,12441]],12365:[,,{12441:12366}],12366:[[12365,12441]],12367:[,,{12441:12368}],12368:[[12367,12441]],12369:[,,{12441:12370}],12370:[[12369,12441]],12371:[,,{12441:12372}],12372:[[12371,12441]],12373:[,,{12441:12374}],12374:[[12373,12441]],12375:[,,{12441:12376}],12376:[[12375,12441]],12377:[,,{12441:12378}],12378:[[12377,12441]],12379:[,,{12441:12380}],12380:[[12379,12441]],12381:[,,{12441:12382}],12382:[[12381,12441]],12383:[,,{12441:12384}],12384:[[12383,12441]],12385:[,,{12441:12386}],12386:[[12385,12441]],12388:[,,{12441:12389}],12389:[[12388,12441]],12390:[,,{12441:12391}],12391:[[12390,12441]],12392:[,,{12441:12393}],12393:[[12392,12441]],12399:[,,{12441:12400,12442:12401}],12400:[[12399,12441]],12401:[[12399,12442]],12402:[,,{12441:12403,12442:12404}],12403:[[12402,12441]],12404:[[12402,12442]],12405:[,,{12441:12406,12442:12407}],12406:[[12405,12441]],12407:[[12405,12442]],12408:[,,{12441:12409,12442:12410}],12409:[[12408,12441]],12410:[[12408,12442]],12411:[,,{12441:12412,12442:12413}],12412:[[12411,12441]],12413:[[12411,12442]],12436:[[12358,12441]],12441:[,8],12442:[,8],12443:[[32,12441],256],12444:[[32,12442],256],12445:[,,{12441:12446}],12446:[[12445,12441]],12447:[[12424,12426],256],12454:[,,{12441:12532}],12459:[,,{12441:12460}],12460:[[12459,12441]],12461:[,,{12441:12462}],12462:[[12461,12441]],12463:[,,{12441:12464}],12464:[[12463,12441]],12465:[,,{12441:12466}],12466:[[12465,12441]],12467:[,,{12441:12468}],12468:[[12467,12441]],12469:[,,{12441:12470}],12470:[[12469,12441]],12471:[,,{12441:12472}],12472:[[12471,12441]],12473:[,,{12441:12474}],12474:[[12473,12441]],12475:[,,{12441:12476}],12476:[[12475,12441]],12477:[,,{12441:12478}],12478:[[12477,12441]],12479:[,,{12441:12480}],12480:[[12479,12441]],12481:[,,{12441:12482}],12482:[[12481,12441]],12484:[,,{12441:12485}],12485:[[12484,12441]],12486:[,,{12441:12487}],12487:[[12486,12441]],12488:[,,{12441:12489}],12489:[[12488,12441]],12495:[,,{12441:12496,12442:12497}],12496:[[12495,12441]],12497:[[12495,12442]],12498:[,,{12441:12499,12442:12500}],12499:[[12498,12441]],12500:[[12498,12442]],12501:[,,{12441:12502,12442:12503}],12502:[[12501,12441]],12503:[[12501,12442]],12504:[,,{12441:12505,12442:12506}],12505:[[12504,12441]],12506:[[12504,12442]],12507:[,,{12441:12508,12442:12509}],12508:[[12507,12441]],12509:[[12507,12442]],12527:[,,{12441:12535}],12528:[,,{12441:12536}],12529:[,,{12441:12537}],12530:[,,{12441:12538}],12532:[[12454,12441]],12535:[[12527,12441]],12536:[[12528,12441]],12537:[[12529,12441]],12538:[[12530,12441]],12541:[,,{12441:12542}],12542:[[12541,12441]],12543:[[12467,12488],256]},
	12544:{12593:[[4352],256],12594:[[4353],256],12595:[[4522],256],12596:[[4354],256],12597:[[4524],256],12598:[[4525],256],12599:[[4355],256],12600:[[4356],256],12601:[[4357],256],12602:[[4528],256],12603:[[4529],256],12604:[[4530],256],12605:[[4531],256],12606:[[4532],256],12607:[[4533],256],12608:[[4378],256],12609:[[4358],256],12610:[[4359],256],12611:[[4360],256],12612:[[4385],256],12613:[[4361],256],12614:[[4362],256],12615:[[4363],256],12616:[[4364],256],12617:[[4365],256],12618:[[4366],256],12619:[[4367],256],12620:[[4368],256],12621:[[4369],256],12622:[[4370],256],12623:[[4449],256],12624:[[4450],256],12625:[[4451],256],12626:[[4452],256],12627:[[4453],256],12628:[[4454],256],12629:[[4455],256],12630:[[4456],256],12631:[[4457],256],12632:[[4458],256],12633:[[4459],256],12634:[[4460],256],12635:[[4461],256],12636:[[4462],256],12637:[[4463],256],12638:[[4464],256],12639:[[4465],256],12640:[[4466],256],12641:[[4467],256],12642:[[4468],256],12643:[[4469],256],12644:[[4448],256],12645:[[4372],256],12646:[[4373],256],12647:[[4551],256],12648:[[4552],256],12649:[[4556],256],12650:[[4558],256],12651:[[4563],256],12652:[[4567],256],12653:[[4569],256],12654:[[4380],256],12655:[[4573],256],12656:[[4575],256],12657:[[4381],256],12658:[[4382],256],12659:[[4384],256],12660:[[4386],256],12661:[[4387],256],12662:[[4391],256],12663:[[4393],256],12664:[[4395],256],12665:[[4396],256],12666:[[4397],256],12667:[[4398],256],12668:[[4399],256],12669:[[4402],256],12670:[[4406],256],12671:[[4416],256],12672:[[4423],256],12673:[[4428],256],12674:[[4593],256],12675:[[4594],256],12676:[[4439],256],12677:[[4440],256],12678:[[4441],256],12679:[[4484],256],12680:[[4485],256],12681:[[4488],256],12682:[[4497],256],12683:[[4498],256],12684:[[4500],256],12685:[[4510],256],12686:[[4513],256],12690:[[19968],256],12691:[[20108],256],12692:[[19977],256],12693:[[22235],256],12694:[[19978],256],12695:[[20013],256],12696:[[19979],256],12697:[[30002],256],12698:[[20057],256],12699:[[19993],256],12700:[[19969],256],12701:[[22825],256],12702:[[22320],256],12703:[[20154],256]},
	12800:{12800:[[40,4352,41],256],12801:[[40,4354,41],256],12802:[[40,4355,41],256],12803:[[40,4357,41],256],12804:[[40,4358,41],256],12805:[[40,4359,41],256],12806:[[40,4361,41],256],12807:[[40,4363,41],256],12808:[[40,4364,41],256],12809:[[40,4366,41],256],12810:[[40,4367,41],256],12811:[[40,4368,41],256],12812:[[40,4369,41],256],12813:[[40,4370,41],256],12814:[[40,4352,4449,41],256],12815:[[40,4354,4449,41],256],12816:[[40,4355,4449,41],256],12817:[[40,4357,4449,41],256],12818:[[40,4358,4449,41],256],12819:[[40,4359,4449,41],256],12820:[[40,4361,4449,41],256],12821:[[40,4363,4449,41],256],12822:[[40,4364,4449,41],256],12823:[[40,4366,4449,41],256],12824:[[40,4367,4449,41],256],12825:[[40,4368,4449,41],256],12826:[[40,4369,4449,41],256],12827:[[40,4370,4449,41],256],12828:[[40,4364,4462,41],256],12829:[[40,4363,4457,4364,4453,4523,41],256],12830:[[40,4363,4457,4370,4462,41],256],12832:[[40,19968,41],256],12833:[[40,20108,41],256],12834:[[40,19977,41],256],12835:[[40,22235,41],256],12836:[[40,20116,41],256],12837:[[40,20845,41],256],12838:[[40,19971,41],256],12839:[[40,20843,41],256],12840:[[40,20061,41],256],12841:[[40,21313,41],256],12842:[[40,26376,41],256],12843:[[40,28779,41],256],12844:[[40,27700,41],256],12845:[[40,26408,41],256],12846:[[40,37329,41],256],12847:[[40,22303,41],256],12848:[[40,26085,41],256],12849:[[40,26666,41],256],12850:[[40,26377,41],256],12851:[[40,31038,41],256],12852:[[40,21517,41],256],12853:[[40,29305,41],256],12854:[[40,36001,41],256],12855:[[40,31069,41],256],12856:[[40,21172,41],256],12857:[[40,20195,41],256],12858:[[40,21628,41],256],12859:[[40,23398,41],256],12860:[[40,30435,41],256],12861:[[40,20225,41],256],12862:[[40,36039,41],256],12863:[[40,21332,41],256],12864:[[40,31085,41],256],12865:[[40,20241,41],256],12866:[[40,33258,41],256],12867:[[40,33267,41],256],12868:[[21839],256],12869:[[24188],256],12870:[[25991],256],12871:[[31631],256],12880:[[80,84,69],256],12881:[[50,49],256],12882:[[50,50],256],12883:[[50,51],256],12884:[[50,52],256],12885:[[50,53],256],12886:[[50,54],256],12887:[[50,55],256],12888:[[50,56],256],12889:[[50,57],256],12890:[[51,48],256],12891:[[51,49],256],12892:[[51,50],256],12893:[[51,51],256],12894:[[51,52],256],12895:[[51,53],256],12896:[[4352],256],12897:[[4354],256],12898:[[4355],256],12899:[[4357],256],12900:[[4358],256],12901:[[4359],256],12902:[[4361],256],12903:[[4363],256],12904:[[4364],256],12905:[[4366],256],12906:[[4367],256],12907:[[4368],256],12908:[[4369],256],12909:[[4370],256],12910:[[4352,4449],256],12911:[[4354,4449],256],12912:[[4355,4449],256],12913:[[4357,4449],256],12914:[[4358,4449],256],12915:[[4359,4449],256],12916:[[4361,4449],256],12917:[[4363,4449],256],12918:[[4364,4449],256],12919:[[4366,4449],256],12920:[[4367,4449],256],12921:[[4368,4449],256],12922:[[4369,4449],256],12923:[[4370,4449],256],12924:[[4366,4449,4535,4352,4457],256],12925:[[4364,4462,4363,4468],256],12926:[[4363,4462],256],12928:[[19968],256],12929:[[20108],256],12930:[[19977],256],12931:[[22235],256],12932:[[20116],256],12933:[[20845],256],12934:[[19971],256],12935:[[20843],256],12936:[[20061],256],12937:[[21313],256],12938:[[26376],256],12939:[[28779],256],12940:[[27700],256],12941:[[26408],256],12942:[[37329],256],12943:[[22303],256],12944:[[26085],256],12945:[[26666],256],12946:[[26377],256],12947:[[31038],256],12948:[[21517],256],12949:[[29305],256],12950:[[36001],256],12951:[[31069],256],12952:[[21172],256],12953:[[31192],256],12954:[[30007],256],12955:[[22899],256],12956:[[36969],256],12957:[[20778],256],12958:[[21360],256],12959:[[27880],256],12960:[[38917],256],12961:[[20241],256],12962:[[20889],256],12963:[[27491],256],12964:[[19978],256],12965:[[20013],256],12966:[[19979],256],12967:[[24038],256],12968:[[21491],256],12969:[[21307],256],12970:[[23447],256],12971:[[23398],256],12972:[[30435],256],12973:[[20225],256],12974:[[36039],256],12975:[[21332],256],12976:[[22812],256],12977:[[51,54],256],12978:[[51,55],256],12979:[[51,56],256],12980:[[51,57],256],12981:[[52,48],256],12982:[[52,49],256],12983:[[52,50],256],12984:[[52,51],256],12985:[[52,52],256],12986:[[52,53],256],12987:[[52,54],256],12988:[[52,55],256],12989:[[52,56],256],12990:[[52,57],256],12991:[[53,48],256],12992:[[49,26376],256],12993:[[50,26376],256],12994:[[51,26376],256],12995:[[52,26376],256],12996:[[53,26376],256],12997:[[54,26376],256],12998:[[55,26376],256],12999:[[56,26376],256],13000:[[57,26376],256],13001:[[49,48,26376],256],13002:[[49,49,26376],256],13003:[[49,50,26376],256],13004:[[72,103],256],13005:[[101,114,103],256],13006:[[101,86],256],13007:[[76,84,68],256],13008:[[12450],256],13009:[[12452],256],13010:[[12454],256],13011:[[12456],256],13012:[[12458],256],13013:[[12459],256],13014:[[12461],256],13015:[[12463],256],13016:[[12465],256],13017:[[12467],256],13018:[[12469],256],13019:[[12471],256],13020:[[12473],256],13021:[[12475],256],13022:[[12477],256],13023:[[12479],256],13024:[[12481],256],13025:[[12484],256],13026:[[12486],256],13027:[[12488],256],13028:[[12490],256],13029:[[12491],256],13030:[[12492],256],13031:[[12493],256],13032:[[12494],256],13033:[[12495],256],13034:[[12498],256],13035:[[12501],256],13036:[[12504],256],13037:[[12507],256],13038:[[12510],256],13039:[[12511],256],13040:[[12512],256],13041:[[12513],256],13042:[[12514],256],13043:[[12516],256],13044:[[12518],256],13045:[[12520],256],13046:[[12521],256],13047:[[12522],256],13048:[[12523],256],13049:[[12524],256],13050:[[12525],256],13051:[[12527],256],13052:[[12528],256],13053:[[12529],256],13054:[[12530],256]},
	13056:{13056:[[12450,12497,12540,12488],256],13057:[[12450,12523,12501,12449],256],13058:[[12450,12531,12506,12450],256],13059:[[12450,12540,12523],256],13060:[[12452,12491,12531,12464],256],13061:[[12452,12531,12481],256],13062:[[12454,12457,12531],256],13063:[[12456,12473,12463,12540,12489],256],13064:[[12456,12540,12459,12540],256],13065:[[12458,12531,12473],256],13066:[[12458,12540,12512],256],13067:[[12459,12452,12522],256],13068:[[12459,12521,12483,12488],256],13069:[[12459,12525,12522,12540],256],13070:[[12460,12525,12531],256],13071:[[12460,12531,12510],256],13072:[[12462,12460],256],13073:[[12462,12491,12540],256],13074:[[12461,12517,12522,12540],256],13075:[[12462,12523,12480,12540],256],13076:[[12461,12525],256],13077:[[12461,12525,12464,12521,12512],256],13078:[[12461,12525,12513,12540,12488,12523],256],13079:[[12461,12525,12527,12483,12488],256],13080:[[12464,12521,12512],256],13081:[[12464,12521,12512,12488,12531],256],13082:[[12463,12523,12476,12452,12525],256],13083:[[12463,12525,12540,12493],256],13084:[[12465,12540,12473],256],13085:[[12467,12523,12490],256],13086:[[12467,12540,12509],256],13087:[[12469,12452,12463,12523],256],13088:[[12469,12531,12481,12540,12512],256],13089:[[12471,12522,12531,12464],256],13090:[[12475,12531,12481],256],13091:[[12475,12531,12488],256],13092:[[12480,12540,12473],256],13093:[[12487,12471],256],13094:[[12489,12523],256],13095:[[12488,12531],256],13096:[[12490,12494],256],13097:[[12494,12483,12488],256],13098:[[12495,12452,12484],256],13099:[[12497,12540,12475,12531,12488],256],13100:[[12497,12540,12484],256],13101:[[12496,12540,12524,12523],256],13102:[[12500,12450,12473,12488,12523],256],13103:[[12500,12463,12523],256],13104:[[12500,12467],256],13105:[[12499,12523],256],13106:[[12501,12449,12521,12483,12489],256],13107:[[12501,12451,12540,12488],256],13108:[[12502,12483,12471,12455,12523],256],13109:[[12501,12521,12531],256],13110:[[12504,12463,12479,12540,12523],256],13111:[[12506,12477],256],13112:[[12506,12491,12498],256],13113:[[12504,12523,12484],256],13114:[[12506,12531,12473],256],13115:[[12506,12540,12472],256],13116:[[12505,12540,12479],256],13117:[[12509,12452,12531,12488],256],13118:[[12508,12523,12488],256],13119:[[12507,12531],256],13120:[[12509,12531,12489],256],13121:[[12507,12540,12523],256],13122:[[12507,12540,12531],256],13123:[[12510,12452,12463,12525],256],13124:[[12510,12452,12523],256],13125:[[12510,12483,12495],256],13126:[[12510,12523,12463],256],13127:[[12510,12531,12471,12519,12531],256],13128:[[12511,12463,12525,12531],256],13129:[[12511,12522],256],13130:[[12511,12522,12496,12540,12523],256],13131:[[12513,12460],256],13132:[[12513,12460,12488,12531],256],13133:[[12513,12540,12488,12523],256],13134:[[12516,12540,12489],256],13135:[[12516,12540,12523],256],13136:[[12518,12450,12531],256],13137:[[12522,12483,12488,12523],256],13138:[[12522,12521],256],13139:[[12523,12500,12540],256],13140:[[12523,12540,12502,12523],256],13141:[[12524,12512],256],13142:[[12524,12531,12488,12466,12531],256],13143:[[12527,12483,12488],256],13144:[[48,28857],256],13145:[[49,28857],256],13146:[[50,28857],256],13147:[[51,28857],256],13148:[[52,28857],256],13149:[[53,28857],256],13150:[[54,28857],256],13151:[[55,28857],256],13152:[[56,28857],256],13153:[[57,28857],256],13154:[[49,48,28857],256],13155:[[49,49,28857],256],13156:[[49,50,28857],256],13157:[[49,51,28857],256],13158:[[49,52,28857],256],13159:[[49,53,28857],256],13160:[[49,54,28857],256],13161:[[49,55,28857],256],13162:[[49,56,28857],256],13163:[[49,57,28857],256],13164:[[50,48,28857],256],13165:[[50,49,28857],256],13166:[[50,50,28857],256],13167:[[50,51,28857],256],13168:[[50,52,28857],256],13169:[[104,80,97],256],13170:[[100,97],256],13171:[[65,85],256],13172:[[98,97,114],256],13173:[[111,86],256],13174:[[112,99],256],13175:[[100,109],256],13176:[[100,109,178],256],13177:[[100,109,179],256],13178:[[73,85],256],13179:[[24179,25104],256],13180:[[26157,21644],256],13181:[[22823,27491],256],13182:[[26126,27835],256],13183:[[26666,24335,20250,31038],256],13184:[[112,65],256],13185:[[110,65],256],13186:[[956,65],256],13187:[[109,65],256],13188:[[107,65],256],13189:[[75,66],256],13190:[[77,66],256],13191:[[71,66],256],13192:[[99,97,108],256],13193:[[107,99,97,108],256],13194:[[112,70],256],13195:[[110,70],256],13196:[[956,70],256],13197:[[956,103],256],13198:[[109,103],256],13199:[[107,103],256],13200:[[72,122],256],13201:[[107,72,122],256],13202:[[77,72,122],256],13203:[[71,72,122],256],13204:[[84,72,122],256],13205:[[956,8467],256],13206:[[109,8467],256],13207:[[100,8467],256],13208:[[107,8467],256],13209:[[102,109],256],13210:[[110,109],256],13211:[[956,109],256],13212:[[109,109],256],13213:[[99,109],256],13214:[[107,109],256],13215:[[109,109,178],256],13216:[[99,109,178],256],13217:[[109,178],256],13218:[[107,109,178],256],13219:[[109,109,179],256],13220:[[99,109,179],256],13221:[[109,179],256],13222:[[107,109,179],256],13223:[[109,8725,115],256],13224:[[109,8725,115,178],256],13225:[[80,97],256],13226:[[107,80,97],256],13227:[[77,80,97],256],13228:[[71,80,97],256],13229:[[114,97,100],256],13230:[[114,97,100,8725,115],256],13231:[[114,97,100,8725,115,178],256],13232:[[112,115],256],13233:[[110,115],256],13234:[[956,115],256],13235:[[109,115],256],13236:[[112,86],256],13237:[[110,86],256],13238:[[956,86],256],13239:[[109,86],256],13240:[[107,86],256],13241:[[77,86],256],13242:[[112,87],256],13243:[[110,87],256],13244:[[956,87],256],13245:[[109,87],256],13246:[[107,87],256],13247:[[77,87],256],13248:[[107,937],256],13249:[[77,937],256],13250:[[97,46,109,46],256],13251:[[66,113],256],13252:[[99,99],256],13253:[[99,100],256],13254:[[67,8725,107,103],256],13255:[[67,111,46],256],13256:[[100,66],256],13257:[[71,121],256],13258:[[104,97],256],13259:[[72,80],256],13260:[[105,110],256],13261:[[75,75],256],13262:[[75,77],256],13263:[[107,116],256],13264:[[108,109],256],13265:[[108,110],256],13266:[[108,111,103],256],13267:[[108,120],256],13268:[[109,98],256],13269:[[109,105,108],256],13270:[[109,111,108],256],13271:[[80,72],256],13272:[[112,46,109,46],256],13273:[[80,80,77],256],13274:[[80,82],256],13275:[[115,114],256],13276:[[83,118],256],13277:[[87,98],256],13278:[[86,8725,109],256],13279:[[65,8725,109],256],13280:[[49,26085],256],13281:[[50,26085],256],13282:[[51,26085],256],13283:[[52,26085],256],13284:[[53,26085],256],13285:[[54,26085],256],13286:[[55,26085],256],13287:[[56,26085],256],13288:[[57,26085],256],13289:[[49,48,26085],256],13290:[[49,49,26085],256],13291:[[49,50,26085],256],13292:[[49,51,26085],256],13293:[[49,52,26085],256],13294:[[49,53,26085],256],13295:[[49,54,26085],256],13296:[[49,55,26085],256],13297:[[49,56,26085],256],13298:[[49,57,26085],256],13299:[[50,48,26085],256],13300:[[50,49,26085],256],13301:[[50,50,26085],256],13302:[[50,51,26085],256],13303:[[50,52,26085],256],13304:[[50,53,26085],256],13305:[[50,54,26085],256],13306:[[50,55,26085],256],13307:[[50,56,26085],256],13308:[[50,57,26085],256],13309:[[51,48,26085],256],13310:[[51,49,26085],256],13311:[[103,97,108],256]},
	27136:{92912:[,1],92913:[,1],92914:[,1],92915:[,1],92916:[,1]},
	27392:{92976:[,230],92977:[,230],92978:[,230],92979:[,230],92980:[,230],92981:[,230],92982:[,230]},
	42496:{42607:[,230],42612:[,230],42613:[,230],42614:[,230],42615:[,230],42616:[,230],42617:[,230],42618:[,230],42619:[,230],42620:[,230],42621:[,230],42652:[[1098],256],42653:[[1100],256],42655:[,230],42736:[,230],42737:[,230]},
	42752:{42864:[[42863],256],43000:[[294],256],43001:[[339],256]},
	43008:{43014:[,9],43204:[,9],43232:[,230],43233:[,230],43234:[,230],43235:[,230],43236:[,230],43237:[,230],43238:[,230],43239:[,230],43240:[,230],43241:[,230],43242:[,230],43243:[,230],43244:[,230],43245:[,230],43246:[,230],43247:[,230],43248:[,230],43249:[,230]},
	43264:{43307:[,220],43308:[,220],43309:[,220],43347:[,9],43443:[,7],43456:[,9]},
	43520:{43696:[,230],43698:[,230],43699:[,230],43700:[,220],43703:[,230],43704:[,230],43710:[,230],43711:[,230],43713:[,230],43766:[,9]},
	43776:{43868:[[42791],256],43869:[[43831],256],43870:[[619],256],43871:[[43858],256],44013:[,9]},
	48128:{113822:[,1]},
	53504:{119134:[[119127,119141],512],119135:[[119128,119141],512],119136:[[119135,119150],512],119137:[[119135,119151],512],119138:[[119135,119152],512],119139:[[119135,119153],512],119140:[[119135,119154],512],119141:[,216],119142:[,216],119143:[,1],119144:[,1],119145:[,1],119149:[,226],119150:[,216],119151:[,216],119152:[,216],119153:[,216],119154:[,216],119163:[,220],119164:[,220],119165:[,220],119166:[,220],119167:[,220],119168:[,220],119169:[,220],119170:[,220],119173:[,230],119174:[,230],119175:[,230],119176:[,230],119177:[,230],119178:[,220],119179:[,220],119210:[,230],119211:[,230],119212:[,230],119213:[,230],119227:[[119225,119141],512],119228:[[119226,119141],512],119229:[[119227,119150],512],119230:[[119228,119150],512],119231:[[119227,119151],512],119232:[[119228,119151],512]},
	53760:{119362:[,230],119363:[,230],119364:[,230]},
	54272:{119808:[[65],256],119809:[[66],256],119810:[[67],256],119811:[[68],256],119812:[[69],256],119813:[[70],256],119814:[[71],256],119815:[[72],256],119816:[[73],256],119817:[[74],256],119818:[[75],256],119819:[[76],256],119820:[[77],256],119821:[[78],256],119822:[[79],256],119823:[[80],256],119824:[[81],256],119825:[[82],256],119826:[[83],256],119827:[[84],256],119828:[[85],256],119829:[[86],256],119830:[[87],256],119831:[[88],256],119832:[[89],256],119833:[[90],256],119834:[[97],256],119835:[[98],256],119836:[[99],256],119837:[[100],256],119838:[[101],256],119839:[[102],256],119840:[[103],256],119841:[[104],256],119842:[[105],256],119843:[[106],256],119844:[[107],256],119845:[[108],256],119846:[[109],256],119847:[[110],256],119848:[[111],256],119849:[[112],256],119850:[[113],256],119851:[[114],256],119852:[[115],256],119853:[[116],256],119854:[[117],256],119855:[[118],256],119856:[[119],256],119857:[[120],256],119858:[[121],256],119859:[[122],256],119860:[[65],256],119861:[[66],256],119862:[[67],256],119863:[[68],256],119864:[[69],256],119865:[[70],256],119866:[[71],256],119867:[[72],256],119868:[[73],256],119869:[[74],256],119870:[[75],256],119871:[[76],256],119872:[[77],256],119873:[[78],256],119874:[[79],256],119875:[[80],256],119876:[[81],256],119877:[[82],256],119878:[[83],256],119879:[[84],256],119880:[[85],256],119881:[[86],256],119882:[[87],256],119883:[[88],256],119884:[[89],256],119885:[[90],256],119886:[[97],256],119887:[[98],256],119888:[[99],256],119889:[[100],256],119890:[[101],256],119891:[[102],256],119892:[[103],256],119894:[[105],256],119895:[[106],256],119896:[[107],256],119897:[[108],256],119898:[[109],256],119899:[[110],256],119900:[[111],256],119901:[[112],256],119902:[[113],256],119903:[[114],256],119904:[[115],256],119905:[[116],256],119906:[[117],256],119907:[[118],256],119908:[[119],256],119909:[[120],256],119910:[[121],256],119911:[[122],256],119912:[[65],256],119913:[[66],256],119914:[[67],256],119915:[[68],256],119916:[[69],256],119917:[[70],256],119918:[[71],256],119919:[[72],256],119920:[[73],256],119921:[[74],256],119922:[[75],256],119923:[[76],256],119924:[[77],256],119925:[[78],256],119926:[[79],256],119927:[[80],256],119928:[[81],256],119929:[[82],256],119930:[[83],256],119931:[[84],256],119932:[[85],256],119933:[[86],256],119934:[[87],256],119935:[[88],256],119936:[[89],256],119937:[[90],256],119938:[[97],256],119939:[[98],256],119940:[[99],256],119941:[[100],256],119942:[[101],256],119943:[[102],256],119944:[[103],256],119945:[[104],256],119946:[[105],256],119947:[[106],256],119948:[[107],256],119949:[[108],256],119950:[[109],256],119951:[[110],256],119952:[[111],256],119953:[[112],256],119954:[[113],256],119955:[[114],256],119956:[[115],256],119957:[[116],256],119958:[[117],256],119959:[[118],256],119960:[[119],256],119961:[[120],256],119962:[[121],256],119963:[[122],256],119964:[[65],256],119966:[[67],256],119967:[[68],256],119970:[[71],256],119973:[[74],256],119974:[[75],256],119977:[[78],256],119978:[[79],256],119979:[[80],256],119980:[[81],256],119982:[[83],256],119983:[[84],256],119984:[[85],256],119985:[[86],256],119986:[[87],256],119987:[[88],256],119988:[[89],256],119989:[[90],256],119990:[[97],256],119991:[[98],256],119992:[[99],256],119993:[[100],256],119995:[[102],256],119997:[[104],256],119998:[[105],256],119999:[[106],256],120000:[[107],256],120001:[[108],256],120002:[[109],256],120003:[[110],256],120005:[[112],256],120006:[[113],256],120007:[[114],256],120008:[[115],256],120009:[[116],256],120010:[[117],256],120011:[[118],256],120012:[[119],256],120013:[[120],256],120014:[[121],256],120015:[[122],256],120016:[[65],256],120017:[[66],256],120018:[[67],256],120019:[[68],256],120020:[[69],256],120021:[[70],256],120022:[[71],256],120023:[[72],256],120024:[[73],256],120025:[[74],256],120026:[[75],256],120027:[[76],256],120028:[[77],256],120029:[[78],256],120030:[[79],256],120031:[[80],256],120032:[[81],256],120033:[[82],256],120034:[[83],256],120035:[[84],256],120036:[[85],256],120037:[[86],256],120038:[[87],256],120039:[[88],256],120040:[[89],256],120041:[[90],256],120042:[[97],256],120043:[[98],256],120044:[[99],256],120045:[[100],256],120046:[[101],256],120047:[[102],256],120048:[[103],256],120049:[[104],256],120050:[[105],256],120051:[[106],256],120052:[[107],256],120053:[[108],256],120054:[[109],256],120055:[[110],256],120056:[[111],256],120057:[[112],256],120058:[[113],256],120059:[[114],256],120060:[[115],256],120061:[[116],256],120062:[[117],256],120063:[[118],256]},
	54528:{120064:[[119],256],120065:[[120],256],120066:[[121],256],120067:[[122],256],120068:[[65],256],120069:[[66],256],120071:[[68],256],120072:[[69],256],120073:[[70],256],120074:[[71],256],120077:[[74],256],120078:[[75],256],120079:[[76],256],120080:[[77],256],120081:[[78],256],120082:[[79],256],120083:[[80],256],120084:[[81],256],120086:[[83],256],120087:[[84],256],120088:[[85],256],120089:[[86],256],120090:[[87],256],120091:[[88],256],120092:[[89],256],120094:[[97],256],120095:[[98],256],120096:[[99],256],120097:[[100],256],120098:[[101],256],120099:[[102],256],120100:[[103],256],120101:[[104],256],120102:[[105],256],120103:[[106],256],120104:[[107],256],120105:[[108],256],120106:[[109],256],120107:[[110],256],120108:[[111],256],120109:[[112],256],120110:[[113],256],120111:[[114],256],120112:[[115],256],120113:[[116],256],120114:[[117],256],120115:[[118],256],120116:[[119],256],120117:[[120],256],120118:[[121],256],120119:[[122],256],120120:[[65],256],120121:[[66],256],120123:[[68],256],120124:[[69],256],120125:[[70],256],120126:[[71],256],120128:[[73],256],120129:[[74],256],120130:[[75],256],120131:[[76],256],120132:[[77],256],120134:[[79],256],120138:[[83],256],120139:[[84],256],120140:[[85],256],120141:[[86],256],120142:[[87],256],120143:[[88],256],120144:[[89],256],120146:[[97],256],120147:[[98],256],120148:[[99],256],120149:[[100],256],120150:[[101],256],120151:[[102],256],120152:[[103],256],120153:[[104],256],120154:[[105],256],120155:[[106],256],120156:[[107],256],120157:[[108],256],120158:[[109],256],120159:[[110],256],120160:[[111],256],120161:[[112],256],120162:[[113],256],120163:[[114],256],120164:[[115],256],120165:[[116],256],120166:[[117],256],120167:[[118],256],120168:[[119],256],120169:[[120],256],120170:[[121],256],120171:[[122],256],120172:[[65],256],120173:[[66],256],120174:[[67],256],120175:[[68],256],120176:[[69],256],120177:[[70],256],120178:[[71],256],120179:[[72],256],120180:[[73],256],120181:[[74],256],120182:[[75],256],120183:[[76],256],120184:[[77],256],120185:[[78],256],120186:[[79],256],120187:[[80],256],120188:[[81],256],120189:[[82],256],120190:[[83],256],120191:[[84],256],120192:[[85],256],120193:[[86],256],120194:[[87],256],120195:[[88],256],120196:[[89],256],120197:[[90],256],120198:[[97],256],120199:[[98],256],120200:[[99],256],120201:[[100],256],120202:[[101],256],120203:[[102],256],120204:[[103],256],120205:[[104],256],120206:[[105],256],120207:[[106],256],120208:[[107],256],120209:[[108],256],120210:[[109],256],120211:[[110],256],120212:[[111],256],120213:[[112],256],120214:[[113],256],120215:[[114],256],120216:[[115],256],120217:[[116],256],120218:[[117],256],120219:[[118],256],120220:[[119],256],120221:[[120],256],120222:[[121],256],120223:[[122],256],120224:[[65],256],120225:[[66],256],120226:[[67],256],120227:[[68],256],120228:[[69],256],120229:[[70],256],120230:[[71],256],120231:[[72],256],120232:[[73],256],120233:[[74],256],120234:[[75],256],120235:[[76],256],120236:[[77],256],120237:[[78],256],120238:[[79],256],120239:[[80],256],120240:[[81],256],120241:[[82],256],120242:[[83],256],120243:[[84],256],120244:[[85],256],120245:[[86],256],120246:[[87],256],120247:[[88],256],120248:[[89],256],120249:[[90],256],120250:[[97],256],120251:[[98],256],120252:[[99],256],120253:[[100],256],120254:[[101],256],120255:[[102],256],120256:[[103],256],120257:[[104],256],120258:[[105],256],120259:[[106],256],120260:[[107],256],120261:[[108],256],120262:[[109],256],120263:[[110],256],120264:[[111],256],120265:[[112],256],120266:[[113],256],120267:[[114],256],120268:[[115],256],120269:[[116],256],120270:[[117],256],120271:[[118],256],120272:[[119],256],120273:[[120],256],120274:[[121],256],120275:[[122],256],120276:[[65],256],120277:[[66],256],120278:[[67],256],120279:[[68],256],120280:[[69],256],120281:[[70],256],120282:[[71],256],120283:[[72],256],120284:[[73],256],120285:[[74],256],120286:[[75],256],120287:[[76],256],120288:[[77],256],120289:[[78],256],120290:[[79],256],120291:[[80],256],120292:[[81],256],120293:[[82],256],120294:[[83],256],120295:[[84],256],120296:[[85],256],120297:[[86],256],120298:[[87],256],120299:[[88],256],120300:[[89],256],120301:[[90],256],120302:[[97],256],120303:[[98],256],120304:[[99],256],120305:[[100],256],120306:[[101],256],120307:[[102],256],120308:[[103],256],120309:[[104],256],120310:[[105],256],120311:[[106],256],120312:[[107],256],120313:[[108],256],120314:[[109],256],120315:[[110],256],120316:[[111],256],120317:[[112],256],120318:[[113],256],120319:[[114],256]},
	54784:{120320:[[115],256],120321:[[116],256],120322:[[117],256],120323:[[118],256],120324:[[119],256],120325:[[120],256],120326:[[121],256],120327:[[122],256],120328:[[65],256],120329:[[66],256],120330:[[67],256],120331:[[68],256],120332:[[69],256],120333:[[70],256],120334:[[71],256],120335:[[72],256],120336:[[73],256],120337:[[74],256],120338:[[75],256],120339:[[76],256],120340:[[77],256],120341:[[78],256],120342:[[79],256],120343:[[80],256],120344:[[81],256],120345:[[82],256],120346:[[83],256],120347:[[84],256],120348:[[85],256],120349:[[86],256],120350:[[87],256],120351:[[88],256],120352:[[89],256],120353:[[90],256],120354:[[97],256],120355:[[98],256],120356:[[99],256],120357:[[100],256],120358:[[101],256],120359:[[102],256],120360:[[103],256],120361:[[104],256],120362:[[105],256],120363:[[106],256],120364:[[107],256],120365:[[108],256],120366:[[109],256],120367:[[110],256],120368:[[111],256],120369:[[112],256],120370:[[113],256],120371:[[114],256],120372:[[115],256],120373:[[116],256],120374:[[117],256],120375:[[118],256],120376:[[119],256],120377:[[120],256],120378:[[121],256],120379:[[122],256],120380:[[65],256],120381:[[66],256],120382:[[67],256],120383:[[68],256],120384:[[69],256],120385:[[70],256],120386:[[71],256],120387:[[72],256],120388:[[73],256],120389:[[74],256],120390:[[75],256],120391:[[76],256],120392:[[77],256],120393:[[78],256],120394:[[79],256],120395:[[80],256],120396:[[81],256],120397:[[82],256],120398:[[83],256],120399:[[84],256],120400:[[85],256],120401:[[86],256],120402:[[87],256],120403:[[88],256],120404:[[89],256],120405:[[90],256],120406:[[97],256],120407:[[98],256],120408:[[99],256],120409:[[100],256],120410:[[101],256],120411:[[102],256],120412:[[103],256],120413:[[104],256],120414:[[105],256],120415:[[106],256],120416:[[107],256],120417:[[108],256],120418:[[109],256],120419:[[110],256],120420:[[111],256],120421:[[112],256],120422:[[113],256],120423:[[114],256],120424:[[115],256],120425:[[116],256],120426:[[117],256],120427:[[118],256],120428:[[119],256],120429:[[120],256],120430:[[121],256],120431:[[122],256],120432:[[65],256],120433:[[66],256],120434:[[67],256],120435:[[68],256],120436:[[69],256],120437:[[70],256],120438:[[71],256],120439:[[72],256],120440:[[73],256],120441:[[74],256],120442:[[75],256],120443:[[76],256],120444:[[77],256],120445:[[78],256],120446:[[79],256],120447:[[80],256],120448:[[81],256],120449:[[82],256],120450:[[83],256],120451:[[84],256],120452:[[85],256],120453:[[86],256],120454:[[87],256],120455:[[88],256],120456:[[89],256],120457:[[90],256],120458:[[97],256],120459:[[98],256],120460:[[99],256],120461:[[100],256],120462:[[101],256],120463:[[102],256],120464:[[103],256],120465:[[104],256],120466:[[105],256],120467:[[106],256],120468:[[107],256],120469:[[108],256],120470:[[109],256],120471:[[110],256],120472:[[111],256],120473:[[112],256],120474:[[113],256],120475:[[114],256],120476:[[115],256],120477:[[116],256],120478:[[117],256],120479:[[118],256],120480:[[119],256],120481:[[120],256],120482:[[121],256],120483:[[122],256],120484:[[305],256],120485:[[567],256],120488:[[913],256],120489:[[914],256],120490:[[915],256],120491:[[916],256],120492:[[917],256],120493:[[918],256],120494:[[919],256],120495:[[920],256],120496:[[921],256],120497:[[922],256],120498:[[923],256],120499:[[924],256],120500:[[925],256],120501:[[926],256],120502:[[927],256],120503:[[928],256],120504:[[929],256],120505:[[1012],256],120506:[[931],256],120507:[[932],256],120508:[[933],256],120509:[[934],256],120510:[[935],256],120511:[[936],256],120512:[[937],256],120513:[[8711],256],120514:[[945],256],120515:[[946],256],120516:[[947],256],120517:[[948],256],120518:[[949],256],120519:[[950],256],120520:[[951],256],120521:[[952],256],120522:[[953],256],120523:[[954],256],120524:[[955],256],120525:[[956],256],120526:[[957],256],120527:[[958],256],120528:[[959],256],120529:[[960],256],120530:[[961],256],120531:[[962],256],120532:[[963],256],120533:[[964],256],120534:[[965],256],120535:[[966],256],120536:[[967],256],120537:[[968],256],120538:[[969],256],120539:[[8706],256],120540:[[1013],256],120541:[[977],256],120542:[[1008],256],120543:[[981],256],120544:[[1009],256],120545:[[982],256],120546:[[913],256],120547:[[914],256],120548:[[915],256],120549:[[916],256],120550:[[917],256],120551:[[918],256],120552:[[919],256],120553:[[920],256],120554:[[921],256],120555:[[922],256],120556:[[923],256],120557:[[924],256],120558:[[925],256],120559:[[926],256],120560:[[927],256],120561:[[928],256],120562:[[929],256],120563:[[1012],256],120564:[[931],256],120565:[[932],256],120566:[[933],256],120567:[[934],256],120568:[[935],256],120569:[[936],256],120570:[[937],256],120571:[[8711],256],120572:[[945],256],120573:[[946],256],120574:[[947],256],120575:[[948],256]},
	55040:{120576:[[949],256],120577:[[950],256],120578:[[951],256],120579:[[952],256],120580:[[953],256],120581:[[954],256],120582:[[955],256],120583:[[956],256],120584:[[957],256],120585:[[958],256],120586:[[959],256],120587:[[960],256],120588:[[961],256],120589:[[962],256],120590:[[963],256],120591:[[964],256],120592:[[965],256],120593:[[966],256],120594:[[967],256],120595:[[968],256],120596:[[969],256],120597:[[8706],256],120598:[[1013],256],120599:[[977],256],120600:[[1008],256],120601:[[981],256],120602:[[1009],256],120603:[[982],256],120604:[[913],256],120605:[[914],256],120606:[[915],256],120607:[[916],256],120608:[[917],256],120609:[[918],256],120610:[[919],256],120611:[[920],256],120612:[[921],256],120613:[[922],256],120614:[[923],256],120615:[[924],256],120616:[[925],256],120617:[[926],256],120618:[[927],256],120619:[[928],256],120620:[[929],256],120621:[[1012],256],120622:[[931],256],120623:[[932],256],120624:[[933],256],120625:[[934],256],120626:[[935],256],120627:[[936],256],120628:[[937],256],120629:[[8711],256],120630:[[945],256],120631:[[946],256],120632:[[947],256],120633:[[948],256],120634:[[949],256],120635:[[950],256],120636:[[951],256],120637:[[952],256],120638:[[953],256],120639:[[954],256],120640:[[955],256],120641:[[956],256],120642:[[957],256],120643:[[958],256],120644:[[959],256],120645:[[960],256],120646:[[961],256],120647:[[962],256],120648:[[963],256],120649:[[964],256],120650:[[965],256],120651:[[966],256],120652:[[967],256],120653:[[968],256],120654:[[969],256],120655:[[8706],256],120656:[[1013],256],120657:[[977],256],120658:[[1008],256],120659:[[981],256],120660:[[1009],256],120661:[[982],256],120662:[[913],256],120663:[[914],256],120664:[[915],256],120665:[[916],256],120666:[[917],256],120667:[[918],256],120668:[[919],256],120669:[[920],256],120670:[[921],256],120671:[[922],256],120672:[[923],256],120673:[[924],256],120674:[[925],256],120675:[[926],256],120676:[[927],256],120677:[[928],256],120678:[[929],256],120679:[[1012],256],120680:[[931],256],120681:[[932],256],120682:[[933],256],120683:[[934],256],120684:[[935],256],120685:[[936],256],120686:[[937],256],120687:[[8711],256],120688:[[945],256],120689:[[946],256],120690:[[947],256],120691:[[948],256],120692:[[949],256],120693:[[950],256],120694:[[951],256],120695:[[952],256],120696:[[953],256],120697:[[954],256],120698:[[955],256],120699:[[956],256],120700:[[957],256],120701:[[958],256],120702:[[959],256],120703:[[960],256],120704:[[961],256],120705:[[962],256],120706:[[963],256],120707:[[964],256],120708:[[965],256],120709:[[966],256],120710:[[967],256],120711:[[968],256],120712:[[969],256],120713:[[8706],256],120714:[[1013],256],120715:[[977],256],120716:[[1008],256],120717:[[981],256],120718:[[1009],256],120719:[[982],256],120720:[[913],256],120721:[[914],256],120722:[[915],256],120723:[[916],256],120724:[[917],256],120725:[[918],256],120726:[[919],256],120727:[[920],256],120728:[[921],256],120729:[[922],256],120730:[[923],256],120731:[[924],256],120732:[[925],256],120733:[[926],256],120734:[[927],256],120735:[[928],256],120736:[[929],256],120737:[[1012],256],120738:[[931],256],120739:[[932],256],120740:[[933],256],120741:[[934],256],120742:[[935],256],120743:[[936],256],120744:[[937],256],120745:[[8711],256],120746:[[945],256],120747:[[946],256],120748:[[947],256],120749:[[948],256],120750:[[949],256],120751:[[950],256],120752:[[951],256],120753:[[952],256],120754:[[953],256],120755:[[954],256],120756:[[955],256],120757:[[956],256],120758:[[957],256],120759:[[958],256],120760:[[959],256],120761:[[960],256],120762:[[961],256],120763:[[962],256],120764:[[963],256],120765:[[964],256],120766:[[965],256],120767:[[966],256],120768:[[967],256],120769:[[968],256],120770:[[969],256],120771:[[8706],256],120772:[[1013],256],120773:[[977],256],120774:[[1008],256],120775:[[981],256],120776:[[1009],256],120777:[[982],256],120778:[[988],256],120779:[[989],256],120782:[[48],256],120783:[[49],256],120784:[[50],256],120785:[[51],256],120786:[[52],256],120787:[[53],256],120788:[[54],256],120789:[[55],256],120790:[[56],256],120791:[[57],256],120792:[[48],256],120793:[[49],256],120794:[[50],256],120795:[[51],256],120796:[[52],256],120797:[[53],256],120798:[[54],256],120799:[[55],256],120800:[[56],256],120801:[[57],256],120802:[[48],256],120803:[[49],256],120804:[[50],256],120805:[[51],256],120806:[[52],256],120807:[[53],256],120808:[[54],256],120809:[[55],256],120810:[[56],256],120811:[[57],256],120812:[[48],256],120813:[[49],256],120814:[[50],256],120815:[[51],256],120816:[[52],256],120817:[[53],256],120818:[[54],256],120819:[[55],256],120820:[[56],256],120821:[[57],256],120822:[[48],256],120823:[[49],256],120824:[[50],256],120825:[[51],256],120826:[[52],256],120827:[[53],256],120828:[[54],256],120829:[[55],256],120830:[[56],256],120831:[[57],256]},
	59392:{125136:[,220],125137:[,220],125138:[,220],125139:[,220],125140:[,220],125141:[,220],125142:[,220]},
	60928:{126464:[[1575],256],126465:[[1576],256],126466:[[1580],256],126467:[[1583],256],126469:[[1608],256],126470:[[1586],256],126471:[[1581],256],126472:[[1591],256],126473:[[1610],256],126474:[[1603],256],126475:[[1604],256],126476:[[1605],256],126477:[[1606],256],126478:[[1587],256],126479:[[1593],256],126480:[[1601],256],126481:[[1589],256],126482:[[1602],256],126483:[[1585],256],126484:[[1588],256],126485:[[1578],256],126486:[[1579],256],126487:[[1582],256],126488:[[1584],256],126489:[[1590],256],126490:[[1592],256],126491:[[1594],256],126492:[[1646],256],126493:[[1722],256],126494:[[1697],256],126495:[[1647],256],126497:[[1576],256],126498:[[1580],256],126500:[[1607],256],126503:[[1581],256],126505:[[1610],256],126506:[[1603],256],126507:[[1604],256],126508:[[1605],256],126509:[[1606],256],126510:[[1587],256],126511:[[1593],256],126512:[[1601],256],126513:[[1589],256],126514:[[1602],256],126516:[[1588],256],126517:[[1578],256],126518:[[1579],256],126519:[[1582],256],126521:[[1590],256],126523:[[1594],256],126530:[[1580],256],126535:[[1581],256],126537:[[1610],256],126539:[[1604],256],126541:[[1606],256],126542:[[1587],256],126543:[[1593],256],126545:[[1589],256],126546:[[1602],256],126548:[[1588],256],126551:[[1582],256],126553:[[1590],256],126555:[[1594],256],126557:[[1722],256],126559:[[1647],256],126561:[[1576],256],126562:[[1580],256],126564:[[1607],256],126567:[[1581],256],126568:[[1591],256],126569:[[1610],256],126570:[[1603],256],126572:[[1605],256],126573:[[1606],256],126574:[[1587],256],126575:[[1593],256],126576:[[1601],256],126577:[[1589],256],126578:[[1602],256],126580:[[1588],256],126581:[[1578],256],126582:[[1579],256],126583:[[1582],256],126585:[[1590],256],126586:[[1592],256],126587:[[1594],256],126588:[[1646],256],126590:[[1697],256],126592:[[1575],256],126593:[[1576],256],126594:[[1580],256],126595:[[1583],256],126596:[[1607],256],126597:[[1608],256],126598:[[1586],256],126599:[[1581],256],126600:[[1591],256],126601:[[1610],256],126603:[[1604],256],126604:[[1605],256],126605:[[1606],256],126606:[[1587],256],126607:[[1593],256],126608:[[1601],256],126609:[[1589],256],126610:[[1602],256],126611:[[1585],256],126612:[[1588],256],126613:[[1578],256],126614:[[1579],256],126615:[[1582],256],126616:[[1584],256],126617:[[1590],256],126618:[[1592],256],126619:[[1594],256],126625:[[1576],256],126626:[[1580],256],126627:[[1583],256],126629:[[1608],256],126630:[[1586],256],126631:[[1581],256],126632:[[1591],256],126633:[[1610],256],126635:[[1604],256],126636:[[1605],256],126637:[[1606],256],126638:[[1587],256],126639:[[1593],256],126640:[[1601],256],126641:[[1589],256],126642:[[1602],256],126643:[[1585],256],126644:[[1588],256],126645:[[1578],256],126646:[[1579],256],126647:[[1582],256],126648:[[1584],256],126649:[[1590],256],126650:[[1592],256],126651:[[1594],256]},
	61696:{127232:[[48,46],256],127233:[[48,44],256],127234:[[49,44],256],127235:[[50,44],256],127236:[[51,44],256],127237:[[52,44],256],127238:[[53,44],256],127239:[[54,44],256],127240:[[55,44],256],127241:[[56,44],256],127242:[[57,44],256],127248:[[40,65,41],256],127249:[[40,66,41],256],127250:[[40,67,41],256],127251:[[40,68,41],256],127252:[[40,69,41],256],127253:[[40,70,41],256],127254:[[40,71,41],256],127255:[[40,72,41],256],127256:[[40,73,41],256],127257:[[40,74,41],256],127258:[[40,75,41],256],127259:[[40,76,41],256],127260:[[40,77,41],256],127261:[[40,78,41],256],127262:[[40,79,41],256],127263:[[40,80,41],256],127264:[[40,81,41],256],127265:[[40,82,41],256],127266:[[40,83,41],256],127267:[[40,84,41],256],127268:[[40,85,41],256],127269:[[40,86,41],256],127270:[[40,87,41],256],127271:[[40,88,41],256],127272:[[40,89,41],256],127273:[[40,90,41],256],127274:[[12308,83,12309],256],127275:[[67],256],127276:[[82],256],127277:[[67,68],256],127278:[[87,90],256],127280:[[65],256],127281:[[66],256],127282:[[67],256],127283:[[68],256],127284:[[69],256],127285:[[70],256],127286:[[71],256],127287:[[72],256],127288:[[73],256],127289:[[74],256],127290:[[75],256],127291:[[76],256],127292:[[77],256],127293:[[78],256],127294:[[79],256],127295:[[80],256],127296:[[81],256],127297:[[82],256],127298:[[83],256],127299:[[84],256],127300:[[85],256],127301:[[86],256],127302:[[87],256],127303:[[88],256],127304:[[89],256],127305:[[90],256],127306:[[72,86],256],127307:[[77,86],256],127308:[[83,68],256],127309:[[83,83],256],127310:[[80,80,86],256],127311:[[87,67],256],127338:[[77,67],256],127339:[[77,68],256],127376:[[68,74],256]},
	61952:{},
	63488:{194560:[[20029]],194561:[[20024]],194562:[[20033]],194563:[[131362]],194564:[[20320]],194565:[[20398]],194566:[[20411]],194567:[[20482]],194568:[[20602]],194569:[[20633]],194570:[[20711]],194571:[[20687]],194572:[[13470]],194573:[[132666]],194574:[[20813]],194575:[[20820]],194576:[[20836]],194577:[[20855]],194578:[[132380]],194579:[[13497]],194580:[[20839]],194581:[[20877]],194582:[[132427]],194583:[[20887]],194584:[[20900]],194585:[[20172]],194586:[[20908]],194587:[[20917]],194588:[[168415]],194589:[[20981]],194590:[[20995]],194591:[[13535]],194592:[[21051]],194593:[[21062]],194594:[[21106]],194595:[[21111]],194596:[[13589]],194597:[[21191]],194598:[[21193]],194599:[[21220]],194600:[[21242]],194601:[[21253]],194602:[[21254]],194603:[[21271]],194604:[[21321]],194605:[[21329]],194606:[[21338]],194607:[[21363]],194608:[[21373]],194609:[[21375]],194610:[[21375]],194611:[[21375]],194612:[[133676]],194613:[[28784]],194614:[[21450]],194615:[[21471]],194616:[[133987]],194617:[[21483]],194618:[[21489]],194619:[[21510]],194620:[[21662]],194621:[[21560]],194622:[[21576]],194623:[[21608]],194624:[[21666]],194625:[[21750]],194626:[[21776]],194627:[[21843]],194628:[[21859]],194629:[[21892]],194630:[[21892]],194631:[[21913]],194632:[[21931]],194633:[[21939]],194634:[[21954]],194635:[[22294]],194636:[[22022]],194637:[[22295]],194638:[[22097]],194639:[[22132]],194640:[[20999]],194641:[[22766]],194642:[[22478]],194643:[[22516]],194644:[[22541]],194645:[[22411]],194646:[[22578]],194647:[[22577]],194648:[[22700]],194649:[[136420]],194650:[[22770]],194651:[[22775]],194652:[[22790]],194653:[[22810]],194654:[[22818]],194655:[[22882]],194656:[[136872]],194657:[[136938]],194658:[[23020]],194659:[[23067]],194660:[[23079]],194661:[[23000]],194662:[[23142]],194663:[[14062]],194664:[[14076]],194665:[[23304]],194666:[[23358]],194667:[[23358]],194668:[[137672]],194669:[[23491]],194670:[[23512]],194671:[[23527]],194672:[[23539]],194673:[[138008]],194674:[[23551]],194675:[[23558]],194676:[[24403]],194677:[[23586]],194678:[[14209]],194679:[[23648]],194680:[[23662]],194681:[[23744]],194682:[[23693]],194683:[[138724]],194684:[[23875]],194685:[[138726]],194686:[[23918]],194687:[[23915]],194688:[[23932]],194689:[[24033]],194690:[[24034]],194691:[[14383]],194692:[[24061]],194693:[[24104]],194694:[[24125]],194695:[[24169]],194696:[[14434]],194697:[[139651]],194698:[[14460]],194699:[[24240]],194700:[[24243]],194701:[[24246]],194702:[[24266]],194703:[[172946]],194704:[[24318]],194705:[[140081]],194706:[[140081]],194707:[[33281]],194708:[[24354]],194709:[[24354]],194710:[[14535]],194711:[[144056]],194712:[[156122]],194713:[[24418]],194714:[[24427]],194715:[[14563]],194716:[[24474]],194717:[[24525]],194718:[[24535]],194719:[[24569]],194720:[[24705]],194721:[[14650]],194722:[[14620]],194723:[[24724]],194724:[[141012]],194725:[[24775]],194726:[[24904]],194727:[[24908]],194728:[[24910]],194729:[[24908]],194730:[[24954]],194731:[[24974]],194732:[[25010]],194733:[[24996]],194734:[[25007]],194735:[[25054]],194736:[[25074]],194737:[[25078]],194738:[[25104]],194739:[[25115]],194740:[[25181]],194741:[[25265]],194742:[[25300]],194743:[[25424]],194744:[[142092]],194745:[[25405]],194746:[[25340]],194747:[[25448]],194748:[[25475]],194749:[[25572]],194750:[[142321]],194751:[[25634]],194752:[[25541]],194753:[[25513]],194754:[[14894]],194755:[[25705]],194756:[[25726]],194757:[[25757]],194758:[[25719]],194759:[[14956]],194760:[[25935]],194761:[[25964]],194762:[[143370]],194763:[[26083]],194764:[[26360]],194765:[[26185]],194766:[[15129]],194767:[[26257]],194768:[[15112]],194769:[[15076]],194770:[[20882]],194771:[[20885]],194772:[[26368]],194773:[[26268]],194774:[[32941]],194775:[[17369]],194776:[[26391]],194777:[[26395]],194778:[[26401]],194779:[[26462]],194780:[[26451]],194781:[[144323]],194782:[[15177]],194783:[[26618]],194784:[[26501]],194785:[[26706]],194786:[[26757]],194787:[[144493]],194788:[[26766]],194789:[[26655]],194790:[[26900]],194791:[[15261]],194792:[[26946]],194793:[[27043]],194794:[[27114]],194795:[[27304]],194796:[[145059]],194797:[[27355]],194798:[[15384]],194799:[[27425]],194800:[[145575]],194801:[[27476]],194802:[[15438]],194803:[[27506]],194804:[[27551]],194805:[[27578]],194806:[[27579]],194807:[[146061]],194808:[[138507]],194809:[[146170]],194810:[[27726]],194811:[[146620]],194812:[[27839]],194813:[[27853]],194814:[[27751]],194815:[[27926]]},
	63744:{63744:[[35912]],63745:[[26356]],63746:[[36554]],63747:[[36040]],63748:[[28369]],63749:[[20018]],63750:[[21477]],63751:[[40860]],63752:[[40860]],63753:[[22865]],63754:[[37329]],63755:[[21895]],63756:[[22856]],63757:[[25078]],63758:[[30313]],63759:[[32645]],63760:[[34367]],63761:[[34746]],63762:[[35064]],63763:[[37007]],63764:[[27138]],63765:[[27931]],63766:[[28889]],63767:[[29662]],63768:[[33853]],63769:[[37226]],63770:[[39409]],63771:[[20098]],63772:[[21365]],63773:[[27396]],63774:[[29211]],63775:[[34349]],63776:[[40478]],63777:[[23888]],63778:[[28651]],63779:[[34253]],63780:[[35172]],63781:[[25289]],63782:[[33240]],63783:[[34847]],63784:[[24266]],63785:[[26391]],63786:[[28010]],63787:[[29436]],63788:[[37070]],63789:[[20358]],63790:[[20919]],63791:[[21214]],63792:[[25796]],63793:[[27347]],63794:[[29200]],63795:[[30439]],63796:[[32769]],63797:[[34310]],63798:[[34396]],63799:[[36335]],63800:[[38706]],63801:[[39791]],63802:[[40442]],63803:[[30860]],63804:[[31103]],63805:[[32160]],63806:[[33737]],63807:[[37636]],63808:[[40575]],63809:[[35542]],63810:[[22751]],63811:[[24324]],63812:[[31840]],63813:[[32894]],63814:[[29282]],63815:[[30922]],63816:[[36034]],63817:[[38647]],63818:[[22744]],63819:[[23650]],63820:[[27155]],63821:[[28122]],63822:[[28431]],63823:[[32047]],63824:[[32311]],63825:[[38475]],63826:[[21202]],63827:[[32907]],63828:[[20956]],63829:[[20940]],63830:[[31260]],63831:[[32190]],63832:[[33777]],63833:[[38517]],63834:[[35712]],63835:[[25295]],63836:[[27138]],63837:[[35582]],63838:[[20025]],63839:[[23527]],63840:[[24594]],63841:[[29575]],63842:[[30064]],63843:[[21271]],63844:[[30971]],63845:[[20415]],63846:[[24489]],63847:[[19981]],63848:[[27852]],63849:[[25976]],63850:[[32034]],63851:[[21443]],63852:[[22622]],63853:[[30465]],63854:[[33865]],63855:[[35498]],63856:[[27578]],63857:[[36784]],63858:[[27784]],63859:[[25342]],63860:[[33509]],63861:[[25504]],63862:[[30053]],63863:[[20142]],63864:[[20841]],63865:[[20937]],63866:[[26753]],63867:[[31975]],63868:[[33391]],63869:[[35538]],63870:[[37327]],63871:[[21237]],63872:[[21570]],63873:[[22899]],63874:[[24300]],63875:[[26053]],63876:[[28670]],63877:[[31018]],63878:[[38317]],63879:[[39530]],63880:[[40599]],63881:[[40654]],63882:[[21147]],63883:[[26310]],63884:[[27511]],63885:[[36706]],63886:[[24180]],63887:[[24976]],63888:[[25088]],63889:[[25754]],63890:[[28451]],63891:[[29001]],63892:[[29833]],63893:[[31178]],63894:[[32244]],63895:[[32879]],63896:[[36646]],63897:[[34030]],63898:[[36899]],63899:[[37706]],63900:[[21015]],63901:[[21155]],63902:[[21693]],63903:[[28872]],63904:[[35010]],63905:[[35498]],63906:[[24265]],63907:[[24565]],63908:[[25467]],63909:[[27566]],63910:[[31806]],63911:[[29557]],63912:[[20196]],63913:[[22265]],63914:[[23527]],63915:[[23994]],63916:[[24604]],63917:[[29618]],63918:[[29801]],63919:[[32666]],63920:[[32838]],63921:[[37428]],63922:[[38646]],63923:[[38728]],63924:[[38936]],63925:[[20363]],63926:[[31150]],63927:[[37300]],63928:[[38584]],63929:[[24801]],63930:[[20102]],63931:[[20698]],63932:[[23534]],63933:[[23615]],63934:[[26009]],63935:[[27138]],63936:[[29134]],63937:[[30274]],63938:[[34044]],63939:[[36988]],63940:[[40845]],63941:[[26248]],63942:[[38446]],63943:[[21129]],63944:[[26491]],63945:[[26611]],63946:[[27969]],63947:[[28316]],63948:[[29705]],63949:[[30041]],63950:[[30827]],63951:[[32016]],63952:[[39006]],63953:[[20845]],63954:[[25134]],63955:[[38520]],63956:[[20523]],63957:[[23833]],63958:[[28138]],63959:[[36650]],63960:[[24459]],63961:[[24900]],63962:[[26647]],63963:[[29575]],63964:[[38534]],63965:[[21033]],63966:[[21519]],63967:[[23653]],63968:[[26131]],63969:[[26446]],63970:[[26792]],63971:[[27877]],63972:[[29702]],63973:[[30178]],63974:[[32633]],63975:[[35023]],63976:[[35041]],63977:[[37324]],63978:[[38626]],63979:[[21311]],63980:[[28346]],63981:[[21533]],63982:[[29136]],63983:[[29848]],63984:[[34298]],63985:[[38563]],63986:[[40023]],63987:[[40607]],63988:[[26519]],63989:[[28107]],63990:[[33256]],63991:[[31435]],63992:[[31520]],63993:[[31890]],63994:[[29376]],63995:[[28825]],63996:[[35672]],63997:[[20160]],63998:[[33590]],63999:[[21050]],194816:[[27966]],194817:[[28023]],194818:[[27969]],194819:[[28009]],194820:[[28024]],194821:[[28037]],194822:[[146718]],194823:[[27956]],194824:[[28207]],194825:[[28270]],194826:[[15667]],194827:[[28363]],194828:[[28359]],194829:[[147153]],194830:[[28153]],194831:[[28526]],194832:[[147294]],194833:[[147342]],194834:[[28614]],194835:[[28729]],194836:[[28702]],194837:[[28699]],194838:[[15766]],194839:[[28746]],194840:[[28797]],194841:[[28791]],194842:[[28845]],194843:[[132389]],194844:[[28997]],194845:[[148067]],194846:[[29084]],194847:[[148395]],194848:[[29224]],194849:[[29237]],194850:[[29264]],194851:[[149000]],194852:[[29312]],194853:[[29333]],194854:[[149301]],194855:[[149524]],194856:[[29562]],194857:[[29579]],194858:[[16044]],194859:[[29605]],194860:[[16056]],194861:[[16056]],194862:[[29767]],194863:[[29788]],194864:[[29809]],194865:[[29829]],194866:[[29898]],194867:[[16155]],194868:[[29988]],194869:[[150582]],194870:[[30014]],194871:[[150674]],194872:[[30064]],194873:[[139679]],194874:[[30224]],194875:[[151457]],194876:[[151480]],194877:[[151620]],194878:[[16380]],194879:[[16392]],194880:[[30452]],194881:[[151795]],194882:[[151794]],194883:[[151833]],194884:[[151859]],194885:[[30494]],194886:[[30495]],194887:[[30495]],194888:[[30538]],194889:[[16441]],194890:[[30603]],194891:[[16454]],194892:[[16534]],194893:[[152605]],194894:[[30798]],194895:[[30860]],194896:[[30924]],194897:[[16611]],194898:[[153126]],194899:[[31062]],194900:[[153242]],194901:[[153285]],194902:[[31119]],194903:[[31211]],194904:[[16687]],194905:[[31296]],194906:[[31306]],194907:[[31311]],194908:[[153980]],194909:[[154279]],194910:[[154279]],194911:[[31470]],194912:[[16898]],194913:[[154539]],194914:[[31686]],194915:[[31689]],194916:[[16935]],194917:[[154752]],194918:[[31954]],194919:[[17056]],194920:[[31976]],194921:[[31971]],194922:[[32000]],194923:[[155526]],194924:[[32099]],194925:[[17153]],194926:[[32199]],194927:[[32258]],194928:[[32325]],194929:[[17204]],194930:[[156200]],194931:[[156231]],194932:[[17241]],194933:[[156377]],194934:[[32634]],194935:[[156478]],194936:[[32661]],194937:[[32762]],194938:[[32773]],194939:[[156890]],194940:[[156963]],194941:[[32864]],194942:[[157096]],194943:[[32880]],194944:[[144223]],194945:[[17365]],194946:[[32946]],194947:[[33027]],194948:[[17419]],194949:[[33086]],194950:[[23221]],194951:[[157607]],194952:[[157621]],194953:[[144275]],194954:[[144284]],194955:[[33281]],194956:[[33284]],194957:[[36766]],194958:[[17515]],194959:[[33425]],194960:[[33419]],194961:[[33437]],194962:[[21171]],194963:[[33457]],194964:[[33459]],194965:[[33469]],194966:[[33510]],194967:[[158524]],194968:[[33509]],194969:[[33565]],194970:[[33635]],194971:[[33709]],194972:[[33571]],194973:[[33725]],194974:[[33767]],194975:[[33879]],194976:[[33619]],194977:[[33738]],194978:[[33740]],194979:[[33756]],194980:[[158774]],194981:[[159083]],194982:[[158933]],194983:[[17707]],194984:[[34033]],194985:[[34035]],194986:[[34070]],194987:[[160714]],194988:[[34148]],194989:[[159532]],194990:[[17757]],194991:[[17761]],194992:[[159665]],194993:[[159954]],194994:[[17771]],194995:[[34384]],194996:[[34396]],194997:[[34407]],194998:[[34409]],194999:[[34473]],195000:[[34440]],195001:[[34574]],195002:[[34530]],195003:[[34681]],195004:[[34600]],195005:[[34667]],195006:[[34694]],195007:[[17879]],195008:[[34785]],195009:[[34817]],195010:[[17913]],195011:[[34912]],195012:[[34915]],195013:[[161383]],195014:[[35031]],195015:[[35038]],195016:[[17973]],195017:[[35066]],195018:[[13499]],195019:[[161966]],195020:[[162150]],195021:[[18110]],195022:[[18119]],195023:[[35488]],195024:[[35565]],195025:[[35722]],195026:[[35925]],195027:[[162984]],195028:[[36011]],195029:[[36033]],195030:[[36123]],195031:[[36215]],195032:[[163631]],195033:[[133124]],195034:[[36299]],195035:[[36284]],195036:[[36336]],195037:[[133342]],195038:[[36564]],195039:[[36664]],195040:[[165330]],195041:[[165357]],195042:[[37012]],195043:[[37105]],195044:[[37137]],195045:[[165678]],195046:[[37147]],195047:[[37432]],195048:[[37591]],195049:[[37592]],195050:[[37500]],195051:[[37881]],195052:[[37909]],195053:[[166906]],195054:[[38283]],195055:[[18837]],195056:[[38327]],195057:[[167287]],195058:[[18918]],195059:[[38595]],195060:[[23986]],195061:[[38691]],195062:[[168261]],195063:[[168474]],195064:[[19054]],195065:[[19062]],195066:[[38880]],195067:[[168970]],195068:[[19122]],195069:[[169110]],195070:[[38923]],195071:[[38923]]},
	64000:{64000:[[20999]],64001:[[24230]],64002:[[25299]],64003:[[31958]],64004:[[23429]],64005:[[27934]],64006:[[26292]],64007:[[36667]],64008:[[34892]],64009:[[38477]],64010:[[35211]],64011:[[24275]],64012:[[20800]],64013:[[21952]],64016:[[22618]],64018:[[26228]],64021:[[20958]],64022:[[29482]],64023:[[30410]],64024:[[31036]],64025:[[31070]],64026:[[31077]],64027:[[31119]],64028:[[38742]],64029:[[31934]],64030:[[32701]],64032:[[34322]],64034:[[35576]],64037:[[36920]],64038:[[37117]],64042:[[39151]],64043:[[39164]],64044:[[39208]],64045:[[40372]],64046:[[37086]],64047:[[38583]],64048:[[20398]],64049:[[20711]],64050:[[20813]],64051:[[21193]],64052:[[21220]],64053:[[21329]],64054:[[21917]],64055:[[22022]],64056:[[22120]],64057:[[22592]],64058:[[22696]],64059:[[23652]],64060:[[23662]],64061:[[24724]],64062:[[24936]],64063:[[24974]],64064:[[25074]],64065:[[25935]],64066:[[26082]],64067:[[26257]],64068:[[26757]],64069:[[28023]],64070:[[28186]],64071:[[28450]],64072:[[29038]],64073:[[29227]],64074:[[29730]],64075:[[30865]],64076:[[31038]],64077:[[31049]],64078:[[31048]],64079:[[31056]],64080:[[31062]],64081:[[31069]],64082:[[31117]],64083:[[31118]],64084:[[31296]],64085:[[31361]],64086:[[31680]],64087:[[32244]],64088:[[32265]],64089:[[32321]],64090:[[32626]],64091:[[32773]],64092:[[33261]],64093:[[33401]],64094:[[33401]],64095:[[33879]],64096:[[35088]],64097:[[35222]],64098:[[35585]],64099:[[35641]],64100:[[36051]],64101:[[36104]],64102:[[36790]],64103:[[36920]],64104:[[38627]],64105:[[38911]],64106:[[38971]],64107:[[24693]],64108:[[148206]],64109:[[33304]],64112:[[20006]],64113:[[20917]],64114:[[20840]],64115:[[20352]],64116:[[20805]],64117:[[20864]],64118:[[21191]],64119:[[21242]],64120:[[21917]],64121:[[21845]],64122:[[21913]],64123:[[21986]],64124:[[22618]],64125:[[22707]],64126:[[22852]],64127:[[22868]],64128:[[23138]],64129:[[23336]],64130:[[24274]],64131:[[24281]],64132:[[24425]],64133:[[24493]],64134:[[24792]],64135:[[24910]],64136:[[24840]],64137:[[24974]],64138:[[24928]],64139:[[25074]],64140:[[25140]],64141:[[25540]],64142:[[25628]],64143:[[25682]],64144:[[25942]],64145:[[26228]],64146:[[26391]],64147:[[26395]],64148:[[26454]],64149:[[27513]],64150:[[27578]],64151:[[27969]],64152:[[28379]],64153:[[28363]],64154:[[28450]],64155:[[28702]],64156:[[29038]],64157:[[30631]],64158:[[29237]],64159:[[29359]],64160:[[29482]],64161:[[29809]],64162:[[29958]],64163:[[30011]],64164:[[30237]],64165:[[30239]],64166:[[30410]],64167:[[30427]],64168:[[30452]],64169:[[30538]],64170:[[30528]],64171:[[30924]],64172:[[31409]],64173:[[31680]],64174:[[31867]],64175:[[32091]],64176:[[32244]],64177:[[32574]],64178:[[32773]],64179:[[33618]],64180:[[33775]],64181:[[34681]],64182:[[35137]],64183:[[35206]],64184:[[35222]],64185:[[35519]],64186:[[35576]],64187:[[35531]],64188:[[35585]],64189:[[35582]],64190:[[35565]],64191:[[35641]],64192:[[35722]],64193:[[36104]],64194:[[36664]],64195:[[36978]],64196:[[37273]],64197:[[37494]],64198:[[38524]],64199:[[38627]],64200:[[38742]],64201:[[38875]],64202:[[38911]],64203:[[38923]],64204:[[38971]],64205:[[39698]],64206:[[40860]],64207:[[141386]],64208:[[141380]],64209:[[144341]],64210:[[15261]],64211:[[16408]],64212:[[16441]],64213:[[152137]],64214:[[154832]],64215:[[163539]],64216:[[40771]],64217:[[40846]],195072:[[38953]],195073:[[169398]],195074:[[39138]],195075:[[19251]],195076:[[39209]],195077:[[39335]],195078:[[39362]],195079:[[39422]],195080:[[19406]],195081:[[170800]],195082:[[39698]],195083:[[40000]],195084:[[40189]],195085:[[19662]],195086:[[19693]],195087:[[40295]],195088:[[172238]],195089:[[19704]],195090:[[172293]],195091:[[172558]],195092:[[172689]],195093:[[40635]],195094:[[19798]],195095:[[40697]],195096:[[40702]],195097:[[40709]],195098:[[40719]],195099:[[40726]],195100:[[40763]],195101:[[173568]]},
	64256:{64256:[[102,102],256],64257:[[102,105],256],64258:[[102,108],256],64259:[[102,102,105],256],64260:[[102,102,108],256],64261:[[383,116],256],64262:[[115,116],256],64275:[[1396,1398],256],64276:[[1396,1381],256],64277:[[1396,1387],256],64278:[[1406,1398],256],64279:[[1396,1389],256],64285:[[1497,1460],512],64286:[,26],64287:[[1522,1463],512],64288:[[1506],256],64289:[[1488],256],64290:[[1491],256],64291:[[1492],256],64292:[[1499],256],64293:[[1500],256],64294:[[1501],256],64295:[[1512],256],64296:[[1514],256],64297:[[43],256],64298:[[1513,1473],512],64299:[[1513,1474],512],64300:[[64329,1473],512],64301:[[64329,1474],512],64302:[[1488,1463],512],64303:[[1488,1464],512],64304:[[1488,1468],512],64305:[[1489,1468],512],64306:[[1490,1468],512],64307:[[1491,1468],512],64308:[[1492,1468],512],64309:[[1493,1468],512],64310:[[1494,1468],512],64312:[[1496,1468],512],64313:[[1497,1468],512],64314:[[1498,1468],512],64315:[[1499,1468],512],64316:[[1500,1468],512],64318:[[1502,1468],512],64320:[[1504,1468],512],64321:[[1505,1468],512],64323:[[1507,1468],512],64324:[[1508,1468],512],64326:[[1510,1468],512],64327:[[1511,1468],512],64328:[[1512,1468],512],64329:[[1513,1468],512],64330:[[1514,1468],512],64331:[[1493,1465],512],64332:[[1489,1471],512],64333:[[1499,1471],512],64334:[[1508,1471],512],64335:[[1488,1500],256],64336:[[1649],256],64337:[[1649],256],64338:[[1659],256],64339:[[1659],256],64340:[[1659],256],64341:[[1659],256],64342:[[1662],256],64343:[[1662],256],64344:[[1662],256],64345:[[1662],256],64346:[[1664],256],64347:[[1664],256],64348:[[1664],256],64349:[[1664],256],64350:[[1658],256],64351:[[1658],256],64352:[[1658],256],64353:[[1658],256],64354:[[1663],256],64355:[[1663],256],64356:[[1663],256],64357:[[1663],256],64358:[[1657],256],64359:[[1657],256],64360:[[1657],256],64361:[[1657],256],64362:[[1700],256],64363:[[1700],256],64364:[[1700],256],64365:[[1700],256],64366:[[1702],256],64367:[[1702],256],64368:[[1702],256],64369:[[1702],256],64370:[[1668],256],64371:[[1668],256],64372:[[1668],256],64373:[[1668],256],64374:[[1667],256],64375:[[1667],256],64376:[[1667],256],64377:[[1667],256],64378:[[1670],256],64379:[[1670],256],64380:[[1670],256],64381:[[1670],256],64382:[[1671],256],64383:[[1671],256],64384:[[1671],256],64385:[[1671],256],64386:[[1677],256],64387:[[1677],256],64388:[[1676],256],64389:[[1676],256],64390:[[1678],256],64391:[[1678],256],64392:[[1672],256],64393:[[1672],256],64394:[[1688],256],64395:[[1688],256],64396:[[1681],256],64397:[[1681],256],64398:[[1705],256],64399:[[1705],256],64400:[[1705],256],64401:[[1705],256],64402:[[1711],256],64403:[[1711],256],64404:[[1711],256],64405:[[1711],256],64406:[[1715],256],64407:[[1715],256],64408:[[1715],256],64409:[[1715],256],64410:[[1713],256],64411:[[1713],256],64412:[[1713],256],64413:[[1713],256],64414:[[1722],256],64415:[[1722],256],64416:[[1723],256],64417:[[1723],256],64418:[[1723],256],64419:[[1723],256],64420:[[1728],256],64421:[[1728],256],64422:[[1729],256],64423:[[1729],256],64424:[[1729],256],64425:[[1729],256],64426:[[1726],256],64427:[[1726],256],64428:[[1726],256],64429:[[1726],256],64430:[[1746],256],64431:[[1746],256],64432:[[1747],256],64433:[[1747],256],64467:[[1709],256],64468:[[1709],256],64469:[[1709],256],64470:[[1709],256],64471:[[1735],256],64472:[[1735],256],64473:[[1734],256],64474:[[1734],256],64475:[[1736],256],64476:[[1736],256],64477:[[1655],256],64478:[[1739],256],64479:[[1739],256],64480:[[1733],256],64481:[[1733],256],64482:[[1737],256],64483:[[1737],256],64484:[[1744],256],64485:[[1744],256],64486:[[1744],256],64487:[[1744],256],64488:[[1609],256],64489:[[1609],256],64490:[[1574,1575],256],64491:[[1574,1575],256],64492:[[1574,1749],256],64493:[[1574,1749],256],64494:[[1574,1608],256],64495:[[1574,1608],256],64496:[[1574,1735],256],64497:[[1574,1735],256],64498:[[1574,1734],256],64499:[[1574,1734],256],64500:[[1574,1736],256],64501:[[1574,1736],256],64502:[[1574,1744],256],64503:[[1574,1744],256],64504:[[1574,1744],256],64505:[[1574,1609],256],64506:[[1574,1609],256],64507:[[1574,1609],256],64508:[[1740],256],64509:[[1740],256],64510:[[1740],256],64511:[[1740],256]},
	64512:{64512:[[1574,1580],256],64513:[[1574,1581],256],64514:[[1574,1605],256],64515:[[1574,1609],256],64516:[[1574,1610],256],64517:[[1576,1580],256],64518:[[1576,1581],256],64519:[[1576,1582],256],64520:[[1576,1605],256],64521:[[1576,1609],256],64522:[[1576,1610],256],64523:[[1578,1580],256],64524:[[1578,1581],256],64525:[[1578,1582],256],64526:[[1578,1605],256],64527:[[1578,1609],256],64528:[[1578,1610],256],64529:[[1579,1580],256],64530:[[1579,1605],256],64531:[[1579,1609],256],64532:[[1579,1610],256],64533:[[1580,1581],256],64534:[[1580,1605],256],64535:[[1581,1580],256],64536:[[1581,1605],256],64537:[[1582,1580],256],64538:[[1582,1581],256],64539:[[1582,1605],256],64540:[[1587,1580],256],64541:[[1587,1581],256],64542:[[1587,1582],256],64543:[[1587,1605],256],64544:[[1589,1581],256],64545:[[1589,1605],256],64546:[[1590,1580],256],64547:[[1590,1581],256],64548:[[1590,1582],256],64549:[[1590,1605],256],64550:[[1591,1581],256],64551:[[1591,1605],256],64552:[[1592,1605],256],64553:[[1593,1580],256],64554:[[1593,1605],256],64555:[[1594,1580],256],64556:[[1594,1605],256],64557:[[1601,1580],256],64558:[[1601,1581],256],64559:[[1601,1582],256],64560:[[1601,1605],256],64561:[[1601,1609],256],64562:[[1601,1610],256],64563:[[1602,1581],256],64564:[[1602,1605],256],64565:[[1602,1609],256],64566:[[1602,1610],256],64567:[[1603,1575],256],64568:[[1603,1580],256],64569:[[1603,1581],256],64570:[[1603,1582],256],64571:[[1603,1604],256],64572:[[1603,1605],256],64573:[[1603,1609],256],64574:[[1603,1610],256],64575:[[1604,1580],256],64576:[[1604,1581],256],64577:[[1604,1582],256],64578:[[1604,1605],256],64579:[[1604,1609],256],64580:[[1604,1610],256],64581:[[1605,1580],256],64582:[[1605,1581],256],64583:[[1605,1582],256],64584:[[1605,1605],256],64585:[[1605,1609],256],64586:[[1605,1610],256],64587:[[1606,1580],256],64588:[[1606,1581],256],64589:[[1606,1582],256],64590:[[1606,1605],256],64591:[[1606,1609],256],64592:[[1606,1610],256],64593:[[1607,1580],256],64594:[[1607,1605],256],64595:[[1607,1609],256],64596:[[1607,1610],256],64597:[[1610,1580],256],64598:[[1610,1581],256],64599:[[1610,1582],256],64600:[[1610,1605],256],64601:[[1610,1609],256],64602:[[1610,1610],256],64603:[[1584,1648],256],64604:[[1585,1648],256],64605:[[1609,1648],256],64606:[[32,1612,1617],256],64607:[[32,1613,1617],256],64608:[[32,1614,1617],256],64609:[[32,1615,1617],256],64610:[[32,1616,1617],256],64611:[[32,1617,1648],256],64612:[[1574,1585],256],64613:[[1574,1586],256],64614:[[1574,1605],256],64615:[[1574,1606],256],64616:[[1574,1609],256],64617:[[1574,1610],256],64618:[[1576,1585],256],64619:[[1576,1586],256],64620:[[1576,1605],256],64621:[[1576,1606],256],64622:[[1576,1609],256],64623:[[1576,1610],256],64624:[[1578,1585],256],64625:[[1578,1586],256],64626:[[1578,1605],256],64627:[[1578,1606],256],64628:[[1578,1609],256],64629:[[1578,1610],256],64630:[[1579,1585],256],64631:[[1579,1586],256],64632:[[1579,1605],256],64633:[[1579,1606],256],64634:[[1579,1609],256],64635:[[1579,1610],256],64636:[[1601,1609],256],64637:[[1601,1610],256],64638:[[1602,1609],256],64639:[[1602,1610],256],64640:[[1603,1575],256],64641:[[1603,1604],256],64642:[[1603,1605],256],64643:[[1603,1609],256],64644:[[1603,1610],256],64645:[[1604,1605],256],64646:[[1604,1609],256],64647:[[1604,1610],256],64648:[[1605,1575],256],64649:[[1605,1605],256],64650:[[1606,1585],256],64651:[[1606,1586],256],64652:[[1606,1605],256],64653:[[1606,1606],256],64654:[[1606,1609],256],64655:[[1606,1610],256],64656:[[1609,1648],256],64657:[[1610,1585],256],64658:[[1610,1586],256],64659:[[1610,1605],256],64660:[[1610,1606],256],64661:[[1610,1609],256],64662:[[1610,1610],256],64663:[[1574,1580],256],64664:[[1574,1581],256],64665:[[1574,1582],256],64666:[[1574,1605],256],64667:[[1574,1607],256],64668:[[1576,1580],256],64669:[[1576,1581],256],64670:[[1576,1582],256],64671:[[1576,1605],256],64672:[[1576,1607],256],64673:[[1578,1580],256],64674:[[1578,1581],256],64675:[[1578,1582],256],64676:[[1578,1605],256],64677:[[1578,1607],256],64678:[[1579,1605],256],64679:[[1580,1581],256],64680:[[1580,1605],256],64681:[[1581,1580],256],64682:[[1581,1605],256],64683:[[1582,1580],256],64684:[[1582,1605],256],64685:[[1587,1580],256],64686:[[1587,1581],256],64687:[[1587,1582],256],64688:[[1587,1605],256],64689:[[1589,1581],256],64690:[[1589,1582],256],64691:[[1589,1605],256],64692:[[1590,1580],256],64693:[[1590,1581],256],64694:[[1590,1582],256],64695:[[1590,1605],256],64696:[[1591,1581],256],64697:[[1592,1605],256],64698:[[1593,1580],256],64699:[[1593,1605],256],64700:[[1594,1580],256],64701:[[1594,1605],256],64702:[[1601,1580],256],64703:[[1601,1581],256],64704:[[1601,1582],256],64705:[[1601,1605],256],64706:[[1602,1581],256],64707:[[1602,1605],256],64708:[[1603,1580],256],64709:[[1603,1581],256],64710:[[1603,1582],256],64711:[[1603,1604],256],64712:[[1603,1605],256],64713:[[1604,1580],256],64714:[[1604,1581],256],64715:[[1604,1582],256],64716:[[1604,1605],256],64717:[[1604,1607],256],64718:[[1605,1580],256],64719:[[1605,1581],256],64720:[[1605,1582],256],64721:[[1605,1605],256],64722:[[1606,1580],256],64723:[[1606,1581],256],64724:[[1606,1582],256],64725:[[1606,1605],256],64726:[[1606,1607],256],64727:[[1607,1580],256],64728:[[1607,1605],256],64729:[[1607,1648],256],64730:[[1610,1580],256],64731:[[1610,1581],256],64732:[[1610,1582],256],64733:[[1610,1605],256],64734:[[1610,1607],256],64735:[[1574,1605],256],64736:[[1574,1607],256],64737:[[1576,1605],256],64738:[[1576,1607],256],64739:[[1578,1605],256],64740:[[1578,1607],256],64741:[[1579,1605],256],64742:[[1579,1607],256],64743:[[1587,1605],256],64744:[[1587,1607],256],64745:[[1588,1605],256],64746:[[1588,1607],256],64747:[[1603,1604],256],64748:[[1603,1605],256],64749:[[1604,1605],256],64750:[[1606,1605],256],64751:[[1606,1607],256],64752:[[1610,1605],256],64753:[[1610,1607],256],64754:[[1600,1614,1617],256],64755:[[1600,1615,1617],256],64756:[[1600,1616,1617],256],64757:[[1591,1609],256],64758:[[1591,1610],256],64759:[[1593,1609],256],64760:[[1593,1610],256],64761:[[1594,1609],256],64762:[[1594,1610],256],64763:[[1587,1609],256],64764:[[1587,1610],256],64765:[[1588,1609],256],64766:[[1588,1610],256],64767:[[1581,1609],256]},
	64768:{64768:[[1581,1610],256],64769:[[1580,1609],256],64770:[[1580,1610],256],64771:[[1582,1609],256],64772:[[1582,1610],256],64773:[[1589,1609],256],64774:[[1589,1610],256],64775:[[1590,1609],256],64776:[[1590,1610],256],64777:[[1588,1580],256],64778:[[1588,1581],256],64779:[[1588,1582],256],64780:[[1588,1605],256],64781:[[1588,1585],256],64782:[[1587,1585],256],64783:[[1589,1585],256],64784:[[1590,1585],256],64785:[[1591,1609],256],64786:[[1591,1610],256],64787:[[1593,1609],256],64788:[[1593,1610],256],64789:[[1594,1609],256],64790:[[1594,1610],256],64791:[[1587,1609],256],64792:[[1587,1610],256],64793:[[1588,1609],256],64794:[[1588,1610],256],64795:[[1581,1609],256],64796:[[1581,1610],256],64797:[[1580,1609],256],64798:[[1580,1610],256],64799:[[1582,1609],256],64800:[[1582,1610],256],64801:[[1589,1609],256],64802:[[1589,1610],256],64803:[[1590,1609],256],64804:[[1590,1610],256],64805:[[1588,1580],256],64806:[[1588,1581],256],64807:[[1588,1582],256],64808:[[1588,1605],256],64809:[[1588,1585],256],64810:[[1587,1585],256],64811:[[1589,1585],256],64812:[[1590,1585],256],64813:[[1588,1580],256],64814:[[1588,1581],256],64815:[[1588,1582],256],64816:[[1588,1605],256],64817:[[1587,1607],256],64818:[[1588,1607],256],64819:[[1591,1605],256],64820:[[1587,1580],256],64821:[[1587,1581],256],64822:[[1587,1582],256],64823:[[1588,1580],256],64824:[[1588,1581],256],64825:[[1588,1582],256],64826:[[1591,1605],256],64827:[[1592,1605],256],64828:[[1575,1611],256],64829:[[1575,1611],256],64848:[[1578,1580,1605],256],64849:[[1578,1581,1580],256],64850:[[1578,1581,1580],256],64851:[[1578,1581,1605],256],64852:[[1578,1582,1605],256],64853:[[1578,1605,1580],256],64854:[[1578,1605,1581],256],64855:[[1578,1605,1582],256],64856:[[1580,1605,1581],256],64857:[[1580,1605,1581],256],64858:[[1581,1605,1610],256],64859:[[1581,1605,1609],256],64860:[[1587,1581,1580],256],64861:[[1587,1580,1581],256],64862:[[1587,1580,1609],256],64863:[[1587,1605,1581],256],64864:[[1587,1605,1581],256],64865:[[1587,1605,1580],256],64866:[[1587,1605,1605],256],64867:[[1587,1605,1605],256],64868:[[1589,1581,1581],256],64869:[[1589,1581,1581],256],64870:[[1589,1605,1605],256],64871:[[1588,1581,1605],256],64872:[[1588,1581,1605],256],64873:[[1588,1580,1610],256],64874:[[1588,1605,1582],256],64875:[[1588,1605,1582],256],64876:[[1588,1605,1605],256],64877:[[1588,1605,1605],256],64878:[[1590,1581,1609],256],64879:[[1590,1582,1605],256],64880:[[1590,1582,1605],256],64881:[[1591,1605,1581],256],64882:[[1591,1605,1581],256],64883:[[1591,1605,1605],256],64884:[[1591,1605,1610],256],64885:[[1593,1580,1605],256],64886:[[1593,1605,1605],256],64887:[[1593,1605,1605],256],64888:[[1593,1605,1609],256],64889:[[1594,1605,1605],256],64890:[[1594,1605,1610],256],64891:[[1594,1605,1609],256],64892:[[1601,1582,1605],256],64893:[[1601,1582,1605],256],64894:[[1602,1605,1581],256],64895:[[1602,1605,1605],256],64896:[[1604,1581,1605],256],64897:[[1604,1581,1610],256],64898:[[1604,1581,1609],256],64899:[[1604,1580,1580],256],64900:[[1604,1580,1580],256],64901:[[1604,1582,1605],256],64902:[[1604,1582,1605],256],64903:[[1604,1605,1581],256],64904:[[1604,1605,1581],256],64905:[[1605,1581,1580],256],64906:[[1605,1581,1605],256],64907:[[1605,1581,1610],256],64908:[[1605,1580,1581],256],64909:[[1605,1580,1605],256],64910:[[1605,1582,1580],256],64911:[[1605,1582,1605],256],64914:[[1605,1580,1582],256],64915:[[1607,1605,1580],256],64916:[[1607,1605,1605],256],64917:[[1606,1581,1605],256],64918:[[1606,1581,1609],256],64919:[[1606,1580,1605],256],64920:[[1606,1580,1605],256],64921:[[1606,1580,1609],256],64922:[[1606,1605,1610],256],64923:[[1606,1605,1609],256],64924:[[1610,1605,1605],256],64925:[[1610,1605,1605],256],64926:[[1576,1582,1610],256],64927:[[1578,1580,1610],256],64928:[[1578,1580,1609],256],64929:[[1578,1582,1610],256],64930:[[1578,1582,1609],256],64931:[[1578,1605,1610],256],64932:[[1578,1605,1609],256],64933:[[1580,1605,1610],256],64934:[[1580,1581,1609],256],64935:[[1580,1605,1609],256],64936:[[1587,1582,1609],256],64937:[[1589,1581,1610],256],64938:[[1588,1581,1610],256],64939:[[1590,1581,1610],256],64940:[[1604,1580,1610],256],64941:[[1604,1605,1610],256],64942:[[1610,1581,1610],256],64943:[[1610,1580,1610],256],64944:[[1610,1605,1610],256],64945:[[1605,1605,1610],256],64946:[[1602,1605,1610],256],64947:[[1606,1581,1610],256],64948:[[1602,1605,1581],256],64949:[[1604,1581,1605],256],64950:[[1593,1605,1610],256],64951:[[1603,1605,1610],256],64952:[[1606,1580,1581],256],64953:[[1605,1582,1610],256],64954:[[1604,1580,1605],256],64955:[[1603,1605,1605],256],64956:[[1604,1580,1605],256],64957:[[1606,1580,1581],256],64958:[[1580,1581,1610],256],64959:[[1581,1580,1610],256],64960:[[1605,1580,1610],256],64961:[[1601,1605,1610],256],64962:[[1576,1581,1610],256],64963:[[1603,1605,1605],256],64964:[[1593,1580,1605],256],64965:[[1589,1605,1605],256],64966:[[1587,1582,1610],256],64967:[[1606,1580,1610],256],65008:[[1589,1604,1746],256],65009:[[1602,1604,1746],256],65010:[[1575,1604,1604,1607],256],65011:[[1575,1603,1576,1585],256],65012:[[1605,1581,1605,1583],256],65013:[[1589,1604,1593,1605],256],65014:[[1585,1587,1608,1604],256],65015:[[1593,1604,1610,1607],256],65016:[[1608,1587,1604,1605],256],65017:[[1589,1604,1609],256],65018:[[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605],256],65019:[[1580,1604,32,1580,1604,1575,1604,1607],256],65020:[[1585,1740,1575,1604],256]},
	65024:{65040:[[44],256],65041:[[12289],256],65042:[[12290],256],65043:[[58],256],65044:[[59],256],65045:[[33],256],65046:[[63],256],65047:[[12310],256],65048:[[12311],256],65049:[[8230],256],65056:[,230],65057:[,230],65058:[,230],65059:[,230],65060:[,230],65061:[,230],65062:[,230],65063:[,220],65064:[,220],65065:[,220],65066:[,220],65067:[,220],65068:[,220],65069:[,220],65072:[[8229],256],65073:[[8212],256],65074:[[8211],256],65075:[[95],256],65076:[[95],256],65077:[[40],256],65078:[[41],256],65079:[[123],256],65080:[[125],256],65081:[[12308],256],65082:[[12309],256],65083:[[12304],256],65084:[[12305],256],65085:[[12298],256],65086:[[12299],256],65087:[[12296],256],65088:[[12297],256],65089:[[12300],256],65090:[[12301],256],65091:[[12302],256],65092:[[12303],256],65095:[[91],256],65096:[[93],256],65097:[[8254],256],65098:[[8254],256],65099:[[8254],256],65100:[[8254],256],65101:[[95],256],65102:[[95],256],65103:[[95],256],65104:[[44],256],65105:[[12289],256],65106:[[46],256],65108:[[59],256],65109:[[58],256],65110:[[63],256],65111:[[33],256],65112:[[8212],256],65113:[[40],256],65114:[[41],256],65115:[[123],256],65116:[[125],256],65117:[[12308],256],65118:[[12309],256],65119:[[35],256],65120:[[38],256],65121:[[42],256],65122:[[43],256],65123:[[45],256],65124:[[60],256],65125:[[62],256],65126:[[61],256],65128:[[92],256],65129:[[36],256],65130:[[37],256],65131:[[64],256],65136:[[32,1611],256],65137:[[1600,1611],256],65138:[[32,1612],256],65140:[[32,1613],256],65142:[[32,1614],256],65143:[[1600,1614],256],65144:[[32,1615],256],65145:[[1600,1615],256],65146:[[32,1616],256],65147:[[1600,1616],256],65148:[[32,1617],256],65149:[[1600,1617],256],65150:[[32,1618],256],65151:[[1600,1618],256],65152:[[1569],256],65153:[[1570],256],65154:[[1570],256],65155:[[1571],256],65156:[[1571],256],65157:[[1572],256],65158:[[1572],256],65159:[[1573],256],65160:[[1573],256],65161:[[1574],256],65162:[[1574],256],65163:[[1574],256],65164:[[1574],256],65165:[[1575],256],65166:[[1575],256],65167:[[1576],256],65168:[[1576],256],65169:[[1576],256],65170:[[1576],256],65171:[[1577],256],65172:[[1577],256],65173:[[1578],256],65174:[[1578],256],65175:[[1578],256],65176:[[1578],256],65177:[[1579],256],65178:[[1579],256],65179:[[1579],256],65180:[[1579],256],65181:[[1580],256],65182:[[1580],256],65183:[[1580],256],65184:[[1580],256],65185:[[1581],256],65186:[[1581],256],65187:[[1581],256],65188:[[1581],256],65189:[[1582],256],65190:[[1582],256],65191:[[1582],256],65192:[[1582],256],65193:[[1583],256],65194:[[1583],256],65195:[[1584],256],65196:[[1584],256],65197:[[1585],256],65198:[[1585],256],65199:[[1586],256],65200:[[1586],256],65201:[[1587],256],65202:[[1587],256],65203:[[1587],256],65204:[[1587],256],65205:[[1588],256],65206:[[1588],256],65207:[[1588],256],65208:[[1588],256],65209:[[1589],256],65210:[[1589],256],65211:[[1589],256],65212:[[1589],256],65213:[[1590],256],65214:[[1590],256],65215:[[1590],256],65216:[[1590],256],65217:[[1591],256],65218:[[1591],256],65219:[[1591],256],65220:[[1591],256],65221:[[1592],256],65222:[[1592],256],65223:[[1592],256],65224:[[1592],256],65225:[[1593],256],65226:[[1593],256],65227:[[1593],256],65228:[[1593],256],65229:[[1594],256],65230:[[1594],256],65231:[[1594],256],65232:[[1594],256],65233:[[1601],256],65234:[[1601],256],65235:[[1601],256],65236:[[1601],256],65237:[[1602],256],65238:[[1602],256],65239:[[1602],256],65240:[[1602],256],65241:[[1603],256],65242:[[1603],256],65243:[[1603],256],65244:[[1603],256],65245:[[1604],256],65246:[[1604],256],65247:[[1604],256],65248:[[1604],256],65249:[[1605],256],65250:[[1605],256],65251:[[1605],256],65252:[[1605],256],65253:[[1606],256],65254:[[1606],256],65255:[[1606],256],65256:[[1606],256],65257:[[1607],256],65258:[[1607],256],65259:[[1607],256],65260:[[1607],256],65261:[[1608],256],65262:[[1608],256],65263:[[1609],256],65264:[[1609],256],65265:[[1610],256],65266:[[1610],256],65267:[[1610],256],65268:[[1610],256],65269:[[1604,1570],256],65270:[[1604,1570],256],65271:[[1604,1571],256],65272:[[1604,1571],256],65273:[[1604,1573],256],65274:[[1604,1573],256],65275:[[1604,1575],256],65276:[[1604,1575],256]},
	65280:{65281:[[33],256],65282:[[34],256],65283:[[35],256],65284:[[36],256],65285:[[37],256],65286:[[38],256],65287:[[39],256],65288:[[40],256],65289:[[41],256],65290:[[42],256],65291:[[43],256],65292:[[44],256],65293:[[45],256],65294:[[46],256],65295:[[47],256],65296:[[48],256],65297:[[49],256],65298:[[50],256],65299:[[51],256],65300:[[52],256],65301:[[53],256],65302:[[54],256],65303:[[55],256],65304:[[56],256],65305:[[57],256],65306:[[58],256],65307:[[59],256],65308:[[60],256],65309:[[61],256],65310:[[62],256],65311:[[63],256],65312:[[64],256],65313:[[65],256],65314:[[66],256],65315:[[67],256],65316:[[68],256],65317:[[69],256],65318:[[70],256],65319:[[71],256],65320:[[72],256],65321:[[73],256],65322:[[74],256],65323:[[75],256],65324:[[76],256],65325:[[77],256],65326:[[78],256],65327:[[79],256],65328:[[80],256],65329:[[81],256],65330:[[82],256],65331:[[83],256],65332:[[84],256],65333:[[85],256],65334:[[86],256],65335:[[87],256],65336:[[88],256],65337:[[89],256],65338:[[90],256],65339:[[91],256],65340:[[92],256],65341:[[93],256],65342:[[94],256],65343:[[95],256],65344:[[96],256],65345:[[97],256],65346:[[98],256],65347:[[99],256],65348:[[100],256],65349:[[101],256],65350:[[102],256],65351:[[103],256],65352:[[104],256],65353:[[105],256],65354:[[106],256],65355:[[107],256],65356:[[108],256],65357:[[109],256],65358:[[110],256],65359:[[111],256],65360:[[112],256],65361:[[113],256],65362:[[114],256],65363:[[115],256],65364:[[116],256],65365:[[117],256],65366:[[118],256],65367:[[119],256],65368:[[120],256],65369:[[121],256],65370:[[122],256],65371:[[123],256],65372:[[124],256],65373:[[125],256],65374:[[126],256],65375:[[10629],256],65376:[[10630],256],65377:[[12290],256],65378:[[12300],256],65379:[[12301],256],65380:[[12289],256],65381:[[12539],256],65382:[[12530],256],65383:[[12449],256],65384:[[12451],256],65385:[[12453],256],65386:[[12455],256],65387:[[12457],256],65388:[[12515],256],65389:[[12517],256],65390:[[12519],256],65391:[[12483],256],65392:[[12540],256],65393:[[12450],256],65394:[[12452],256],65395:[[12454],256],65396:[[12456],256],65397:[[12458],256],65398:[[12459],256],65399:[[12461],256],65400:[[12463],256],65401:[[12465],256],65402:[[12467],256],65403:[[12469],256],65404:[[12471],256],65405:[[12473],256],65406:[[12475],256],65407:[[12477],256],65408:[[12479],256],65409:[[12481],256],65410:[[12484],256],65411:[[12486],256],65412:[[12488],256],65413:[[12490],256],65414:[[12491],256],65415:[[12492],256],65416:[[12493],256],65417:[[12494],256],65418:[[12495],256],65419:[[12498],256],65420:[[12501],256],65421:[[12504],256],65422:[[12507],256],65423:[[12510],256],65424:[[12511],256],65425:[[12512],256],65426:[[12513],256],65427:[[12514],256],65428:[[12516],256],65429:[[12518],256],65430:[[12520],256],65431:[[12521],256],65432:[[12522],256],65433:[[12523],256],65434:[[12524],256],65435:[[12525],256],65436:[[12527],256],65437:[[12531],256],65438:[[12441],256],65439:[[12442],256],65440:[[12644],256],65441:[[12593],256],65442:[[12594],256],65443:[[12595],256],65444:[[12596],256],65445:[[12597],256],65446:[[12598],256],65447:[[12599],256],65448:[[12600],256],65449:[[12601],256],65450:[[12602],256],65451:[[12603],256],65452:[[12604],256],65453:[[12605],256],65454:[[12606],256],65455:[[12607],256],65456:[[12608],256],65457:[[12609],256],65458:[[12610],256],65459:[[12611],256],65460:[[12612],256],65461:[[12613],256],65462:[[12614],256],65463:[[12615],256],65464:[[12616],256],65465:[[12617],256],65466:[[12618],256],65467:[[12619],256],65468:[[12620],256],65469:[[12621],256],65470:[[12622],256],65474:[[12623],256],65475:[[12624],256],65476:[[12625],256],65477:[[12626],256],65478:[[12627],256],65479:[[12628],256],65482:[[12629],256],65483:[[12630],256],65484:[[12631],256],65485:[[12632],256],65486:[[12633],256],65487:[[12634],256],65490:[[12635],256],65491:[[12636],256],65492:[[12637],256],65493:[[12638],256],65494:[[12639],256],65495:[[12640],256],65498:[[12641],256],65499:[[12642],256],65500:[[12643],256],65504:[[162],256],65505:[[163],256],65506:[[172],256],65507:[[175],256],65508:[[166],256],65509:[[165],256],65510:[[8361],256],65512:[[9474],256],65513:[[8592],256],65514:[[8593],256],65515:[[8594],256],65516:[[8595],256],65517:[[9632],256],65518:[[9675],256]}

	};

	   /***** Module to export */
	   var unorm = {
	      nfc: nfc,
	      nfd: nfd,
	      nfkc: nfkc,
	      nfkd: nfkd
	   };

	   /*globals module:true,define:true*/

	   // CommonJS
	   {
	      module.exports = unorm;

	   // AMD
	   }

	   /***** Export as shim for String::normalize method *****/
	   /*
	      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

	      21.1.3.12 String.prototype.normalize(form="NFC")
	      When the normalize method is called with one argument form, the following steps are taken:

	      1. Let O be CheckObjectCoercible(this value).
	      2. Let S be ToString(O).
	      3. ReturnIfAbrupt(S).
	      4. If form is not provided or undefined let form be "NFC".
	      5. Let f be ToString(form).
	      6. ReturnIfAbrupt(f).
	      7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
	      8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
	      9. Return ns.

	      The length property of the normalize method is 0.

	      *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
	   */
	    unorm.shimApplied = false;

	   if (!String.prototype.normalize) {
	      Object.defineProperty(String.prototype, "normalize", {
	         enumerable: false,
	         configurable: true,
	         writable: true,
	         value: function normalize (/*form*/) {
	            
	            var str = "" + this;
	            var form = arguments[0] === undefined ? "NFC" : arguments[0];

	            if (this === null || this === undefined) {
	               throw new TypeError("Cannot call method on " + Object.prototype.toString.call(this));
	            }

	            if (form === "NFC") {
	               return unorm.nfc(str);
	            } else if (form === "NFD") {
	               return unorm.nfd(str);
	            } else if (form === "NFKC") {
	               return unorm.nfkc(str);
	            } else if (form === "NFKD") {
	               return unorm.nfkd(str);
	            } else {
	               throw new RangeError("Invalid normalization form: " + form);
	            }
	         }
	      });

	      unorm.shimApplied = true;
	   }
	}(commonjsGlobal));
	});

	var chinese_simplified = [
	  "的",
	  "一",
	  "是",
	  "在",
	  "不",
	  "了",
	  "有",
	  "和",
	  "人",
	  "这",
	  "中",
	  "大",
	  "为",
	  "上",
	  "个",
	  "国",
	  "我",
	  "以",
	  "要",
	  "他",
	  "时",
	  "来",
	  "用",
	  "们",
	  "生",
	  "到",
	  "作",
	  "地",
	  "于",
	  "出",
	  "就",
	  "分",
	  "对",
	  "成",
	  "会",
	  "可",
	  "主",
	  "发",
	  "年",
	  "动",
	  "同",
	  "工",
	  "也",
	  "能",
	  "下",
	  "过",
	  "子",
	  "说",
	  "产",
	  "种",
	  "面",
	  "而",
	  "方",
	  "后",
	  "多",
	  "定",
	  "行",
	  "学",
	  "法",
	  "所",
	  "民",
	  "得",
	  "经",
	  "十",
	  "三",
	  "之",
	  "进",
	  "着",
	  "等",
	  "部",
	  "度",
	  "家",
	  "电",
	  "力",
	  "里",
	  "如",
	  "水",
	  "化",
	  "高",
	  "自",
	  "二",
	  "理",
	  "起",
	  "小",
	  "物",
	  "现",
	  "实",
	  "加",
	  "量",
	  "都",
	  "两",
	  "体",
	  "制",
	  "机",
	  "当",
	  "使",
	  "点",
	  "从",
	  "业",
	  "本",
	  "去",
	  "把",
	  "性",
	  "好",
	  "应",
	  "开",
	  "它",
	  "合",
	  "还",
	  "因",
	  "由",
	  "其",
	  "些",
	  "然",
	  "前",
	  "外",
	  "天",
	  "政",
	  "四",
	  "日",
	  "那",
	  "社",
	  "义",
	  "事",
	  "平",
	  "形",
	  "相",
	  "全",
	  "表",
	  "间",
	  "样",
	  "与",
	  "关",
	  "各",
	  "重",
	  "新",
	  "线",
	  "内",
	  "数",
	  "正",
	  "心",
	  "反",
	  "你",
	  "明",
	  "看",
	  "原",
	  "又",
	  "么",
	  "利",
	  "比",
	  "或",
	  "但",
	  "质",
	  "气",
	  "第",
	  "向",
	  "道",
	  "命",
	  "此",
	  "变",
	  "条",
	  "只",
	  "没",
	  "结",
	  "解",
	  "问",
	  "意",
	  "建",
	  "月",
	  "公",
	  "无",
	  "系",
	  "军",
	  "很",
	  "情",
	  "者",
	  "最",
	  "立",
	  "代",
	  "想",
	  "已",
	  "通",
	  "并",
	  "提",
	  "直",
	  "题",
	  "党",
	  "程",
	  "展",
	  "五",
	  "果",
	  "料",
	  "象",
	  "员",
	  "革",
	  "位",
	  "入",
	  "常",
	  "文",
	  "总",
	  "次",
	  "品",
	  "式",
	  "活",
	  "设",
	  "及",
	  "管",
	  "特",
	  "件",
	  "长",
	  "求",
	  "老",
	  "头",
	  "基",
	  "资",
	  "边",
	  "流",
	  "路",
	  "级",
	  "少",
	  "图",
	  "山",
	  "统",
	  "接",
	  "知",
	  "较",
	  "将",
	  "组",
	  "见",
	  "计",
	  "别",
	  "她",
	  "手",
	  "角",
	  "期",
	  "根",
	  "论",
	  "运",
	  "农",
	  "指",
	  "几",
	  "九",
	  "区",
	  "强",
	  "放",
	  "决",
	  "西",
	  "被",
	  "干",
	  "做",
	  "必",
	  "战",
	  "先",
	  "回",
	  "则",
	  "任",
	  "取",
	  "据",
	  "处",
	  "队",
	  "南",
	  "给",
	  "色",
	  "光",
	  "门",
	  "即",
	  "保",
	  "治",
	  "北",
	  "造",
	  "百",
	  "规",
	  "热",
	  "领",
	  "七",
	  "海",
	  "口",
	  "东",
	  "导",
	  "器",
	  "压",
	  "志",
	  "世",
	  "金",
	  "增",
	  "争",
	  "济",
	  "阶",
	  "油",
	  "思",
	  "术",
	  "极",
	  "交",
	  "受",
	  "联",
	  "什",
	  "认",
	  "六",
	  "共",
	  "权",
	  "收",
	  "证",
	  "改",
	  "清",
	  "美",
	  "再",
	  "采",
	  "转",
	  "更",
	  "单",
	  "风",
	  "切",
	  "打",
	  "白",
	  "教",
	  "速",
	  "花",
	  "带",
	  "安",
	  "场",
	  "身",
	  "车",
	  "例",
	  "真",
	  "务",
	  "具",
	  "万",
	  "每",
	  "目",
	  "至",
	  "达",
	  "走",
	  "积",
	  "示",
	  "议",
	  "声",
	  "报",
	  "斗",
	  "完",
	  "类",
	  "八",
	  "离",
	  "华",
	  "名",
	  "确",
	  "才",
	  "科",
	  "张",
	  "信",
	  "马",
	  "节",
	  "话",
	  "米",
	  "整",
	  "空",
	  "元",
	  "况",
	  "今",
	  "集",
	  "温",
	  "传",
	  "土",
	  "许",
	  "步",
	  "群",
	  "广",
	  "石",
	  "记",
	  "需",
	  "段",
	  "研",
	  "界",
	  "拉",
	  "林",
	  "律",
	  "叫",
	  "且",
	  "究",
	  "观",
	  "越",
	  "织",
	  "装",
	  "影",
	  "算",
	  "低",
	  "持",
	  "音",
	  "众",
	  "书",
	  "布",
	  "复",
	  "容",
	  "儿",
	  "须",
	  "际",
	  "商",
	  "非",
	  "验",
	  "连",
	  "断",
	  "深",
	  "难",
	  "近",
	  "矿",
	  "千",
	  "周",
	  "委",
	  "素",
	  "技",
	  "备",
	  "半",
	  "办",
	  "青",
	  "省",
	  "列",
	  "习",
	  "响",
	  "约",
	  "支",
	  "般",
	  "史",
	  "感",
	  "劳",
	  "便",
	  "团",
	  "往",
	  "酸",
	  "历",
	  "市",
	  "克",
	  "何",
	  "除",
	  "消",
	  "构",
	  "府",
	  "称",
	  "太",
	  "准",
	  "精",
	  "值",
	  "号",
	  "率",
	  "族",
	  "维",
	  "划",
	  "选",
	  "标",
	  "写",
	  "存",
	  "候",
	  "毛",
	  "亲",
	  "快",
	  "效",
	  "斯",
	  "院",
	  "查",
	  "江",
	  "型",
	  "眼",
	  "王",
	  "按",
	  "格",
	  "养",
	  "易",
	  "置",
	  "派",
	  "层",
	  "片",
	  "始",
	  "却",
	  "专",
	  "状",
	  "育",
	  "厂",
	  "京",
	  "识",
	  "适",
	  "属",
	  "圆",
	  "包",
	  "火",
	  "住",
	  "调",
	  "满",
	  "县",
	  "局",
	  "照",
	  "参",
	  "红",
	  "细",
	  "引",
	  "听",
	  "该",
	  "铁",
	  "价",
	  "严",
	  "首",
	  "底",
	  "液",
	  "官",
	  "德",
	  "随",
	  "病",
	  "苏",
	  "失",
	  "尔",
	  "死",
	  "讲",
	  "配",
	  "女",
	  "黄",
	  "推",
	  "显",
	  "谈",
	  "罪",
	  "神",
	  "艺",
	  "呢",
	  "席",
	  "含",
	  "企",
	  "望",
	  "密",
	  "批",
	  "营",
	  "项",
	  "防",
	  "举",
	  "球",
	  "英",
	  "氧",
	  "势",
	  "告",
	  "李",
	  "台",
	  "落",
	  "木",
	  "帮",
	  "轮",
	  "破",
	  "亚",
	  "师",
	  "围",
	  "注",
	  "远",
	  "字",
	  "材",
	  "排",
	  "供",
	  "河",
	  "态",
	  "封",
	  "另",
	  "施",
	  "减",
	  "树",
	  "溶",
	  "怎",
	  "止",
	  "案",
	  "言",
	  "士",
	  "均",
	  "武",
	  "固",
	  "叶",
	  "鱼",
	  "波",
	  "视",
	  "仅",
	  "费",
	  "紧",
	  "爱",
	  "左",
	  "章",
	  "早",
	  "朝",
	  "害",
	  "续",
	  "轻",
	  "服",
	  "试",
	  "食",
	  "充",
	  "兵",
	  "源",
	  "判",
	  "护",
	  "司",
	  "足",
	  "某",
	  "练",
	  "差",
	  "致",
	  "板",
	  "田",
	  "降",
	  "黑",
	  "犯",
	  "负",
	  "击",
	  "范",
	  "继",
	  "兴",
	  "似",
	  "余",
	  "坚",
	  "曲",
	  "输",
	  "修",
	  "故",
	  "城",
	  "夫",
	  "够",
	  "送",
	  "笔",
	  "船",
	  "占",
	  "右",
	  "财",
	  "吃",
	  "富",
	  "春",
	  "职",
	  "觉",
	  "汉",
	  "画",
	  "功",
	  "巴",
	  "跟",
	  "虽",
	  "杂",
	  "飞",
	  "检",
	  "吸",
	  "助",
	  "升",
	  "阳",
	  "互",
	  "初",
	  "创",
	  "抗",
	  "考",
	  "投",
	  "坏",
	  "策",
	  "古",
	  "径",
	  "换",
	  "未",
	  "跑",
	  "留",
	  "钢",
	  "曾",
	  "端",
	  "责",
	  "站",
	  "简",
	  "述",
	  "钱",
	  "副",
	  "尽",
	  "帝",
	  "射",
	  "草",
	  "冲",
	  "承",
	  "独",
	  "令",
	  "限",
	  "阿",
	  "宣",
	  "环",
	  "双",
	  "请",
	  "超",
	  "微",
	  "让",
	  "控",
	  "州",
	  "良",
	  "轴",
	  "找",
	  "否",
	  "纪",
	  "益",
	  "依",
	  "优",
	  "顶",
	  "础",
	  "载",
	  "倒",
	  "房",
	  "突",
	  "坐",
	  "粉",
	  "敌",
	  "略",
	  "客",
	  "袁",
	  "冷",
	  "胜",
	  "绝",
	  "析",
	  "块",
	  "剂",
	  "测",
	  "丝",
	  "协",
	  "诉",
	  "念",
	  "陈",
	  "仍",
	  "罗",
	  "盐",
	  "友",
	  "洋",
	  "错",
	  "苦",
	  "夜",
	  "刑",
	  "移",
	  "频",
	  "逐",
	  "靠",
	  "混",
	  "母",
	  "短",
	  "皮",
	  "终",
	  "聚",
	  "汽",
	  "村",
	  "云",
	  "哪",
	  "既",
	  "距",
	  "卫",
	  "停",
	  "烈",
	  "央",
	  "察",
	  "烧",
	  "迅",
	  "境",
	  "若",
	  "印",
	  "洲",
	  "刻",
	  "括",
	  "激",
	  "孔",
	  "搞",
	  "甚",
	  "室",
	  "待",
	  "核",
	  "校",
	  "散",
	  "侵",
	  "吧",
	  "甲",
	  "游",
	  "久",
	  "菜",
	  "味",
	  "旧",
	  "模",
	  "湖",
	  "货",
	  "损",
	  "预",
	  "阻",
	  "毫",
	  "普",
	  "稳",
	  "乙",
	  "妈",
	  "植",
	  "息",
	  "扩",
	  "银",
	  "语",
	  "挥",
	  "酒",
	  "守",
	  "拿",
	  "序",
	  "纸",
	  "医",
	  "缺",
	  "雨",
	  "吗",
	  "针",
	  "刘",
	  "啊",
	  "急",
	  "唱",
	  "误",
	  "训",
	  "愿",
	  "审",
	  "附",
	  "获",
	  "茶",
	  "鲜",
	  "粮",
	  "斤",
	  "孩",
	  "脱",
	  "硫",
	  "肥",
	  "善",
	  "龙",
	  "演",
	  "父",
	  "渐",
	  "血",
	  "欢",
	  "械",
	  "掌",
	  "歌",
	  "沙",
	  "刚",
	  "攻",
	  "谓",
	  "盾",
	  "讨",
	  "晚",
	  "粒",
	  "乱",
	  "燃",
	  "矛",
	  "乎",
	  "杀",
	  "药",
	  "宁",
	  "鲁",
	  "贵",
	  "钟",
	  "煤",
	  "读",
	  "班",
	  "伯",
	  "香",
	  "介",
	  "迫",
	  "句",
	  "丰",
	  "培",
	  "握",
	  "兰",
	  "担",
	  "弦",
	  "蛋",
	  "沉",
	  "假",
	  "穿",
	  "执",
	  "答",
	  "乐",
	  "谁",
	  "顺",
	  "烟",
	  "缩",
	  "征",
	  "脸",
	  "喜",
	  "松",
	  "脚",
	  "困",
	  "异",
	  "免",
	  "背",
	  "星",
	  "福",
	  "买",
	  "染",
	  "井",
	  "概",
	  "慢",
	  "怕",
	  "磁",
	  "倍",
	  "祖",
	  "皇",
	  "促",
	  "静",
	  "补",
	  "评",
	  "翻",
	  "肉",
	  "践",
	  "尼",
	  "衣",
	  "宽",
	  "扬",
	  "棉",
	  "希",
	  "伤",
	  "操",
	  "垂",
	  "秋",
	  "宜",
	  "氢",
	  "套",
	  "督",
	  "振",
	  "架",
	  "亮",
	  "末",
	  "宪",
	  "庆",
	  "编",
	  "牛",
	  "触",
	  "映",
	  "雷",
	  "销",
	  "诗",
	  "座",
	  "居",
	  "抓",
	  "裂",
	  "胞",
	  "呼",
	  "娘",
	  "景",
	  "威",
	  "绿",
	  "晶",
	  "厚",
	  "盟",
	  "衡",
	  "鸡",
	  "孙",
	  "延",
	  "危",
	  "胶",
	  "屋",
	  "乡",
	  "临",
	  "陆",
	  "顾",
	  "掉",
	  "呀",
	  "灯",
	  "岁",
	  "措",
	  "束",
	  "耐",
	  "剧",
	  "玉",
	  "赵",
	  "跳",
	  "哥",
	  "季",
	  "课",
	  "凯",
	  "胡",
	  "额",
	  "款",
	  "绍",
	  "卷",
	  "齐",
	  "伟",
	  "蒸",
	  "殖",
	  "永",
	  "宗",
	  "苗",
	  "川",
	  "炉",
	  "岩",
	  "弱",
	  "零",
	  "杨",
	  "奏",
	  "沿",
	  "露",
	  "杆",
	  "探",
	  "滑",
	  "镇",
	  "饭",
	  "浓",
	  "航",
	  "怀",
	  "赶",
	  "库",
	  "夺",
	  "伊",
	  "灵",
	  "税",
	  "途",
	  "灭",
	  "赛",
	  "归",
	  "召",
	  "鼓",
	  "播",
	  "盘",
	  "裁",
	  "险",
	  "康",
	  "唯",
	  "录",
	  "菌",
	  "纯",
	  "借",
	  "糖",
	  "盖",
	  "横",
	  "符",
	  "私",
	  "努",
	  "堂",
	  "域",
	  "枪",
	  "润",
	  "幅",
	  "哈",
	  "竟",
	  "熟",
	  "虫",
	  "泽",
	  "脑",
	  "壤",
	  "碳",
	  "欧",
	  "遍",
	  "侧",
	  "寨",
	  "敢",
	  "彻",
	  "虑",
	  "斜",
	  "薄",
	  "庭",
	  "纳",
	  "弹",
	  "饲",
	  "伸",
	  "折",
	  "麦",
	  "湿",
	  "暗",
	  "荷",
	  "瓦",
	  "塞",
	  "床",
	  "筑",
	  "恶",
	  "户",
	  "访",
	  "塔",
	  "奇",
	  "透",
	  "梁",
	  "刀",
	  "旋",
	  "迹",
	  "卡",
	  "氯",
	  "遇",
	  "份",
	  "毒",
	  "泥",
	  "退",
	  "洗",
	  "摆",
	  "灰",
	  "彩",
	  "卖",
	  "耗",
	  "夏",
	  "择",
	  "忙",
	  "铜",
	  "献",
	  "硬",
	  "予",
	  "繁",
	  "圈",
	  "雪",
	  "函",
	  "亦",
	  "抽",
	  "篇",
	  "阵",
	  "阴",
	  "丁",
	  "尺",
	  "追",
	  "堆",
	  "雄",
	  "迎",
	  "泛",
	  "爸",
	  "楼",
	  "避",
	  "谋",
	  "吨",
	  "野",
	  "猪",
	  "旗",
	  "累",
	  "偏",
	  "典",
	  "馆",
	  "索",
	  "秦",
	  "脂",
	  "潮",
	  "爷",
	  "豆",
	  "忽",
	  "托",
	  "惊",
	  "塑",
	  "遗",
	  "愈",
	  "朱",
	  "替",
	  "纤",
	  "粗",
	  "倾",
	  "尚",
	  "痛",
	  "楚",
	  "谢",
	  "奋",
	  "购",
	  "磨",
	  "君",
	  "池",
	  "旁",
	  "碎",
	  "骨",
	  "监",
	  "捕",
	  "弟",
	  "暴",
	  "割",
	  "贯",
	  "殊",
	  "释",
	  "词",
	  "亡",
	  "壁",
	  "顿",
	  "宝",
	  "午",
	  "尘",
	  "闻",
	  "揭",
	  "炮",
	  "残",
	  "冬",
	  "桥",
	  "妇",
	  "警",
	  "综",
	  "招",
	  "吴",
	  "付",
	  "浮",
	  "遭",
	  "徐",
	  "您",
	  "摇",
	  "谷",
	  "赞",
	  "箱",
	  "隔",
	  "订",
	  "男",
	  "吹",
	  "园",
	  "纷",
	  "唐",
	  "败",
	  "宋",
	  "玻",
	  "巨",
	  "耕",
	  "坦",
	  "荣",
	  "闭",
	  "湾",
	  "键",
	  "凡",
	  "驻",
	  "锅",
	  "救",
	  "恩",
	  "剥",
	  "凝",
	  "碱",
	  "齿",
	  "截",
	  "炼",
	  "麻",
	  "纺",
	  "禁",
	  "废",
	  "盛",
	  "版",
	  "缓",
	  "净",
	  "睛",
	  "昌",
	  "婚",
	  "涉",
	  "筒",
	  "嘴",
	  "插",
	  "岸",
	  "朗",
	  "庄",
	  "街",
	  "藏",
	  "姑",
	  "贸",
	  "腐",
	  "奴",
	  "啦",
	  "惯",
	  "乘",
	  "伙",
	  "恢",
	  "匀",
	  "纱",
	  "扎",
	  "辩",
	  "耳",
	  "彪",
	  "臣",
	  "亿",
	  "璃",
	  "抵",
	  "脉",
	  "秀",
	  "萨",
	  "俄",
	  "网",
	  "舞",
	  "店",
	  "喷",
	  "纵",
	  "寸",
	  "汗",
	  "挂",
	  "洪",
	  "贺",
	  "闪",
	  "柬",
	  "爆",
	  "烯",
	  "津",
	  "稻",
	  "墙",
	  "软",
	  "勇",
	  "像",
	  "滚",
	  "厘",
	  "蒙",
	  "芳",
	  "肯",
	  "坡",
	  "柱",
	  "荡",
	  "腿",
	  "仪",
	  "旅",
	  "尾",
	  "轧",
	  "冰",
	  "贡",
	  "登",
	  "黎",
	  "削",
	  "钻",
	  "勒",
	  "逃",
	  "障",
	  "氨",
	  "郭",
	  "峰",
	  "币",
	  "港",
	  "伏",
	  "轨",
	  "亩",
	  "毕",
	  "擦",
	  "莫",
	  "刺",
	  "浪",
	  "秘",
	  "援",
	  "株",
	  "健",
	  "售",
	  "股",
	  "岛",
	  "甘",
	  "泡",
	  "睡",
	  "童",
	  "铸",
	  "汤",
	  "阀",
	  "休",
	  "汇",
	  "舍",
	  "牧",
	  "绕",
	  "炸",
	  "哲",
	  "磷",
	  "绩",
	  "朋",
	  "淡",
	  "尖",
	  "启",
	  "陷",
	  "柴",
	  "呈",
	  "徒",
	  "颜",
	  "泪",
	  "稍",
	  "忘",
	  "泵",
	  "蓝",
	  "拖",
	  "洞",
	  "授",
	  "镜",
	  "辛",
	  "壮",
	  "锋",
	  "贫",
	  "虚",
	  "弯",
	  "摩",
	  "泰",
	  "幼",
	  "廷",
	  "尊",
	  "窗",
	  "纲",
	  "弄",
	  "隶",
	  "疑",
	  "氏",
	  "宫",
	  "姐",
	  "震",
	  "瑞",
	  "怪",
	  "尤",
	  "琴",
	  "循",
	  "描",
	  "膜",
	  "违",
	  "夹",
	  "腰",
	  "缘",
	  "珠",
	  "穷",
	  "森",
	  "枝",
	  "竹",
	  "沟",
	  "催",
	  "绳",
	  "忆",
	  "邦",
	  "剩",
	  "幸",
	  "浆",
	  "栏",
	  "拥",
	  "牙",
	  "贮",
	  "礼",
	  "滤",
	  "钠",
	  "纹",
	  "罢",
	  "拍",
	  "咱",
	  "喊",
	  "袖",
	  "埃",
	  "勤",
	  "罚",
	  "焦",
	  "潜",
	  "伍",
	  "墨",
	  "欲",
	  "缝",
	  "姓",
	  "刊",
	  "饱",
	  "仿",
	  "奖",
	  "铝",
	  "鬼",
	  "丽",
	  "跨",
	  "默",
	  "挖",
	  "链",
	  "扫",
	  "喝",
	  "袋",
	  "炭",
	  "污",
	  "幕",
	  "诸",
	  "弧",
	  "励",
	  "梅",
	  "奶",
	  "洁",
	  "灾",
	  "舟",
	  "鉴",
	  "苯",
	  "讼",
	  "抱",
	  "毁",
	  "懂",
	  "寒",
	  "智",
	  "埔",
	  "寄",
	  "届",
	  "跃",
	  "渡",
	  "挑",
	  "丹",
	  "艰",
	  "贝",
	  "碰",
	  "拔",
	  "爹",
	  "戴",
	  "码",
	  "梦",
	  "芽",
	  "熔",
	  "赤",
	  "渔",
	  "哭",
	  "敬",
	  "颗",
	  "奔",
	  "铅",
	  "仲",
	  "虎",
	  "稀",
	  "妹",
	  "乏",
	  "珍",
	  "申",
	  "桌",
	  "遵",
	  "允",
	  "隆",
	  "螺",
	  "仓",
	  "魏",
	  "锐",
	  "晓",
	  "氮",
	  "兼",
	  "隐",
	  "碍",
	  "赫",
	  "拨",
	  "忠",
	  "肃",
	  "缸",
	  "牵",
	  "抢",
	  "博",
	  "巧",
	  "壳",
	  "兄",
	  "杜",
	  "讯",
	  "诚",
	  "碧",
	  "祥",
	  "柯",
	  "页",
	  "巡",
	  "矩",
	  "悲",
	  "灌",
	  "龄",
	  "伦",
	  "票",
	  "寻",
	  "桂",
	  "铺",
	  "圣",
	  "恐",
	  "恰",
	  "郑",
	  "趣",
	  "抬",
	  "荒",
	  "腾",
	  "贴",
	  "柔",
	  "滴",
	  "猛",
	  "阔",
	  "辆",
	  "妻",
	  "填",
	  "撤",
	  "储",
	  "签",
	  "闹",
	  "扰",
	  "紫",
	  "砂",
	  "递",
	  "戏",
	  "吊",
	  "陶",
	  "伐",
	  "喂",
	  "疗",
	  "瓶",
	  "婆",
	  "抚",
	  "臂",
	  "摸",
	  "忍",
	  "虾",
	  "蜡",
	  "邻",
	  "胸",
	  "巩",
	  "挤",
	  "偶",
	  "弃",
	  "槽",
	  "劲",
	  "乳",
	  "邓",
	  "吉",
	  "仁",
	  "烂",
	  "砖",
	  "租",
	  "乌",
	  "舰",
	  "伴",
	  "瓜",
	  "浅",
	  "丙",
	  "暂",
	  "燥",
	  "橡",
	  "柳",
	  "迷",
	  "暖",
	  "牌",
	  "秧",
	  "胆",
	  "详",
	  "簧",
	  "踏",
	  "瓷",
	  "谱",
	  "呆",
	  "宾",
	  "糊",
	  "洛",
	  "辉",
	  "愤",
	  "竞",
	  "隙",
	  "怒",
	  "粘",
	  "乃",
	  "绪",
	  "肩",
	  "籍",
	  "敏",
	  "涂",
	  "熙",
	  "皆",
	  "侦",
	  "悬",
	  "掘",
	  "享",
	  "纠",
	  "醒",
	  "狂",
	  "锁",
	  "淀",
	  "恨",
	  "牲",
	  "霸",
	  "爬",
	  "赏",
	  "逆",
	  "玩",
	  "陵",
	  "祝",
	  "秒",
	  "浙",
	  "貌",
	  "役",
	  "彼",
	  "悉",
	  "鸭",
	  "趋",
	  "凤",
	  "晨",
	  "畜",
	  "辈",
	  "秩",
	  "卵",
	  "署",
	  "梯",
	  "炎",
	  "滩",
	  "棋",
	  "驱",
	  "筛",
	  "峡",
	  "冒",
	  "啥",
	  "寿",
	  "译",
	  "浸",
	  "泉",
	  "帽",
	  "迟",
	  "硅",
	  "疆",
	  "贷",
	  "漏",
	  "稿",
	  "冠",
	  "嫩",
	  "胁",
	  "芯",
	  "牢",
	  "叛",
	  "蚀",
	  "奥",
	  "鸣",
	  "岭",
	  "羊",
	  "凭",
	  "串",
	  "塘",
	  "绘",
	  "酵",
	  "融",
	  "盆",
	  "锡",
	  "庙",
	  "筹",
	  "冻",
	  "辅",
	  "摄",
	  "袭",
	  "筋",
	  "拒",
	  "僚",
	  "旱",
	  "钾",
	  "鸟",
	  "漆",
	  "沈",
	  "眉",
	  "疏",
	  "添",
	  "棒",
	  "穗",
	  "硝",
	  "韩",
	  "逼",
	  "扭",
	  "侨",
	  "凉",
	  "挺",
	  "碗",
	  "栽",
	  "炒",
	  "杯",
	  "患",
	  "馏",
	  "劝",
	  "豪",
	  "辽",
	  "勃",
	  "鸿",
	  "旦",
	  "吏",
	  "拜",
	  "狗",
	  "埋",
	  "辊",
	  "掩",
	  "饮",
	  "搬",
	  "骂",
	  "辞",
	  "勾",
	  "扣",
	  "估",
	  "蒋",
	  "绒",
	  "雾",
	  "丈",
	  "朵",
	  "姆",
	  "拟",
	  "宇",
	  "辑",
	  "陕",
	  "雕",
	  "偿",
	  "蓄",
	  "崇",
	  "剪",
	  "倡",
	  "厅",
	  "咬",
	  "驶",
	  "薯",
	  "刷",
	  "斥",
	  "番",
	  "赋",
	  "奉",
	  "佛",
	  "浇",
	  "漫",
	  "曼",
	  "扇",
	  "钙",
	  "桃",
	  "扶",
	  "仔",
	  "返",
	  "俗",
	  "亏",
	  "腔",
	  "鞋",
	  "棱",
	  "覆",
	  "框",
	  "悄",
	  "叔",
	  "撞",
	  "骗",
	  "勘",
	  "旺",
	  "沸",
	  "孤",
	  "吐",
	  "孟",
	  "渠",
	  "屈",
	  "疾",
	  "妙",
	  "惜",
	  "仰",
	  "狠",
	  "胀",
	  "谐",
	  "抛",
	  "霉",
	  "桑",
	  "岗",
	  "嘛",
	  "衰",
	  "盗",
	  "渗",
	  "脏",
	  "赖",
	  "涌",
	  "甜",
	  "曹",
	  "阅",
	  "肌",
	  "哩",
	  "厉",
	  "烃",
	  "纬",
	  "毅",
	  "昨",
	  "伪",
	  "症",
	  "煮",
	  "叹",
	  "钉",
	  "搭",
	  "茎",
	  "笼",
	  "酷",
	  "偷",
	  "弓",
	  "锥",
	  "恒",
	  "杰",
	  "坑",
	  "鼻",
	  "翼",
	  "纶",
	  "叙",
	  "狱",
	  "逮",
	  "罐",
	  "络",
	  "棚",
	  "抑",
	  "膨",
	  "蔬",
	  "寺",
	  "骤",
	  "穆",
	  "冶",
	  "枯",
	  "册",
	  "尸",
	  "凸",
	  "绅",
	  "坯",
	  "牺",
	  "焰",
	  "轰",
	  "欣",
	  "晋",
	  "瘦",
	  "御",
	  "锭",
	  "锦",
	  "丧",
	  "旬",
	  "锻",
	  "垄",
	  "搜",
	  "扑",
	  "邀",
	  "亭",
	  "酯",
	  "迈",
	  "舒",
	  "脆",
	  "酶",
	  "闲",
	  "忧",
	  "酚",
	  "顽",
	  "羽",
	  "涨",
	  "卸",
	  "仗",
	  "陪",
	  "辟",
	  "惩",
	  "杭",
	  "姚",
	  "肚",
	  "捉",
	  "飘",
	  "漂",
	  "昆",
	  "欺",
	  "吾",
	  "郎",
	  "烷",
	  "汁",
	  "呵",
	  "饰",
	  "萧",
	  "雅",
	  "邮",
	  "迁",
	  "燕",
	  "撒",
	  "姻",
	  "赴",
	  "宴",
	  "烦",
	  "债",
	  "帐",
	  "斑",
	  "铃",
	  "旨",
	  "醇",
	  "董",
	  "饼",
	  "雏",
	  "姿",
	  "拌",
	  "傅",
	  "腹",
	  "妥",
	  "揉",
	  "贤",
	  "拆",
	  "歪",
	  "葡",
	  "胺",
	  "丢",
	  "浩",
	  "徽",
	  "昂",
	  "垫",
	  "挡",
	  "览",
	  "贪",
	  "慰",
	  "缴",
	  "汪",
	  "慌",
	  "冯",
	  "诺",
	  "姜",
	  "谊",
	  "凶",
	  "劣",
	  "诬",
	  "耀",
	  "昏",
	  "躺",
	  "盈",
	  "骑",
	  "乔",
	  "溪",
	  "丛",
	  "卢",
	  "抹",
	  "闷",
	  "咨",
	  "刮",
	  "驾",
	  "缆",
	  "悟",
	  "摘",
	  "铒",
	  "掷",
	  "颇",
	  "幻",
	  "柄",
	  "惠",
	  "惨",
	  "佳",
	  "仇",
	  "腊",
	  "窝",
	  "涤",
	  "剑",
	  "瞧",
	  "堡",
	  "泼",
	  "葱",
	  "罩",
	  "霍",
	  "捞",
	  "胎",
	  "苍",
	  "滨",
	  "俩",
	  "捅",
	  "湘",
	  "砍",
	  "霞",
	  "邵",
	  "萄",
	  "疯",
	  "淮",
	  "遂",
	  "熊",
	  "粪",
	  "烘",
	  "宿",
	  "档",
	  "戈",
	  "驳",
	  "嫂",
	  "裕",
	  "徙",
	  "箭",
	  "捐",
	  "肠",
	  "撑",
	  "晒",
	  "辨",
	  "殿",
	  "莲",
	  "摊",
	  "搅",
	  "酱",
	  "屏",
	  "疫",
	  "哀",
	  "蔡",
	  "堵",
	  "沫",
	  "皱",
	  "畅",
	  "叠",
	  "阁",
	  "莱",
	  "敲",
	  "辖",
	  "钩",
	  "痕",
	  "坝",
	  "巷",
	  "饿",
	  "祸",
	  "丘",
	  "玄",
	  "溜",
	  "曰",
	  "逻",
	  "彭",
	  "尝",
	  "卿",
	  "妨",
	  "艇",
	  "吞",
	  "韦",
	  "怨",
	  "矮",
	  "歇"
	]
	;

	var chinese_simplified$1 = /*#__PURE__*/Object.freeze({
		default: chinese_simplified
	});

	var chinese_traditional = [
	  "的",
	  "一",
	  "是",
	  "在",
	  "不",
	  "了",
	  "有",
	  "和",
	  "人",
	  "這",
	  "中",
	  "大",
	  "為",
	  "上",
	  "個",
	  "國",
	  "我",
	  "以",
	  "要",
	  "他",
	  "時",
	  "來",
	  "用",
	  "們",
	  "生",
	  "到",
	  "作",
	  "地",
	  "於",
	  "出",
	  "就",
	  "分",
	  "對",
	  "成",
	  "會",
	  "可",
	  "主",
	  "發",
	  "年",
	  "動",
	  "同",
	  "工",
	  "也",
	  "能",
	  "下",
	  "過",
	  "子",
	  "說",
	  "產",
	  "種",
	  "面",
	  "而",
	  "方",
	  "後",
	  "多",
	  "定",
	  "行",
	  "學",
	  "法",
	  "所",
	  "民",
	  "得",
	  "經",
	  "十",
	  "三",
	  "之",
	  "進",
	  "著",
	  "等",
	  "部",
	  "度",
	  "家",
	  "電",
	  "力",
	  "裡",
	  "如",
	  "水",
	  "化",
	  "高",
	  "自",
	  "二",
	  "理",
	  "起",
	  "小",
	  "物",
	  "現",
	  "實",
	  "加",
	  "量",
	  "都",
	  "兩",
	  "體",
	  "制",
	  "機",
	  "當",
	  "使",
	  "點",
	  "從",
	  "業",
	  "本",
	  "去",
	  "把",
	  "性",
	  "好",
	  "應",
	  "開",
	  "它",
	  "合",
	  "還",
	  "因",
	  "由",
	  "其",
	  "些",
	  "然",
	  "前",
	  "外",
	  "天",
	  "政",
	  "四",
	  "日",
	  "那",
	  "社",
	  "義",
	  "事",
	  "平",
	  "形",
	  "相",
	  "全",
	  "表",
	  "間",
	  "樣",
	  "與",
	  "關",
	  "各",
	  "重",
	  "新",
	  "線",
	  "內",
	  "數",
	  "正",
	  "心",
	  "反",
	  "你",
	  "明",
	  "看",
	  "原",
	  "又",
	  "麼",
	  "利",
	  "比",
	  "或",
	  "但",
	  "質",
	  "氣",
	  "第",
	  "向",
	  "道",
	  "命",
	  "此",
	  "變",
	  "條",
	  "只",
	  "沒",
	  "結",
	  "解",
	  "問",
	  "意",
	  "建",
	  "月",
	  "公",
	  "無",
	  "系",
	  "軍",
	  "很",
	  "情",
	  "者",
	  "最",
	  "立",
	  "代",
	  "想",
	  "已",
	  "通",
	  "並",
	  "提",
	  "直",
	  "題",
	  "黨",
	  "程",
	  "展",
	  "五",
	  "果",
	  "料",
	  "象",
	  "員",
	  "革",
	  "位",
	  "入",
	  "常",
	  "文",
	  "總",
	  "次",
	  "品",
	  "式",
	  "活",
	  "設",
	  "及",
	  "管",
	  "特",
	  "件",
	  "長",
	  "求",
	  "老",
	  "頭",
	  "基",
	  "資",
	  "邊",
	  "流",
	  "路",
	  "級",
	  "少",
	  "圖",
	  "山",
	  "統",
	  "接",
	  "知",
	  "較",
	  "將",
	  "組",
	  "見",
	  "計",
	  "別",
	  "她",
	  "手",
	  "角",
	  "期",
	  "根",
	  "論",
	  "運",
	  "農",
	  "指",
	  "幾",
	  "九",
	  "區",
	  "強",
	  "放",
	  "決",
	  "西",
	  "被",
	  "幹",
	  "做",
	  "必",
	  "戰",
	  "先",
	  "回",
	  "則",
	  "任",
	  "取",
	  "據",
	  "處",
	  "隊",
	  "南",
	  "給",
	  "色",
	  "光",
	  "門",
	  "即",
	  "保",
	  "治",
	  "北",
	  "造",
	  "百",
	  "規",
	  "熱",
	  "領",
	  "七",
	  "海",
	  "口",
	  "東",
	  "導",
	  "器",
	  "壓",
	  "志",
	  "世",
	  "金",
	  "增",
	  "爭",
	  "濟",
	  "階",
	  "油",
	  "思",
	  "術",
	  "極",
	  "交",
	  "受",
	  "聯",
	  "什",
	  "認",
	  "六",
	  "共",
	  "權",
	  "收",
	  "證",
	  "改",
	  "清",
	  "美",
	  "再",
	  "採",
	  "轉",
	  "更",
	  "單",
	  "風",
	  "切",
	  "打",
	  "白",
	  "教",
	  "速",
	  "花",
	  "帶",
	  "安",
	  "場",
	  "身",
	  "車",
	  "例",
	  "真",
	  "務",
	  "具",
	  "萬",
	  "每",
	  "目",
	  "至",
	  "達",
	  "走",
	  "積",
	  "示",
	  "議",
	  "聲",
	  "報",
	  "鬥",
	  "完",
	  "類",
	  "八",
	  "離",
	  "華",
	  "名",
	  "確",
	  "才",
	  "科",
	  "張",
	  "信",
	  "馬",
	  "節",
	  "話",
	  "米",
	  "整",
	  "空",
	  "元",
	  "況",
	  "今",
	  "集",
	  "溫",
	  "傳",
	  "土",
	  "許",
	  "步",
	  "群",
	  "廣",
	  "石",
	  "記",
	  "需",
	  "段",
	  "研",
	  "界",
	  "拉",
	  "林",
	  "律",
	  "叫",
	  "且",
	  "究",
	  "觀",
	  "越",
	  "織",
	  "裝",
	  "影",
	  "算",
	  "低",
	  "持",
	  "音",
	  "眾",
	  "書",
	  "布",
	  "复",
	  "容",
	  "兒",
	  "須",
	  "際",
	  "商",
	  "非",
	  "驗",
	  "連",
	  "斷",
	  "深",
	  "難",
	  "近",
	  "礦",
	  "千",
	  "週",
	  "委",
	  "素",
	  "技",
	  "備",
	  "半",
	  "辦",
	  "青",
	  "省",
	  "列",
	  "習",
	  "響",
	  "約",
	  "支",
	  "般",
	  "史",
	  "感",
	  "勞",
	  "便",
	  "團",
	  "往",
	  "酸",
	  "歷",
	  "市",
	  "克",
	  "何",
	  "除",
	  "消",
	  "構",
	  "府",
	  "稱",
	  "太",
	  "準",
	  "精",
	  "值",
	  "號",
	  "率",
	  "族",
	  "維",
	  "劃",
	  "選",
	  "標",
	  "寫",
	  "存",
	  "候",
	  "毛",
	  "親",
	  "快",
	  "效",
	  "斯",
	  "院",
	  "查",
	  "江",
	  "型",
	  "眼",
	  "王",
	  "按",
	  "格",
	  "養",
	  "易",
	  "置",
	  "派",
	  "層",
	  "片",
	  "始",
	  "卻",
	  "專",
	  "狀",
	  "育",
	  "廠",
	  "京",
	  "識",
	  "適",
	  "屬",
	  "圓",
	  "包",
	  "火",
	  "住",
	  "調",
	  "滿",
	  "縣",
	  "局",
	  "照",
	  "參",
	  "紅",
	  "細",
	  "引",
	  "聽",
	  "該",
	  "鐵",
	  "價",
	  "嚴",
	  "首",
	  "底",
	  "液",
	  "官",
	  "德",
	  "隨",
	  "病",
	  "蘇",
	  "失",
	  "爾",
	  "死",
	  "講",
	  "配",
	  "女",
	  "黃",
	  "推",
	  "顯",
	  "談",
	  "罪",
	  "神",
	  "藝",
	  "呢",
	  "席",
	  "含",
	  "企",
	  "望",
	  "密",
	  "批",
	  "營",
	  "項",
	  "防",
	  "舉",
	  "球",
	  "英",
	  "氧",
	  "勢",
	  "告",
	  "李",
	  "台",
	  "落",
	  "木",
	  "幫",
	  "輪",
	  "破",
	  "亞",
	  "師",
	  "圍",
	  "注",
	  "遠",
	  "字",
	  "材",
	  "排",
	  "供",
	  "河",
	  "態",
	  "封",
	  "另",
	  "施",
	  "減",
	  "樹",
	  "溶",
	  "怎",
	  "止",
	  "案",
	  "言",
	  "士",
	  "均",
	  "武",
	  "固",
	  "葉",
	  "魚",
	  "波",
	  "視",
	  "僅",
	  "費",
	  "緊",
	  "愛",
	  "左",
	  "章",
	  "早",
	  "朝",
	  "害",
	  "續",
	  "輕",
	  "服",
	  "試",
	  "食",
	  "充",
	  "兵",
	  "源",
	  "判",
	  "護",
	  "司",
	  "足",
	  "某",
	  "練",
	  "差",
	  "致",
	  "板",
	  "田",
	  "降",
	  "黑",
	  "犯",
	  "負",
	  "擊",
	  "范",
	  "繼",
	  "興",
	  "似",
	  "餘",
	  "堅",
	  "曲",
	  "輸",
	  "修",
	  "故",
	  "城",
	  "夫",
	  "夠",
	  "送",
	  "筆",
	  "船",
	  "佔",
	  "右",
	  "財",
	  "吃",
	  "富",
	  "春",
	  "職",
	  "覺",
	  "漢",
	  "畫",
	  "功",
	  "巴",
	  "跟",
	  "雖",
	  "雜",
	  "飛",
	  "檢",
	  "吸",
	  "助",
	  "昇",
	  "陽",
	  "互",
	  "初",
	  "創",
	  "抗",
	  "考",
	  "投",
	  "壞",
	  "策",
	  "古",
	  "徑",
	  "換",
	  "未",
	  "跑",
	  "留",
	  "鋼",
	  "曾",
	  "端",
	  "責",
	  "站",
	  "簡",
	  "述",
	  "錢",
	  "副",
	  "盡",
	  "帝",
	  "射",
	  "草",
	  "衝",
	  "承",
	  "獨",
	  "令",
	  "限",
	  "阿",
	  "宣",
	  "環",
	  "雙",
	  "請",
	  "超",
	  "微",
	  "讓",
	  "控",
	  "州",
	  "良",
	  "軸",
	  "找",
	  "否",
	  "紀",
	  "益",
	  "依",
	  "優",
	  "頂",
	  "礎",
	  "載",
	  "倒",
	  "房",
	  "突",
	  "坐",
	  "粉",
	  "敵",
	  "略",
	  "客",
	  "袁",
	  "冷",
	  "勝",
	  "絕",
	  "析",
	  "塊",
	  "劑",
	  "測",
	  "絲",
	  "協",
	  "訴",
	  "念",
	  "陳",
	  "仍",
	  "羅",
	  "鹽",
	  "友",
	  "洋",
	  "錯",
	  "苦",
	  "夜",
	  "刑",
	  "移",
	  "頻",
	  "逐",
	  "靠",
	  "混",
	  "母",
	  "短",
	  "皮",
	  "終",
	  "聚",
	  "汽",
	  "村",
	  "雲",
	  "哪",
	  "既",
	  "距",
	  "衛",
	  "停",
	  "烈",
	  "央",
	  "察",
	  "燒",
	  "迅",
	  "境",
	  "若",
	  "印",
	  "洲",
	  "刻",
	  "括",
	  "激",
	  "孔",
	  "搞",
	  "甚",
	  "室",
	  "待",
	  "核",
	  "校",
	  "散",
	  "侵",
	  "吧",
	  "甲",
	  "遊",
	  "久",
	  "菜",
	  "味",
	  "舊",
	  "模",
	  "湖",
	  "貨",
	  "損",
	  "預",
	  "阻",
	  "毫",
	  "普",
	  "穩",
	  "乙",
	  "媽",
	  "植",
	  "息",
	  "擴",
	  "銀",
	  "語",
	  "揮",
	  "酒",
	  "守",
	  "拿",
	  "序",
	  "紙",
	  "醫",
	  "缺",
	  "雨",
	  "嗎",
	  "針",
	  "劉",
	  "啊",
	  "急",
	  "唱",
	  "誤",
	  "訓",
	  "願",
	  "審",
	  "附",
	  "獲",
	  "茶",
	  "鮮",
	  "糧",
	  "斤",
	  "孩",
	  "脫",
	  "硫",
	  "肥",
	  "善",
	  "龍",
	  "演",
	  "父",
	  "漸",
	  "血",
	  "歡",
	  "械",
	  "掌",
	  "歌",
	  "沙",
	  "剛",
	  "攻",
	  "謂",
	  "盾",
	  "討",
	  "晚",
	  "粒",
	  "亂",
	  "燃",
	  "矛",
	  "乎",
	  "殺",
	  "藥",
	  "寧",
	  "魯",
	  "貴",
	  "鐘",
	  "煤",
	  "讀",
	  "班",
	  "伯",
	  "香",
	  "介",
	  "迫",
	  "句",
	  "豐",
	  "培",
	  "握",
	  "蘭",
	  "擔",
	  "弦",
	  "蛋",
	  "沉",
	  "假",
	  "穿",
	  "執",
	  "答",
	  "樂",
	  "誰",
	  "順",
	  "煙",
	  "縮",
	  "徵",
	  "臉",
	  "喜",
	  "松",
	  "腳",
	  "困",
	  "異",
	  "免",
	  "背",
	  "星",
	  "福",
	  "買",
	  "染",
	  "井",
	  "概",
	  "慢",
	  "怕",
	  "磁",
	  "倍",
	  "祖",
	  "皇",
	  "促",
	  "靜",
	  "補",
	  "評",
	  "翻",
	  "肉",
	  "踐",
	  "尼",
	  "衣",
	  "寬",
	  "揚",
	  "棉",
	  "希",
	  "傷",
	  "操",
	  "垂",
	  "秋",
	  "宜",
	  "氫",
	  "套",
	  "督",
	  "振",
	  "架",
	  "亮",
	  "末",
	  "憲",
	  "慶",
	  "編",
	  "牛",
	  "觸",
	  "映",
	  "雷",
	  "銷",
	  "詩",
	  "座",
	  "居",
	  "抓",
	  "裂",
	  "胞",
	  "呼",
	  "娘",
	  "景",
	  "威",
	  "綠",
	  "晶",
	  "厚",
	  "盟",
	  "衡",
	  "雞",
	  "孫",
	  "延",
	  "危",
	  "膠",
	  "屋",
	  "鄉",
	  "臨",
	  "陸",
	  "顧",
	  "掉",
	  "呀",
	  "燈",
	  "歲",
	  "措",
	  "束",
	  "耐",
	  "劇",
	  "玉",
	  "趙",
	  "跳",
	  "哥",
	  "季",
	  "課",
	  "凱",
	  "胡",
	  "額",
	  "款",
	  "紹",
	  "卷",
	  "齊",
	  "偉",
	  "蒸",
	  "殖",
	  "永",
	  "宗",
	  "苗",
	  "川",
	  "爐",
	  "岩",
	  "弱",
	  "零",
	  "楊",
	  "奏",
	  "沿",
	  "露",
	  "桿",
	  "探",
	  "滑",
	  "鎮",
	  "飯",
	  "濃",
	  "航",
	  "懷",
	  "趕",
	  "庫",
	  "奪",
	  "伊",
	  "靈",
	  "稅",
	  "途",
	  "滅",
	  "賽",
	  "歸",
	  "召",
	  "鼓",
	  "播",
	  "盤",
	  "裁",
	  "險",
	  "康",
	  "唯",
	  "錄",
	  "菌",
	  "純",
	  "借",
	  "糖",
	  "蓋",
	  "橫",
	  "符",
	  "私",
	  "努",
	  "堂",
	  "域",
	  "槍",
	  "潤",
	  "幅",
	  "哈",
	  "竟",
	  "熟",
	  "蟲",
	  "澤",
	  "腦",
	  "壤",
	  "碳",
	  "歐",
	  "遍",
	  "側",
	  "寨",
	  "敢",
	  "徹",
	  "慮",
	  "斜",
	  "薄",
	  "庭",
	  "納",
	  "彈",
	  "飼",
	  "伸",
	  "折",
	  "麥",
	  "濕",
	  "暗",
	  "荷",
	  "瓦",
	  "塞",
	  "床",
	  "築",
	  "惡",
	  "戶",
	  "訪",
	  "塔",
	  "奇",
	  "透",
	  "梁",
	  "刀",
	  "旋",
	  "跡",
	  "卡",
	  "氯",
	  "遇",
	  "份",
	  "毒",
	  "泥",
	  "退",
	  "洗",
	  "擺",
	  "灰",
	  "彩",
	  "賣",
	  "耗",
	  "夏",
	  "擇",
	  "忙",
	  "銅",
	  "獻",
	  "硬",
	  "予",
	  "繁",
	  "圈",
	  "雪",
	  "函",
	  "亦",
	  "抽",
	  "篇",
	  "陣",
	  "陰",
	  "丁",
	  "尺",
	  "追",
	  "堆",
	  "雄",
	  "迎",
	  "泛",
	  "爸",
	  "樓",
	  "避",
	  "謀",
	  "噸",
	  "野",
	  "豬",
	  "旗",
	  "累",
	  "偏",
	  "典",
	  "館",
	  "索",
	  "秦",
	  "脂",
	  "潮",
	  "爺",
	  "豆",
	  "忽",
	  "托",
	  "驚",
	  "塑",
	  "遺",
	  "愈",
	  "朱",
	  "替",
	  "纖",
	  "粗",
	  "傾",
	  "尚",
	  "痛",
	  "楚",
	  "謝",
	  "奮",
	  "購",
	  "磨",
	  "君",
	  "池",
	  "旁",
	  "碎",
	  "骨",
	  "監",
	  "捕",
	  "弟",
	  "暴",
	  "割",
	  "貫",
	  "殊",
	  "釋",
	  "詞",
	  "亡",
	  "壁",
	  "頓",
	  "寶",
	  "午",
	  "塵",
	  "聞",
	  "揭",
	  "炮",
	  "殘",
	  "冬",
	  "橋",
	  "婦",
	  "警",
	  "綜",
	  "招",
	  "吳",
	  "付",
	  "浮",
	  "遭",
	  "徐",
	  "您",
	  "搖",
	  "谷",
	  "贊",
	  "箱",
	  "隔",
	  "訂",
	  "男",
	  "吹",
	  "園",
	  "紛",
	  "唐",
	  "敗",
	  "宋",
	  "玻",
	  "巨",
	  "耕",
	  "坦",
	  "榮",
	  "閉",
	  "灣",
	  "鍵",
	  "凡",
	  "駐",
	  "鍋",
	  "救",
	  "恩",
	  "剝",
	  "凝",
	  "鹼",
	  "齒",
	  "截",
	  "煉",
	  "麻",
	  "紡",
	  "禁",
	  "廢",
	  "盛",
	  "版",
	  "緩",
	  "淨",
	  "睛",
	  "昌",
	  "婚",
	  "涉",
	  "筒",
	  "嘴",
	  "插",
	  "岸",
	  "朗",
	  "莊",
	  "街",
	  "藏",
	  "姑",
	  "貿",
	  "腐",
	  "奴",
	  "啦",
	  "慣",
	  "乘",
	  "夥",
	  "恢",
	  "勻",
	  "紗",
	  "扎",
	  "辯",
	  "耳",
	  "彪",
	  "臣",
	  "億",
	  "璃",
	  "抵",
	  "脈",
	  "秀",
	  "薩",
	  "俄",
	  "網",
	  "舞",
	  "店",
	  "噴",
	  "縱",
	  "寸",
	  "汗",
	  "掛",
	  "洪",
	  "賀",
	  "閃",
	  "柬",
	  "爆",
	  "烯",
	  "津",
	  "稻",
	  "牆",
	  "軟",
	  "勇",
	  "像",
	  "滾",
	  "厘",
	  "蒙",
	  "芳",
	  "肯",
	  "坡",
	  "柱",
	  "盪",
	  "腿",
	  "儀",
	  "旅",
	  "尾",
	  "軋",
	  "冰",
	  "貢",
	  "登",
	  "黎",
	  "削",
	  "鑽",
	  "勒",
	  "逃",
	  "障",
	  "氨",
	  "郭",
	  "峰",
	  "幣",
	  "港",
	  "伏",
	  "軌",
	  "畝",
	  "畢",
	  "擦",
	  "莫",
	  "刺",
	  "浪",
	  "秘",
	  "援",
	  "株",
	  "健",
	  "售",
	  "股",
	  "島",
	  "甘",
	  "泡",
	  "睡",
	  "童",
	  "鑄",
	  "湯",
	  "閥",
	  "休",
	  "匯",
	  "舍",
	  "牧",
	  "繞",
	  "炸",
	  "哲",
	  "磷",
	  "績",
	  "朋",
	  "淡",
	  "尖",
	  "啟",
	  "陷",
	  "柴",
	  "呈",
	  "徒",
	  "顏",
	  "淚",
	  "稍",
	  "忘",
	  "泵",
	  "藍",
	  "拖",
	  "洞",
	  "授",
	  "鏡",
	  "辛",
	  "壯",
	  "鋒",
	  "貧",
	  "虛",
	  "彎",
	  "摩",
	  "泰",
	  "幼",
	  "廷",
	  "尊",
	  "窗",
	  "綱",
	  "弄",
	  "隸",
	  "疑",
	  "氏",
	  "宮",
	  "姐",
	  "震",
	  "瑞",
	  "怪",
	  "尤",
	  "琴",
	  "循",
	  "描",
	  "膜",
	  "違",
	  "夾",
	  "腰",
	  "緣",
	  "珠",
	  "窮",
	  "森",
	  "枝",
	  "竹",
	  "溝",
	  "催",
	  "繩",
	  "憶",
	  "邦",
	  "剩",
	  "幸",
	  "漿",
	  "欄",
	  "擁",
	  "牙",
	  "貯",
	  "禮",
	  "濾",
	  "鈉",
	  "紋",
	  "罷",
	  "拍",
	  "咱",
	  "喊",
	  "袖",
	  "埃",
	  "勤",
	  "罰",
	  "焦",
	  "潛",
	  "伍",
	  "墨",
	  "欲",
	  "縫",
	  "姓",
	  "刊",
	  "飽",
	  "仿",
	  "獎",
	  "鋁",
	  "鬼",
	  "麗",
	  "跨",
	  "默",
	  "挖",
	  "鏈",
	  "掃",
	  "喝",
	  "袋",
	  "炭",
	  "污",
	  "幕",
	  "諸",
	  "弧",
	  "勵",
	  "梅",
	  "奶",
	  "潔",
	  "災",
	  "舟",
	  "鑑",
	  "苯",
	  "訟",
	  "抱",
	  "毀",
	  "懂",
	  "寒",
	  "智",
	  "埔",
	  "寄",
	  "屆",
	  "躍",
	  "渡",
	  "挑",
	  "丹",
	  "艱",
	  "貝",
	  "碰",
	  "拔",
	  "爹",
	  "戴",
	  "碼",
	  "夢",
	  "芽",
	  "熔",
	  "赤",
	  "漁",
	  "哭",
	  "敬",
	  "顆",
	  "奔",
	  "鉛",
	  "仲",
	  "虎",
	  "稀",
	  "妹",
	  "乏",
	  "珍",
	  "申",
	  "桌",
	  "遵",
	  "允",
	  "隆",
	  "螺",
	  "倉",
	  "魏",
	  "銳",
	  "曉",
	  "氮",
	  "兼",
	  "隱",
	  "礙",
	  "赫",
	  "撥",
	  "忠",
	  "肅",
	  "缸",
	  "牽",
	  "搶",
	  "博",
	  "巧",
	  "殼",
	  "兄",
	  "杜",
	  "訊",
	  "誠",
	  "碧",
	  "祥",
	  "柯",
	  "頁",
	  "巡",
	  "矩",
	  "悲",
	  "灌",
	  "齡",
	  "倫",
	  "票",
	  "尋",
	  "桂",
	  "鋪",
	  "聖",
	  "恐",
	  "恰",
	  "鄭",
	  "趣",
	  "抬",
	  "荒",
	  "騰",
	  "貼",
	  "柔",
	  "滴",
	  "猛",
	  "闊",
	  "輛",
	  "妻",
	  "填",
	  "撤",
	  "儲",
	  "簽",
	  "鬧",
	  "擾",
	  "紫",
	  "砂",
	  "遞",
	  "戲",
	  "吊",
	  "陶",
	  "伐",
	  "餵",
	  "療",
	  "瓶",
	  "婆",
	  "撫",
	  "臂",
	  "摸",
	  "忍",
	  "蝦",
	  "蠟",
	  "鄰",
	  "胸",
	  "鞏",
	  "擠",
	  "偶",
	  "棄",
	  "槽",
	  "勁",
	  "乳",
	  "鄧",
	  "吉",
	  "仁",
	  "爛",
	  "磚",
	  "租",
	  "烏",
	  "艦",
	  "伴",
	  "瓜",
	  "淺",
	  "丙",
	  "暫",
	  "燥",
	  "橡",
	  "柳",
	  "迷",
	  "暖",
	  "牌",
	  "秧",
	  "膽",
	  "詳",
	  "簧",
	  "踏",
	  "瓷",
	  "譜",
	  "呆",
	  "賓",
	  "糊",
	  "洛",
	  "輝",
	  "憤",
	  "競",
	  "隙",
	  "怒",
	  "粘",
	  "乃",
	  "緒",
	  "肩",
	  "籍",
	  "敏",
	  "塗",
	  "熙",
	  "皆",
	  "偵",
	  "懸",
	  "掘",
	  "享",
	  "糾",
	  "醒",
	  "狂",
	  "鎖",
	  "淀",
	  "恨",
	  "牲",
	  "霸",
	  "爬",
	  "賞",
	  "逆",
	  "玩",
	  "陵",
	  "祝",
	  "秒",
	  "浙",
	  "貌",
	  "役",
	  "彼",
	  "悉",
	  "鴨",
	  "趨",
	  "鳳",
	  "晨",
	  "畜",
	  "輩",
	  "秩",
	  "卵",
	  "署",
	  "梯",
	  "炎",
	  "灘",
	  "棋",
	  "驅",
	  "篩",
	  "峽",
	  "冒",
	  "啥",
	  "壽",
	  "譯",
	  "浸",
	  "泉",
	  "帽",
	  "遲",
	  "矽",
	  "疆",
	  "貸",
	  "漏",
	  "稿",
	  "冠",
	  "嫩",
	  "脅",
	  "芯",
	  "牢",
	  "叛",
	  "蝕",
	  "奧",
	  "鳴",
	  "嶺",
	  "羊",
	  "憑",
	  "串",
	  "塘",
	  "繪",
	  "酵",
	  "融",
	  "盆",
	  "錫",
	  "廟",
	  "籌",
	  "凍",
	  "輔",
	  "攝",
	  "襲",
	  "筋",
	  "拒",
	  "僚",
	  "旱",
	  "鉀",
	  "鳥",
	  "漆",
	  "沈",
	  "眉",
	  "疏",
	  "添",
	  "棒",
	  "穗",
	  "硝",
	  "韓",
	  "逼",
	  "扭",
	  "僑",
	  "涼",
	  "挺",
	  "碗",
	  "栽",
	  "炒",
	  "杯",
	  "患",
	  "餾",
	  "勸",
	  "豪",
	  "遼",
	  "勃",
	  "鴻",
	  "旦",
	  "吏",
	  "拜",
	  "狗",
	  "埋",
	  "輥",
	  "掩",
	  "飲",
	  "搬",
	  "罵",
	  "辭",
	  "勾",
	  "扣",
	  "估",
	  "蔣",
	  "絨",
	  "霧",
	  "丈",
	  "朵",
	  "姆",
	  "擬",
	  "宇",
	  "輯",
	  "陝",
	  "雕",
	  "償",
	  "蓄",
	  "崇",
	  "剪",
	  "倡",
	  "廳",
	  "咬",
	  "駛",
	  "薯",
	  "刷",
	  "斥",
	  "番",
	  "賦",
	  "奉",
	  "佛",
	  "澆",
	  "漫",
	  "曼",
	  "扇",
	  "鈣",
	  "桃",
	  "扶",
	  "仔",
	  "返",
	  "俗",
	  "虧",
	  "腔",
	  "鞋",
	  "棱",
	  "覆",
	  "框",
	  "悄",
	  "叔",
	  "撞",
	  "騙",
	  "勘",
	  "旺",
	  "沸",
	  "孤",
	  "吐",
	  "孟",
	  "渠",
	  "屈",
	  "疾",
	  "妙",
	  "惜",
	  "仰",
	  "狠",
	  "脹",
	  "諧",
	  "拋",
	  "黴",
	  "桑",
	  "崗",
	  "嘛",
	  "衰",
	  "盜",
	  "滲",
	  "臟",
	  "賴",
	  "湧",
	  "甜",
	  "曹",
	  "閱",
	  "肌",
	  "哩",
	  "厲",
	  "烴",
	  "緯",
	  "毅",
	  "昨",
	  "偽",
	  "症",
	  "煮",
	  "嘆",
	  "釘",
	  "搭",
	  "莖",
	  "籠",
	  "酷",
	  "偷",
	  "弓",
	  "錐",
	  "恆",
	  "傑",
	  "坑",
	  "鼻",
	  "翼",
	  "綸",
	  "敘",
	  "獄",
	  "逮",
	  "罐",
	  "絡",
	  "棚",
	  "抑",
	  "膨",
	  "蔬",
	  "寺",
	  "驟",
	  "穆",
	  "冶",
	  "枯",
	  "冊",
	  "屍",
	  "凸",
	  "紳",
	  "坯",
	  "犧",
	  "焰",
	  "轟",
	  "欣",
	  "晉",
	  "瘦",
	  "禦",
	  "錠",
	  "錦",
	  "喪",
	  "旬",
	  "鍛",
	  "壟",
	  "搜",
	  "撲",
	  "邀",
	  "亭",
	  "酯",
	  "邁",
	  "舒",
	  "脆",
	  "酶",
	  "閒",
	  "憂",
	  "酚",
	  "頑",
	  "羽",
	  "漲",
	  "卸",
	  "仗",
	  "陪",
	  "闢",
	  "懲",
	  "杭",
	  "姚",
	  "肚",
	  "捉",
	  "飄",
	  "漂",
	  "昆",
	  "欺",
	  "吾",
	  "郎",
	  "烷",
	  "汁",
	  "呵",
	  "飾",
	  "蕭",
	  "雅",
	  "郵",
	  "遷",
	  "燕",
	  "撒",
	  "姻",
	  "赴",
	  "宴",
	  "煩",
	  "債",
	  "帳",
	  "斑",
	  "鈴",
	  "旨",
	  "醇",
	  "董",
	  "餅",
	  "雛",
	  "姿",
	  "拌",
	  "傅",
	  "腹",
	  "妥",
	  "揉",
	  "賢",
	  "拆",
	  "歪",
	  "葡",
	  "胺",
	  "丟",
	  "浩",
	  "徽",
	  "昂",
	  "墊",
	  "擋",
	  "覽",
	  "貪",
	  "慰",
	  "繳",
	  "汪",
	  "慌",
	  "馮",
	  "諾",
	  "姜",
	  "誼",
	  "兇",
	  "劣",
	  "誣",
	  "耀",
	  "昏",
	  "躺",
	  "盈",
	  "騎",
	  "喬",
	  "溪",
	  "叢",
	  "盧",
	  "抹",
	  "悶",
	  "諮",
	  "刮",
	  "駕",
	  "纜",
	  "悟",
	  "摘",
	  "鉺",
	  "擲",
	  "頗",
	  "幻",
	  "柄",
	  "惠",
	  "慘",
	  "佳",
	  "仇",
	  "臘",
	  "窩",
	  "滌",
	  "劍",
	  "瞧",
	  "堡",
	  "潑",
	  "蔥",
	  "罩",
	  "霍",
	  "撈",
	  "胎",
	  "蒼",
	  "濱",
	  "倆",
	  "捅",
	  "湘",
	  "砍",
	  "霞",
	  "邵",
	  "萄",
	  "瘋",
	  "淮",
	  "遂",
	  "熊",
	  "糞",
	  "烘",
	  "宿",
	  "檔",
	  "戈",
	  "駁",
	  "嫂",
	  "裕",
	  "徙",
	  "箭",
	  "捐",
	  "腸",
	  "撐",
	  "曬",
	  "辨",
	  "殿",
	  "蓮",
	  "攤",
	  "攪",
	  "醬",
	  "屏",
	  "疫",
	  "哀",
	  "蔡",
	  "堵",
	  "沫",
	  "皺",
	  "暢",
	  "疊",
	  "閣",
	  "萊",
	  "敲",
	  "轄",
	  "鉤",
	  "痕",
	  "壩",
	  "巷",
	  "餓",
	  "禍",
	  "丘",
	  "玄",
	  "溜",
	  "曰",
	  "邏",
	  "彭",
	  "嘗",
	  "卿",
	  "妨",
	  "艇",
	  "吞",
	  "韋",
	  "怨",
	  "矮",
	  "歇"
	]
	;

	var chinese_traditional$1 = /*#__PURE__*/Object.freeze({
		default: chinese_traditional
	});

	var english = [
	  "abandon",
	  "ability",
	  "able",
	  "about",
	  "above",
	  "absent",
	  "absorb",
	  "abstract",
	  "absurd",
	  "abuse",
	  "access",
	  "accident",
	  "account",
	  "accuse",
	  "achieve",
	  "acid",
	  "acoustic",
	  "acquire",
	  "across",
	  "act",
	  "action",
	  "actor",
	  "actress",
	  "actual",
	  "adapt",
	  "add",
	  "addict",
	  "address",
	  "adjust",
	  "admit",
	  "adult",
	  "advance",
	  "advice",
	  "aerobic",
	  "affair",
	  "afford",
	  "afraid",
	  "again",
	  "age",
	  "agent",
	  "agree",
	  "ahead",
	  "aim",
	  "air",
	  "airport",
	  "aisle",
	  "alarm",
	  "album",
	  "alcohol",
	  "alert",
	  "alien",
	  "all",
	  "alley",
	  "allow",
	  "almost",
	  "alone",
	  "alpha",
	  "already",
	  "also",
	  "alter",
	  "always",
	  "amateur",
	  "amazing",
	  "among",
	  "amount",
	  "amused",
	  "analyst",
	  "anchor",
	  "ancient",
	  "anger",
	  "angle",
	  "angry",
	  "animal",
	  "ankle",
	  "announce",
	  "annual",
	  "another",
	  "answer",
	  "antenna",
	  "antique",
	  "anxiety",
	  "any",
	  "apart",
	  "apology",
	  "appear",
	  "apple",
	  "approve",
	  "april",
	  "arch",
	  "arctic",
	  "area",
	  "arena",
	  "argue",
	  "arm",
	  "armed",
	  "armor",
	  "army",
	  "around",
	  "arrange",
	  "arrest",
	  "arrive",
	  "arrow",
	  "art",
	  "artefact",
	  "artist",
	  "artwork",
	  "ask",
	  "aspect",
	  "assault",
	  "asset",
	  "assist",
	  "assume",
	  "asthma",
	  "athlete",
	  "atom",
	  "attack",
	  "attend",
	  "attitude",
	  "attract",
	  "auction",
	  "audit",
	  "august",
	  "aunt",
	  "author",
	  "auto",
	  "autumn",
	  "average",
	  "avocado",
	  "avoid",
	  "awake",
	  "aware",
	  "away",
	  "awesome",
	  "awful",
	  "awkward",
	  "axis",
	  "baby",
	  "bachelor",
	  "bacon",
	  "badge",
	  "bag",
	  "balance",
	  "balcony",
	  "ball",
	  "bamboo",
	  "banana",
	  "banner",
	  "bar",
	  "barely",
	  "bargain",
	  "barrel",
	  "base",
	  "basic",
	  "basket",
	  "battle",
	  "beach",
	  "bean",
	  "beauty",
	  "because",
	  "become",
	  "beef",
	  "before",
	  "begin",
	  "behave",
	  "behind",
	  "believe",
	  "below",
	  "belt",
	  "bench",
	  "benefit",
	  "best",
	  "betray",
	  "better",
	  "between",
	  "beyond",
	  "bicycle",
	  "bid",
	  "bike",
	  "bind",
	  "biology",
	  "bird",
	  "birth",
	  "bitter",
	  "black",
	  "blade",
	  "blame",
	  "blanket",
	  "blast",
	  "bleak",
	  "bless",
	  "blind",
	  "blood",
	  "blossom",
	  "blouse",
	  "blue",
	  "blur",
	  "blush",
	  "board",
	  "boat",
	  "body",
	  "boil",
	  "bomb",
	  "bone",
	  "bonus",
	  "book",
	  "boost",
	  "border",
	  "boring",
	  "borrow",
	  "boss",
	  "bottom",
	  "bounce",
	  "box",
	  "boy",
	  "bracket",
	  "brain",
	  "brand",
	  "brass",
	  "brave",
	  "bread",
	  "breeze",
	  "brick",
	  "bridge",
	  "brief",
	  "bright",
	  "bring",
	  "brisk",
	  "broccoli",
	  "broken",
	  "bronze",
	  "broom",
	  "brother",
	  "brown",
	  "brush",
	  "bubble",
	  "buddy",
	  "budget",
	  "buffalo",
	  "build",
	  "bulb",
	  "bulk",
	  "bullet",
	  "bundle",
	  "bunker",
	  "burden",
	  "burger",
	  "burst",
	  "bus",
	  "business",
	  "busy",
	  "butter",
	  "buyer",
	  "buzz",
	  "cabbage",
	  "cabin",
	  "cable",
	  "cactus",
	  "cage",
	  "cake",
	  "call",
	  "calm",
	  "camera",
	  "camp",
	  "can",
	  "canal",
	  "cancel",
	  "candy",
	  "cannon",
	  "canoe",
	  "canvas",
	  "canyon",
	  "capable",
	  "capital",
	  "captain",
	  "car",
	  "carbon",
	  "card",
	  "cargo",
	  "carpet",
	  "carry",
	  "cart",
	  "case",
	  "cash",
	  "casino",
	  "castle",
	  "casual",
	  "cat",
	  "catalog",
	  "catch",
	  "category",
	  "cattle",
	  "caught",
	  "cause",
	  "caution",
	  "cave",
	  "ceiling",
	  "celery",
	  "cement",
	  "census",
	  "century",
	  "cereal",
	  "certain",
	  "chair",
	  "chalk",
	  "champion",
	  "change",
	  "chaos",
	  "chapter",
	  "charge",
	  "chase",
	  "chat",
	  "cheap",
	  "check",
	  "cheese",
	  "chef",
	  "cherry",
	  "chest",
	  "chicken",
	  "chief",
	  "child",
	  "chimney",
	  "choice",
	  "choose",
	  "chronic",
	  "chuckle",
	  "chunk",
	  "churn",
	  "cigar",
	  "cinnamon",
	  "circle",
	  "citizen",
	  "city",
	  "civil",
	  "claim",
	  "clap",
	  "clarify",
	  "claw",
	  "clay",
	  "clean",
	  "clerk",
	  "clever",
	  "click",
	  "client",
	  "cliff",
	  "climb",
	  "clinic",
	  "clip",
	  "clock",
	  "clog",
	  "close",
	  "cloth",
	  "cloud",
	  "clown",
	  "club",
	  "clump",
	  "cluster",
	  "clutch",
	  "coach",
	  "coast",
	  "coconut",
	  "code",
	  "coffee",
	  "coil",
	  "coin",
	  "collect",
	  "color",
	  "column",
	  "combine",
	  "come",
	  "comfort",
	  "comic",
	  "common",
	  "company",
	  "concert",
	  "conduct",
	  "confirm",
	  "congress",
	  "connect",
	  "consider",
	  "control",
	  "convince",
	  "cook",
	  "cool",
	  "copper",
	  "copy",
	  "coral",
	  "core",
	  "corn",
	  "correct",
	  "cost",
	  "cotton",
	  "couch",
	  "country",
	  "couple",
	  "course",
	  "cousin",
	  "cover",
	  "coyote",
	  "crack",
	  "cradle",
	  "craft",
	  "cram",
	  "crane",
	  "crash",
	  "crater",
	  "crawl",
	  "crazy",
	  "cream",
	  "credit",
	  "creek",
	  "crew",
	  "cricket",
	  "crime",
	  "crisp",
	  "critic",
	  "crop",
	  "cross",
	  "crouch",
	  "crowd",
	  "crucial",
	  "cruel",
	  "cruise",
	  "crumble",
	  "crunch",
	  "crush",
	  "cry",
	  "crystal",
	  "cube",
	  "culture",
	  "cup",
	  "cupboard",
	  "curious",
	  "current",
	  "curtain",
	  "curve",
	  "cushion",
	  "custom",
	  "cute",
	  "cycle",
	  "dad",
	  "damage",
	  "damp",
	  "dance",
	  "danger",
	  "daring",
	  "dash",
	  "daughter",
	  "dawn",
	  "day",
	  "deal",
	  "debate",
	  "debris",
	  "decade",
	  "december",
	  "decide",
	  "decline",
	  "decorate",
	  "decrease",
	  "deer",
	  "defense",
	  "define",
	  "defy",
	  "degree",
	  "delay",
	  "deliver",
	  "demand",
	  "demise",
	  "denial",
	  "dentist",
	  "deny",
	  "depart",
	  "depend",
	  "deposit",
	  "depth",
	  "deputy",
	  "derive",
	  "describe",
	  "desert",
	  "design",
	  "desk",
	  "despair",
	  "destroy",
	  "detail",
	  "detect",
	  "develop",
	  "device",
	  "devote",
	  "diagram",
	  "dial",
	  "diamond",
	  "diary",
	  "dice",
	  "diesel",
	  "diet",
	  "differ",
	  "digital",
	  "dignity",
	  "dilemma",
	  "dinner",
	  "dinosaur",
	  "direct",
	  "dirt",
	  "disagree",
	  "discover",
	  "disease",
	  "dish",
	  "dismiss",
	  "disorder",
	  "display",
	  "distance",
	  "divert",
	  "divide",
	  "divorce",
	  "dizzy",
	  "doctor",
	  "document",
	  "dog",
	  "doll",
	  "dolphin",
	  "domain",
	  "donate",
	  "donkey",
	  "donor",
	  "door",
	  "dose",
	  "double",
	  "dove",
	  "draft",
	  "dragon",
	  "drama",
	  "drastic",
	  "draw",
	  "dream",
	  "dress",
	  "drift",
	  "drill",
	  "drink",
	  "drip",
	  "drive",
	  "drop",
	  "drum",
	  "dry",
	  "duck",
	  "dumb",
	  "dune",
	  "during",
	  "dust",
	  "dutch",
	  "duty",
	  "dwarf",
	  "dynamic",
	  "eager",
	  "eagle",
	  "early",
	  "earn",
	  "earth",
	  "easily",
	  "east",
	  "easy",
	  "echo",
	  "ecology",
	  "economy",
	  "edge",
	  "edit",
	  "educate",
	  "effort",
	  "egg",
	  "eight",
	  "either",
	  "elbow",
	  "elder",
	  "electric",
	  "elegant",
	  "element",
	  "elephant",
	  "elevator",
	  "elite",
	  "else",
	  "embark",
	  "embody",
	  "embrace",
	  "emerge",
	  "emotion",
	  "employ",
	  "empower",
	  "empty",
	  "enable",
	  "enact",
	  "end",
	  "endless",
	  "endorse",
	  "enemy",
	  "energy",
	  "enforce",
	  "engage",
	  "engine",
	  "enhance",
	  "enjoy",
	  "enlist",
	  "enough",
	  "enrich",
	  "enroll",
	  "ensure",
	  "enter",
	  "entire",
	  "entry",
	  "envelope",
	  "episode",
	  "equal",
	  "equip",
	  "era",
	  "erase",
	  "erode",
	  "erosion",
	  "error",
	  "erupt",
	  "escape",
	  "essay",
	  "essence",
	  "estate",
	  "eternal",
	  "ethics",
	  "evidence",
	  "evil",
	  "evoke",
	  "evolve",
	  "exact",
	  "example",
	  "excess",
	  "exchange",
	  "excite",
	  "exclude",
	  "excuse",
	  "execute",
	  "exercise",
	  "exhaust",
	  "exhibit",
	  "exile",
	  "exist",
	  "exit",
	  "exotic",
	  "expand",
	  "expect",
	  "expire",
	  "explain",
	  "expose",
	  "express",
	  "extend",
	  "extra",
	  "eye",
	  "eyebrow",
	  "fabric",
	  "face",
	  "faculty",
	  "fade",
	  "faint",
	  "faith",
	  "fall",
	  "false",
	  "fame",
	  "family",
	  "famous",
	  "fan",
	  "fancy",
	  "fantasy",
	  "farm",
	  "fashion",
	  "fat",
	  "fatal",
	  "father",
	  "fatigue",
	  "fault",
	  "favorite",
	  "feature",
	  "february",
	  "federal",
	  "fee",
	  "feed",
	  "feel",
	  "female",
	  "fence",
	  "festival",
	  "fetch",
	  "fever",
	  "few",
	  "fiber",
	  "fiction",
	  "field",
	  "figure",
	  "file",
	  "film",
	  "filter",
	  "final",
	  "find",
	  "fine",
	  "finger",
	  "finish",
	  "fire",
	  "firm",
	  "first",
	  "fiscal",
	  "fish",
	  "fit",
	  "fitness",
	  "fix",
	  "flag",
	  "flame",
	  "flash",
	  "flat",
	  "flavor",
	  "flee",
	  "flight",
	  "flip",
	  "float",
	  "flock",
	  "floor",
	  "flower",
	  "fluid",
	  "flush",
	  "fly",
	  "foam",
	  "focus",
	  "fog",
	  "foil",
	  "fold",
	  "follow",
	  "food",
	  "foot",
	  "force",
	  "forest",
	  "forget",
	  "fork",
	  "fortune",
	  "forum",
	  "forward",
	  "fossil",
	  "foster",
	  "found",
	  "fox",
	  "fragile",
	  "frame",
	  "frequent",
	  "fresh",
	  "friend",
	  "fringe",
	  "frog",
	  "front",
	  "frost",
	  "frown",
	  "frozen",
	  "fruit",
	  "fuel",
	  "fun",
	  "funny",
	  "furnace",
	  "fury",
	  "future",
	  "gadget",
	  "gain",
	  "galaxy",
	  "gallery",
	  "game",
	  "gap",
	  "garage",
	  "garbage",
	  "garden",
	  "garlic",
	  "garment",
	  "gas",
	  "gasp",
	  "gate",
	  "gather",
	  "gauge",
	  "gaze",
	  "general",
	  "genius",
	  "genre",
	  "gentle",
	  "genuine",
	  "gesture",
	  "ghost",
	  "giant",
	  "gift",
	  "giggle",
	  "ginger",
	  "giraffe",
	  "girl",
	  "give",
	  "glad",
	  "glance",
	  "glare",
	  "glass",
	  "glide",
	  "glimpse",
	  "globe",
	  "gloom",
	  "glory",
	  "glove",
	  "glow",
	  "glue",
	  "goat",
	  "goddess",
	  "gold",
	  "good",
	  "goose",
	  "gorilla",
	  "gospel",
	  "gossip",
	  "govern",
	  "gown",
	  "grab",
	  "grace",
	  "grain",
	  "grant",
	  "grape",
	  "grass",
	  "gravity",
	  "great",
	  "green",
	  "grid",
	  "grief",
	  "grit",
	  "grocery",
	  "group",
	  "grow",
	  "grunt",
	  "guard",
	  "guess",
	  "guide",
	  "guilt",
	  "guitar",
	  "gun",
	  "gym",
	  "habit",
	  "hair",
	  "half",
	  "hammer",
	  "hamster",
	  "hand",
	  "happy",
	  "harbor",
	  "hard",
	  "harsh",
	  "harvest",
	  "hat",
	  "have",
	  "hawk",
	  "hazard",
	  "head",
	  "health",
	  "heart",
	  "heavy",
	  "hedgehog",
	  "height",
	  "hello",
	  "helmet",
	  "help",
	  "hen",
	  "hero",
	  "hidden",
	  "high",
	  "hill",
	  "hint",
	  "hip",
	  "hire",
	  "history",
	  "hobby",
	  "hockey",
	  "hold",
	  "hole",
	  "holiday",
	  "hollow",
	  "home",
	  "honey",
	  "hood",
	  "hope",
	  "horn",
	  "horror",
	  "horse",
	  "hospital",
	  "host",
	  "hotel",
	  "hour",
	  "hover",
	  "hub",
	  "huge",
	  "human",
	  "humble",
	  "humor",
	  "hundred",
	  "hungry",
	  "hunt",
	  "hurdle",
	  "hurry",
	  "hurt",
	  "husband",
	  "hybrid",
	  "ice",
	  "icon",
	  "idea",
	  "identify",
	  "idle",
	  "ignore",
	  "ill",
	  "illegal",
	  "illness",
	  "image",
	  "imitate",
	  "immense",
	  "immune",
	  "impact",
	  "impose",
	  "improve",
	  "impulse",
	  "inch",
	  "include",
	  "income",
	  "increase",
	  "index",
	  "indicate",
	  "indoor",
	  "industry",
	  "infant",
	  "inflict",
	  "inform",
	  "inhale",
	  "inherit",
	  "initial",
	  "inject",
	  "injury",
	  "inmate",
	  "inner",
	  "innocent",
	  "input",
	  "inquiry",
	  "insane",
	  "insect",
	  "inside",
	  "inspire",
	  "install",
	  "intact",
	  "interest",
	  "into",
	  "invest",
	  "invite",
	  "involve",
	  "iron",
	  "island",
	  "isolate",
	  "issue",
	  "item",
	  "ivory",
	  "jacket",
	  "jaguar",
	  "jar",
	  "jazz",
	  "jealous",
	  "jeans",
	  "jelly",
	  "jewel",
	  "job",
	  "join",
	  "joke",
	  "journey",
	  "joy",
	  "judge",
	  "juice",
	  "jump",
	  "jungle",
	  "junior",
	  "junk",
	  "just",
	  "kangaroo",
	  "keen",
	  "keep",
	  "ketchup",
	  "key",
	  "kick",
	  "kid",
	  "kidney",
	  "kind",
	  "kingdom",
	  "kiss",
	  "kit",
	  "kitchen",
	  "kite",
	  "kitten",
	  "kiwi",
	  "knee",
	  "knife",
	  "knock",
	  "know",
	  "lab",
	  "label",
	  "labor",
	  "ladder",
	  "lady",
	  "lake",
	  "lamp",
	  "language",
	  "laptop",
	  "large",
	  "later",
	  "latin",
	  "laugh",
	  "laundry",
	  "lava",
	  "law",
	  "lawn",
	  "lawsuit",
	  "layer",
	  "lazy",
	  "leader",
	  "leaf",
	  "learn",
	  "leave",
	  "lecture",
	  "left",
	  "leg",
	  "legal",
	  "legend",
	  "leisure",
	  "lemon",
	  "lend",
	  "length",
	  "lens",
	  "leopard",
	  "lesson",
	  "letter",
	  "level",
	  "liar",
	  "liberty",
	  "library",
	  "license",
	  "life",
	  "lift",
	  "light",
	  "like",
	  "limb",
	  "limit",
	  "link",
	  "lion",
	  "liquid",
	  "list",
	  "little",
	  "live",
	  "lizard",
	  "load",
	  "loan",
	  "lobster",
	  "local",
	  "lock",
	  "logic",
	  "lonely",
	  "long",
	  "loop",
	  "lottery",
	  "loud",
	  "lounge",
	  "love",
	  "loyal",
	  "lucky",
	  "luggage",
	  "lumber",
	  "lunar",
	  "lunch",
	  "luxury",
	  "lyrics",
	  "machine",
	  "mad",
	  "magic",
	  "magnet",
	  "maid",
	  "mail",
	  "main",
	  "major",
	  "make",
	  "mammal",
	  "man",
	  "manage",
	  "mandate",
	  "mango",
	  "mansion",
	  "manual",
	  "maple",
	  "marble",
	  "march",
	  "margin",
	  "marine",
	  "market",
	  "marriage",
	  "mask",
	  "mass",
	  "master",
	  "match",
	  "material",
	  "math",
	  "matrix",
	  "matter",
	  "maximum",
	  "maze",
	  "meadow",
	  "mean",
	  "measure",
	  "meat",
	  "mechanic",
	  "medal",
	  "media",
	  "melody",
	  "melt",
	  "member",
	  "memory",
	  "mention",
	  "menu",
	  "mercy",
	  "merge",
	  "merit",
	  "merry",
	  "mesh",
	  "message",
	  "metal",
	  "method",
	  "middle",
	  "midnight",
	  "milk",
	  "million",
	  "mimic",
	  "mind",
	  "minimum",
	  "minor",
	  "minute",
	  "miracle",
	  "mirror",
	  "misery",
	  "miss",
	  "mistake",
	  "mix",
	  "mixed",
	  "mixture",
	  "mobile",
	  "model",
	  "modify",
	  "mom",
	  "moment",
	  "monitor",
	  "monkey",
	  "monster",
	  "month",
	  "moon",
	  "moral",
	  "more",
	  "morning",
	  "mosquito",
	  "mother",
	  "motion",
	  "motor",
	  "mountain",
	  "mouse",
	  "move",
	  "movie",
	  "much",
	  "muffin",
	  "mule",
	  "multiply",
	  "muscle",
	  "museum",
	  "mushroom",
	  "music",
	  "must",
	  "mutual",
	  "myself",
	  "mystery",
	  "myth",
	  "naive",
	  "name",
	  "napkin",
	  "narrow",
	  "nasty",
	  "nation",
	  "nature",
	  "near",
	  "neck",
	  "need",
	  "negative",
	  "neglect",
	  "neither",
	  "nephew",
	  "nerve",
	  "nest",
	  "net",
	  "network",
	  "neutral",
	  "never",
	  "news",
	  "next",
	  "nice",
	  "night",
	  "noble",
	  "noise",
	  "nominee",
	  "noodle",
	  "normal",
	  "north",
	  "nose",
	  "notable",
	  "note",
	  "nothing",
	  "notice",
	  "novel",
	  "now",
	  "nuclear",
	  "number",
	  "nurse",
	  "nut",
	  "oak",
	  "obey",
	  "object",
	  "oblige",
	  "obscure",
	  "observe",
	  "obtain",
	  "obvious",
	  "occur",
	  "ocean",
	  "october",
	  "odor",
	  "off",
	  "offer",
	  "office",
	  "often",
	  "oil",
	  "okay",
	  "old",
	  "olive",
	  "olympic",
	  "omit",
	  "once",
	  "one",
	  "onion",
	  "online",
	  "only",
	  "open",
	  "opera",
	  "opinion",
	  "oppose",
	  "option",
	  "orange",
	  "orbit",
	  "orchard",
	  "order",
	  "ordinary",
	  "organ",
	  "orient",
	  "original",
	  "orphan",
	  "ostrich",
	  "other",
	  "outdoor",
	  "outer",
	  "output",
	  "outside",
	  "oval",
	  "oven",
	  "over",
	  "own",
	  "owner",
	  "oxygen",
	  "oyster",
	  "ozone",
	  "pact",
	  "paddle",
	  "page",
	  "pair",
	  "palace",
	  "palm",
	  "panda",
	  "panel",
	  "panic",
	  "panther",
	  "paper",
	  "parade",
	  "parent",
	  "park",
	  "parrot",
	  "party",
	  "pass",
	  "patch",
	  "path",
	  "patient",
	  "patrol",
	  "pattern",
	  "pause",
	  "pave",
	  "payment",
	  "peace",
	  "peanut",
	  "pear",
	  "peasant",
	  "pelican",
	  "pen",
	  "penalty",
	  "pencil",
	  "people",
	  "pepper",
	  "perfect",
	  "permit",
	  "person",
	  "pet",
	  "phone",
	  "photo",
	  "phrase",
	  "physical",
	  "piano",
	  "picnic",
	  "picture",
	  "piece",
	  "pig",
	  "pigeon",
	  "pill",
	  "pilot",
	  "pink",
	  "pioneer",
	  "pipe",
	  "pistol",
	  "pitch",
	  "pizza",
	  "place",
	  "planet",
	  "plastic",
	  "plate",
	  "play",
	  "please",
	  "pledge",
	  "pluck",
	  "plug",
	  "plunge",
	  "poem",
	  "poet",
	  "point",
	  "polar",
	  "pole",
	  "police",
	  "pond",
	  "pony",
	  "pool",
	  "popular",
	  "portion",
	  "position",
	  "possible",
	  "post",
	  "potato",
	  "pottery",
	  "poverty",
	  "powder",
	  "power",
	  "practice",
	  "praise",
	  "predict",
	  "prefer",
	  "prepare",
	  "present",
	  "pretty",
	  "prevent",
	  "price",
	  "pride",
	  "primary",
	  "print",
	  "priority",
	  "prison",
	  "private",
	  "prize",
	  "problem",
	  "process",
	  "produce",
	  "profit",
	  "program",
	  "project",
	  "promote",
	  "proof",
	  "property",
	  "prosper",
	  "protect",
	  "proud",
	  "provide",
	  "public",
	  "pudding",
	  "pull",
	  "pulp",
	  "pulse",
	  "pumpkin",
	  "punch",
	  "pupil",
	  "puppy",
	  "purchase",
	  "purity",
	  "purpose",
	  "purse",
	  "push",
	  "put",
	  "puzzle",
	  "pyramid",
	  "quality",
	  "quantum",
	  "quarter",
	  "question",
	  "quick",
	  "quit",
	  "quiz",
	  "quote",
	  "rabbit",
	  "raccoon",
	  "race",
	  "rack",
	  "radar",
	  "radio",
	  "rail",
	  "rain",
	  "raise",
	  "rally",
	  "ramp",
	  "ranch",
	  "random",
	  "range",
	  "rapid",
	  "rare",
	  "rate",
	  "rather",
	  "raven",
	  "raw",
	  "razor",
	  "ready",
	  "real",
	  "reason",
	  "rebel",
	  "rebuild",
	  "recall",
	  "receive",
	  "recipe",
	  "record",
	  "recycle",
	  "reduce",
	  "reflect",
	  "reform",
	  "refuse",
	  "region",
	  "regret",
	  "regular",
	  "reject",
	  "relax",
	  "release",
	  "relief",
	  "rely",
	  "remain",
	  "remember",
	  "remind",
	  "remove",
	  "render",
	  "renew",
	  "rent",
	  "reopen",
	  "repair",
	  "repeat",
	  "replace",
	  "report",
	  "require",
	  "rescue",
	  "resemble",
	  "resist",
	  "resource",
	  "response",
	  "result",
	  "retire",
	  "retreat",
	  "return",
	  "reunion",
	  "reveal",
	  "review",
	  "reward",
	  "rhythm",
	  "rib",
	  "ribbon",
	  "rice",
	  "rich",
	  "ride",
	  "ridge",
	  "rifle",
	  "right",
	  "rigid",
	  "ring",
	  "riot",
	  "ripple",
	  "risk",
	  "ritual",
	  "rival",
	  "river",
	  "road",
	  "roast",
	  "robot",
	  "robust",
	  "rocket",
	  "romance",
	  "roof",
	  "rookie",
	  "room",
	  "rose",
	  "rotate",
	  "rough",
	  "round",
	  "route",
	  "royal",
	  "rubber",
	  "rude",
	  "rug",
	  "rule",
	  "run",
	  "runway",
	  "rural",
	  "sad",
	  "saddle",
	  "sadness",
	  "safe",
	  "sail",
	  "salad",
	  "salmon",
	  "salon",
	  "salt",
	  "salute",
	  "same",
	  "sample",
	  "sand",
	  "satisfy",
	  "satoshi",
	  "sauce",
	  "sausage",
	  "save",
	  "say",
	  "scale",
	  "scan",
	  "scare",
	  "scatter",
	  "scene",
	  "scheme",
	  "school",
	  "science",
	  "scissors",
	  "scorpion",
	  "scout",
	  "scrap",
	  "screen",
	  "script",
	  "scrub",
	  "sea",
	  "search",
	  "season",
	  "seat",
	  "second",
	  "secret",
	  "section",
	  "security",
	  "seed",
	  "seek",
	  "segment",
	  "select",
	  "sell",
	  "seminar",
	  "senior",
	  "sense",
	  "sentence",
	  "series",
	  "service",
	  "session",
	  "settle",
	  "setup",
	  "seven",
	  "shadow",
	  "shaft",
	  "shallow",
	  "share",
	  "shed",
	  "shell",
	  "sheriff",
	  "shield",
	  "shift",
	  "shine",
	  "ship",
	  "shiver",
	  "shock",
	  "shoe",
	  "shoot",
	  "shop",
	  "short",
	  "shoulder",
	  "shove",
	  "shrimp",
	  "shrug",
	  "shuffle",
	  "shy",
	  "sibling",
	  "sick",
	  "side",
	  "siege",
	  "sight",
	  "sign",
	  "silent",
	  "silk",
	  "silly",
	  "silver",
	  "similar",
	  "simple",
	  "since",
	  "sing",
	  "siren",
	  "sister",
	  "situate",
	  "six",
	  "size",
	  "skate",
	  "sketch",
	  "ski",
	  "skill",
	  "skin",
	  "skirt",
	  "skull",
	  "slab",
	  "slam",
	  "sleep",
	  "slender",
	  "slice",
	  "slide",
	  "slight",
	  "slim",
	  "slogan",
	  "slot",
	  "slow",
	  "slush",
	  "small",
	  "smart",
	  "smile",
	  "smoke",
	  "smooth",
	  "snack",
	  "snake",
	  "snap",
	  "sniff",
	  "snow",
	  "soap",
	  "soccer",
	  "social",
	  "sock",
	  "soda",
	  "soft",
	  "solar",
	  "soldier",
	  "solid",
	  "solution",
	  "solve",
	  "someone",
	  "song",
	  "soon",
	  "sorry",
	  "sort",
	  "soul",
	  "sound",
	  "soup",
	  "source",
	  "south",
	  "space",
	  "spare",
	  "spatial",
	  "spawn",
	  "speak",
	  "special",
	  "speed",
	  "spell",
	  "spend",
	  "sphere",
	  "spice",
	  "spider",
	  "spike",
	  "spin",
	  "spirit",
	  "split",
	  "spoil",
	  "sponsor",
	  "spoon",
	  "sport",
	  "spot",
	  "spray",
	  "spread",
	  "spring",
	  "spy",
	  "square",
	  "squeeze",
	  "squirrel",
	  "stable",
	  "stadium",
	  "staff",
	  "stage",
	  "stairs",
	  "stamp",
	  "stand",
	  "start",
	  "state",
	  "stay",
	  "steak",
	  "steel",
	  "stem",
	  "step",
	  "stereo",
	  "stick",
	  "still",
	  "sting",
	  "stock",
	  "stomach",
	  "stone",
	  "stool",
	  "story",
	  "stove",
	  "strategy",
	  "street",
	  "strike",
	  "strong",
	  "struggle",
	  "student",
	  "stuff",
	  "stumble",
	  "style",
	  "subject",
	  "submit",
	  "subway",
	  "success",
	  "such",
	  "sudden",
	  "suffer",
	  "sugar",
	  "suggest",
	  "suit",
	  "summer",
	  "sun",
	  "sunny",
	  "sunset",
	  "super",
	  "supply",
	  "supreme",
	  "sure",
	  "surface",
	  "surge",
	  "surprise",
	  "surround",
	  "survey",
	  "suspect",
	  "sustain",
	  "swallow",
	  "swamp",
	  "swap",
	  "swarm",
	  "swear",
	  "sweet",
	  "swift",
	  "swim",
	  "swing",
	  "switch",
	  "sword",
	  "symbol",
	  "symptom",
	  "syrup",
	  "system",
	  "table",
	  "tackle",
	  "tag",
	  "tail",
	  "talent",
	  "talk",
	  "tank",
	  "tape",
	  "target",
	  "task",
	  "taste",
	  "tattoo",
	  "taxi",
	  "teach",
	  "team",
	  "tell",
	  "ten",
	  "tenant",
	  "tennis",
	  "tent",
	  "term",
	  "test",
	  "text",
	  "thank",
	  "that",
	  "theme",
	  "then",
	  "theory",
	  "there",
	  "they",
	  "thing",
	  "this",
	  "thought",
	  "three",
	  "thrive",
	  "throw",
	  "thumb",
	  "thunder",
	  "ticket",
	  "tide",
	  "tiger",
	  "tilt",
	  "timber",
	  "time",
	  "tiny",
	  "tip",
	  "tired",
	  "tissue",
	  "title",
	  "toast",
	  "tobacco",
	  "today",
	  "toddler",
	  "toe",
	  "together",
	  "toilet",
	  "token",
	  "tomato",
	  "tomorrow",
	  "tone",
	  "tongue",
	  "tonight",
	  "tool",
	  "tooth",
	  "top",
	  "topic",
	  "topple",
	  "torch",
	  "tornado",
	  "tortoise",
	  "toss",
	  "total",
	  "tourist",
	  "toward",
	  "tower",
	  "town",
	  "toy",
	  "track",
	  "trade",
	  "traffic",
	  "tragic",
	  "train",
	  "transfer",
	  "trap",
	  "trash",
	  "travel",
	  "tray",
	  "treat",
	  "tree",
	  "trend",
	  "trial",
	  "tribe",
	  "trick",
	  "trigger",
	  "trim",
	  "trip",
	  "trophy",
	  "trouble",
	  "truck",
	  "true",
	  "truly",
	  "trumpet",
	  "trust",
	  "truth",
	  "try",
	  "tube",
	  "tuition",
	  "tumble",
	  "tuna",
	  "tunnel",
	  "turkey",
	  "turn",
	  "turtle",
	  "twelve",
	  "twenty",
	  "twice",
	  "twin",
	  "twist",
	  "two",
	  "type",
	  "typical",
	  "ugly",
	  "umbrella",
	  "unable",
	  "unaware",
	  "uncle",
	  "uncover",
	  "under",
	  "undo",
	  "unfair",
	  "unfold",
	  "unhappy",
	  "uniform",
	  "unique",
	  "unit",
	  "universe",
	  "unknown",
	  "unlock",
	  "until",
	  "unusual",
	  "unveil",
	  "update",
	  "upgrade",
	  "uphold",
	  "upon",
	  "upper",
	  "upset",
	  "urban",
	  "urge",
	  "usage",
	  "use",
	  "used",
	  "useful",
	  "useless",
	  "usual",
	  "utility",
	  "vacant",
	  "vacuum",
	  "vague",
	  "valid",
	  "valley",
	  "valve",
	  "van",
	  "vanish",
	  "vapor",
	  "various",
	  "vast",
	  "vault",
	  "vehicle",
	  "velvet",
	  "vendor",
	  "venture",
	  "venue",
	  "verb",
	  "verify",
	  "version",
	  "very",
	  "vessel",
	  "veteran",
	  "viable",
	  "vibrant",
	  "vicious",
	  "victory",
	  "video",
	  "view",
	  "village",
	  "vintage",
	  "violin",
	  "virtual",
	  "virus",
	  "visa",
	  "visit",
	  "visual",
	  "vital",
	  "vivid",
	  "vocal",
	  "voice",
	  "void",
	  "volcano",
	  "volume",
	  "vote",
	  "voyage",
	  "wage",
	  "wagon",
	  "wait",
	  "walk",
	  "wall",
	  "walnut",
	  "want",
	  "warfare",
	  "warm",
	  "warrior",
	  "wash",
	  "wasp",
	  "waste",
	  "water",
	  "wave",
	  "way",
	  "wealth",
	  "weapon",
	  "wear",
	  "weasel",
	  "weather",
	  "web",
	  "wedding",
	  "weekend",
	  "weird",
	  "welcome",
	  "west",
	  "wet",
	  "whale",
	  "what",
	  "wheat",
	  "wheel",
	  "when",
	  "where",
	  "whip",
	  "whisper",
	  "wide",
	  "width",
	  "wife",
	  "wild",
	  "will",
	  "win",
	  "window",
	  "wine",
	  "wing",
	  "wink",
	  "winner",
	  "winter",
	  "wire",
	  "wisdom",
	  "wise",
	  "wish",
	  "witness",
	  "wolf",
	  "woman",
	  "wonder",
	  "wood",
	  "wool",
	  "word",
	  "work",
	  "world",
	  "worry",
	  "worth",
	  "wrap",
	  "wreck",
	  "wrestle",
	  "wrist",
	  "write",
	  "wrong",
	  "yard",
	  "year",
	  "yellow",
	  "you",
	  "young",
	  "youth",
	  "zebra",
	  "zero",
	  "zone",
	  "zoo"
	]
	;

	var english$1 = /*#__PURE__*/Object.freeze({
		default: english
	});

	var french = [
	  "abaisser",
	  "abandon",
	  "abdiquer",
	  "abeille",
	  "abolir",
	  "aborder",
	  "aboutir",
	  "aboyer",
	  "abrasif",
	  "abreuver",
	  "abriter",
	  "abroger",
	  "abrupt",
	  "absence",
	  "absolu",
	  "absurde",
	  "abusif",
	  "abyssal",
	  "académie",
	  "acajou",
	  "acarien",
	  "accabler",
	  "accepter",
	  "acclamer",
	  "accolade",
	  "accroche",
	  "accuser",
	  "acerbe",
	  "achat",
	  "acheter",
	  "aciduler",
	  "acier",
	  "acompte",
	  "acquérir",
	  "acronyme",
	  "acteur",
	  "actif",
	  "actuel",
	  "adepte",
	  "adéquat",
	  "adhésif",
	  "adjectif",
	  "adjuger",
	  "admettre",
	  "admirer",
	  "adopter",
	  "adorer",
	  "adoucir",
	  "adresse",
	  "adroit",
	  "adulte",
	  "adverbe",
	  "aérer",
	  "aéronef",
	  "affaire",
	  "affecter",
	  "affiche",
	  "affreux",
	  "affubler",
	  "agacer",
	  "agencer",
	  "agile",
	  "agiter",
	  "agrafer",
	  "agréable",
	  "agrume",
	  "aider",
	  "aiguille",
	  "ailier",
	  "aimable",
	  "aisance",
	  "ajouter",
	  "ajuster",
	  "alarmer",
	  "alchimie",
	  "alerte",
	  "algèbre",
	  "algue",
	  "aliéner",
	  "aliment",
	  "alléger",
	  "alliage",
	  "allouer",
	  "allumer",
	  "alourdir",
	  "alpaga",
	  "altesse",
	  "alvéole",
	  "amateur",
	  "ambigu",
	  "ambre",
	  "aménager",
	  "amertume",
	  "amidon",
	  "amiral",
	  "amorcer",
	  "amour",
	  "amovible",
	  "amphibie",
	  "ampleur",
	  "amusant",
	  "analyse",
	  "anaphore",
	  "anarchie",
	  "anatomie",
	  "ancien",
	  "anéantir",
	  "angle",
	  "angoisse",
	  "anguleux",
	  "animal",
	  "annexer",
	  "annonce",
	  "annuel",
	  "anodin",
	  "anomalie",
	  "anonyme",
	  "anormal",
	  "antenne",
	  "antidote",
	  "anxieux",
	  "apaiser",
	  "apéritif",
	  "aplanir",
	  "apologie",
	  "appareil",
	  "appeler",
	  "apporter",
	  "appuyer",
	  "aquarium",
	  "aqueduc",
	  "arbitre",
	  "arbuste",
	  "ardeur",
	  "ardoise",
	  "argent",
	  "arlequin",
	  "armature",
	  "armement",
	  "armoire",
	  "armure",
	  "arpenter",
	  "arracher",
	  "arriver",
	  "arroser",
	  "arsenic",
	  "artériel",
	  "article",
	  "aspect",
	  "asphalte",
	  "aspirer",
	  "assaut",
	  "asservir",
	  "assiette",
	  "associer",
	  "assurer",
	  "asticot",
	  "astre",
	  "astuce",
	  "atelier",
	  "atome",
	  "atrium",
	  "atroce",
	  "attaque",
	  "attentif",
	  "attirer",
	  "attraper",
	  "aubaine",
	  "auberge",
	  "audace",
	  "audible",
	  "augurer",
	  "aurore",
	  "automne",
	  "autruche",
	  "avaler",
	  "avancer",
	  "avarice",
	  "avenir",
	  "averse",
	  "aveugle",
	  "aviateur",
	  "avide",
	  "avion",
	  "aviser",
	  "avoine",
	  "avouer",
	  "avril",
	  "axial",
	  "axiome",
	  "badge",
	  "bafouer",
	  "bagage",
	  "baguette",
	  "baignade",
	  "balancer",
	  "balcon",
	  "baleine",
	  "balisage",
	  "bambin",
	  "bancaire",
	  "bandage",
	  "banlieue",
	  "bannière",
	  "banquier",
	  "barbier",
	  "baril",
	  "baron",
	  "barque",
	  "barrage",
	  "bassin",
	  "bastion",
	  "bataille",
	  "bateau",
	  "batterie",
	  "baudrier",
	  "bavarder",
	  "belette",
	  "bélier",
	  "belote",
	  "bénéfice",
	  "berceau",
	  "berger",
	  "berline",
	  "bermuda",
	  "besace",
	  "besogne",
	  "bétail",
	  "beurre",
	  "biberon",
	  "bicycle",
	  "bidule",
	  "bijou",
	  "bilan",
	  "bilingue",
	  "billard",
	  "binaire",
	  "biologie",
	  "biopsie",
	  "biotype",
	  "biscuit",
	  "bison",
	  "bistouri",
	  "bitume",
	  "bizarre",
	  "blafard",
	  "blague",
	  "blanchir",
	  "blessant",
	  "blinder",
	  "blond",
	  "bloquer",
	  "blouson",
	  "bobard",
	  "bobine",
	  "boire",
	  "boiser",
	  "bolide",
	  "bonbon",
	  "bondir",
	  "bonheur",
	  "bonifier",
	  "bonus",
	  "bordure",
	  "borne",
	  "botte",
	  "boucle",
	  "boueux",
	  "bougie",
	  "boulon",
	  "bouquin",
	  "bourse",
	  "boussole",
	  "boutique",
	  "boxeur",
	  "branche",
	  "brasier",
	  "brave",
	  "brebis",
	  "brèche",
	  "breuvage",
	  "bricoler",
	  "brigade",
	  "brillant",
	  "brioche",
	  "brique",
	  "brochure",
	  "broder",
	  "bronzer",
	  "brousse",
	  "broyeur",
	  "brume",
	  "brusque",
	  "brutal",
	  "bruyant",
	  "buffle",
	  "buisson",
	  "bulletin",
	  "bureau",
	  "burin",
	  "bustier",
	  "butiner",
	  "butoir",
	  "buvable",
	  "buvette",
	  "cabanon",
	  "cabine",
	  "cachette",
	  "cadeau",
	  "cadre",
	  "caféine",
	  "caillou",
	  "caisson",
	  "calculer",
	  "calepin",
	  "calibre",
	  "calmer",
	  "calomnie",
	  "calvaire",
	  "camarade",
	  "caméra",
	  "camion",
	  "campagne",
	  "canal",
	  "caneton",
	  "canon",
	  "cantine",
	  "canular",
	  "capable",
	  "caporal",
	  "caprice",
	  "capsule",
	  "capter",
	  "capuche",
	  "carabine",
	  "carbone",
	  "caresser",
	  "caribou",
	  "carnage",
	  "carotte",
	  "carreau",
	  "carton",
	  "cascade",
	  "casier",
	  "casque",
	  "cassure",
	  "causer",
	  "caution",
	  "cavalier",
	  "caverne",
	  "caviar",
	  "cédille",
	  "ceinture",
	  "céleste",
	  "cellule",
	  "cendrier",
	  "censurer",
	  "central",
	  "cercle",
	  "cérébral",
	  "cerise",
	  "cerner",
	  "cerveau",
	  "cesser",
	  "chagrin",
	  "chaise",
	  "chaleur",
	  "chambre",
	  "chance",
	  "chapitre",
	  "charbon",
	  "chasseur",
	  "chaton",
	  "chausson",
	  "chavirer",
	  "chemise",
	  "chenille",
	  "chéquier",
	  "chercher",
	  "cheval",
	  "chien",
	  "chiffre",
	  "chignon",
	  "chimère",
	  "chiot",
	  "chlorure",
	  "chocolat",
	  "choisir",
	  "chose",
	  "chouette",
	  "chrome",
	  "chute",
	  "cigare",
	  "cigogne",
	  "cimenter",
	  "cinéma",
	  "cintrer",
	  "circuler",
	  "cirer",
	  "cirque",
	  "citerne",
	  "citoyen",
	  "citron",
	  "civil",
	  "clairon",
	  "clameur",
	  "claquer",
	  "classe",
	  "clavier",
	  "client",
	  "cligner",
	  "climat",
	  "clivage",
	  "cloche",
	  "clonage",
	  "cloporte",
	  "cobalt",
	  "cobra",
	  "cocasse",
	  "cocotier",
	  "coder",
	  "codifier",
	  "coffre",
	  "cogner",
	  "cohésion",
	  "coiffer",
	  "coincer",
	  "colère",
	  "colibri",
	  "colline",
	  "colmater",
	  "colonel",
	  "combat",
	  "comédie",
	  "commande",
	  "compact",
	  "concert",
	  "conduire",
	  "confier",
	  "congeler",
	  "connoter",
	  "consonne",
	  "contact",
	  "convexe",
	  "copain",
	  "copie",
	  "corail",
	  "corbeau",
	  "cordage",
	  "corniche",
	  "corpus",
	  "correct",
	  "cortège",
	  "cosmique",
	  "costume",
	  "coton",
	  "coude",
	  "coupure",
	  "courage",
	  "couteau",
	  "couvrir",
	  "coyote",
	  "crabe",
	  "crainte",
	  "cravate",
	  "crayon",
	  "créature",
	  "créditer",
	  "crémeux",
	  "creuser",
	  "crevette",
	  "cribler",
	  "crier",
	  "cristal",
	  "critère",
	  "croire",
	  "croquer",
	  "crotale",
	  "crucial",
	  "cruel",
	  "crypter",
	  "cubique",
	  "cueillir",
	  "cuillère",
	  "cuisine",
	  "cuivre",
	  "culminer",
	  "cultiver",
	  "cumuler",
	  "cupide",
	  "curatif",
	  "curseur",
	  "cyanure",
	  "cycle",
	  "cylindre",
	  "cynique",
	  "daigner",
	  "damier",
	  "danger",
	  "danseur",
	  "dauphin",
	  "débattre",
	  "débiter",
	  "déborder",
	  "débrider",
	  "débutant",
	  "décaler",
	  "décembre",
	  "déchirer",
	  "décider",
	  "déclarer",
	  "décorer",
	  "décrire",
	  "décupler",
	  "dédale",
	  "déductif",
	  "déesse",
	  "défensif",
	  "défiler",
	  "défrayer",
	  "dégager",
	  "dégivrer",
	  "déglutir",
	  "dégrafer",
	  "déjeuner",
	  "délice",
	  "déloger",
	  "demander",
	  "demeurer",
	  "démolir",
	  "dénicher",
	  "dénouer",
	  "dentelle",
	  "dénuder",
	  "départ",
	  "dépenser",
	  "déphaser",
	  "déplacer",
	  "déposer",
	  "déranger",
	  "dérober",
	  "désastre",
	  "descente",
	  "désert",
	  "désigner",
	  "désobéir",
	  "dessiner",
	  "destrier",
	  "détacher",
	  "détester",
	  "détourer",
	  "détresse",
	  "devancer",
	  "devenir",
	  "deviner",
	  "devoir",
	  "diable",
	  "dialogue",
	  "diamant",
	  "dicter",
	  "différer",
	  "digérer",
	  "digital",
	  "digne",
	  "diluer",
	  "dimanche",
	  "diminuer",
	  "dioxyde",
	  "directif",
	  "diriger",
	  "discuter",
	  "disposer",
	  "dissiper",
	  "distance",
	  "divertir",
	  "diviser",
	  "docile",
	  "docteur",
	  "dogme",
	  "doigt",
	  "domaine",
	  "domicile",
	  "dompter",
	  "donateur",
	  "donjon",
	  "donner",
	  "dopamine",
	  "dortoir",
	  "dorure",
	  "dosage",
	  "doseur",
	  "dossier",
	  "dotation",
	  "douanier",
	  "double",
	  "douceur",
	  "douter",
	  "doyen",
	  "dragon",
	  "draper",
	  "dresser",
	  "dribbler",
	  "droiture",
	  "duperie",
	  "duplexe",
	  "durable",
	  "durcir",
	  "dynastie",
	  "éblouir",
	  "écarter",
	  "écharpe",
	  "échelle",
	  "éclairer",
	  "éclipse",
	  "éclore",
	  "écluse",
	  "école",
	  "économie",
	  "écorce",
	  "écouter",
	  "écraser",
	  "écrémer",
	  "écrivain",
	  "écrou",
	  "écume",
	  "écureuil",
	  "édifier",
	  "éduquer",
	  "effacer",
	  "effectif",
	  "effigie",
	  "effort",
	  "effrayer",
	  "effusion",
	  "égaliser",
	  "égarer",
	  "éjecter",
	  "élaborer",
	  "élargir",
	  "électron",
	  "élégant",
	  "éléphant",
	  "élève",
	  "éligible",
	  "élitisme",
	  "éloge",
	  "élucider",
	  "éluder",
	  "emballer",
	  "embellir",
	  "embryon",
	  "émeraude",
	  "émission",
	  "emmener",
	  "émotion",
	  "émouvoir",
	  "empereur",
	  "employer",
	  "emporter",
	  "emprise",
	  "émulsion",
	  "encadrer",
	  "enchère",
	  "enclave",
	  "encoche",
	  "endiguer",
	  "endosser",
	  "endroit",
	  "enduire",
	  "énergie",
	  "enfance",
	  "enfermer",
	  "enfouir",
	  "engager",
	  "engin",
	  "englober",
	  "énigme",
	  "enjamber",
	  "enjeu",
	  "enlever",
	  "ennemi",
	  "ennuyeux",
	  "enrichir",
	  "enrobage",
	  "enseigne",
	  "entasser",
	  "entendre",
	  "entier",
	  "entourer",
	  "entraver",
	  "énumérer",
	  "envahir",
	  "enviable",
	  "envoyer",
	  "enzyme",
	  "éolien",
	  "épaissir",
	  "épargne",
	  "épatant",
	  "épaule",
	  "épicerie",
	  "épidémie",
	  "épier",
	  "épilogue",
	  "épine",
	  "épisode",
	  "épitaphe",
	  "époque",
	  "épreuve",
	  "éprouver",
	  "épuisant",
	  "équerre",
	  "équipe",
	  "ériger",
	  "érosion",
	  "erreur",
	  "éruption",
	  "escalier",
	  "espadon",
	  "espèce",
	  "espiègle",
	  "espoir",
	  "esprit",
	  "esquiver",
	  "essayer",
	  "essence",
	  "essieu",
	  "essorer",
	  "estime",
	  "estomac",
	  "estrade",
	  "étagère",
	  "étaler",
	  "étanche",
	  "étatique",
	  "éteindre",
	  "étendoir",
	  "éternel",
	  "éthanol",
	  "éthique",
	  "ethnie",
	  "étirer",
	  "étoffer",
	  "étoile",
	  "étonnant",
	  "étourdir",
	  "étrange",
	  "étroit",
	  "étude",
	  "euphorie",
	  "évaluer",
	  "évasion",
	  "éventail",
	  "évidence",
	  "éviter",
	  "évolutif",
	  "évoquer",
	  "exact",
	  "exagérer",
	  "exaucer",
	  "exceller",
	  "excitant",
	  "exclusif",
	  "excuse",
	  "exécuter",
	  "exemple",
	  "exercer",
	  "exhaler",
	  "exhorter",
	  "exigence",
	  "exiler",
	  "exister",
	  "exotique",
	  "expédier",
	  "explorer",
	  "exposer",
	  "exprimer",
	  "exquis",
	  "extensif",
	  "extraire",
	  "exulter",
	  "fable",
	  "fabuleux",
	  "facette",
	  "facile",
	  "facture",
	  "faiblir",
	  "falaise",
	  "fameux",
	  "famille",
	  "farceur",
	  "farfelu",
	  "farine",
	  "farouche",
	  "fasciner",
	  "fatal",
	  "fatigue",
	  "faucon",
	  "fautif",
	  "faveur",
	  "favori",
	  "fébrile",
	  "féconder",
	  "fédérer",
	  "félin",
	  "femme",
	  "fémur",
	  "fendoir",
	  "féodal",
	  "fermer",
	  "féroce",
	  "ferveur",
	  "festival",
	  "feuille",
	  "feutre",
	  "février",
	  "fiasco",
	  "ficeler",
	  "fictif",
	  "fidèle",
	  "figure",
	  "filature",
	  "filetage",
	  "filière",
	  "filleul",
	  "filmer",
	  "filou",
	  "filtrer",
	  "financer",
	  "finir",
	  "fiole",
	  "firme",
	  "fissure",
	  "fixer",
	  "flairer",
	  "flamme",
	  "flasque",
	  "flatteur",
	  "fléau",
	  "flèche",
	  "fleur",
	  "flexion",
	  "flocon",
	  "flore",
	  "fluctuer",
	  "fluide",
	  "fluvial",
	  "folie",
	  "fonderie",
	  "fongible",
	  "fontaine",
	  "forcer",
	  "forgeron",
	  "formuler",
	  "fortune",
	  "fossile",
	  "foudre",
	  "fougère",
	  "fouiller",
	  "foulure",
	  "fourmi",
	  "fragile",
	  "fraise",
	  "franchir",
	  "frapper",
	  "frayeur",
	  "frégate",
	  "freiner",
	  "frelon",
	  "frémir",
	  "frénésie",
	  "frère",
	  "friable",
	  "friction",
	  "frisson",
	  "frivole",
	  "froid",
	  "fromage",
	  "frontal",
	  "frotter",
	  "fruit",
	  "fugitif",
	  "fuite",
	  "fureur",
	  "furieux",
	  "furtif",
	  "fusion",
	  "futur",
	  "gagner",
	  "galaxie",
	  "galerie",
	  "gambader",
	  "garantir",
	  "gardien",
	  "garnir",
	  "garrigue",
	  "gazelle",
	  "gazon",
	  "géant",
	  "gélatine",
	  "gélule",
	  "gendarme",
	  "général",
	  "génie",
	  "genou",
	  "gentil",
	  "géologie",
	  "géomètre",
	  "géranium",
	  "germe",
	  "gestuel",
	  "geyser",
	  "gibier",
	  "gicler",
	  "girafe",
	  "givre",
	  "glace",
	  "glaive",
	  "glisser",
	  "globe",
	  "gloire",
	  "glorieux",
	  "golfeur",
	  "gomme",
	  "gonfler",
	  "gorge",
	  "gorille",
	  "goudron",
	  "gouffre",
	  "goulot",
	  "goupille",
	  "gourmand",
	  "goutte",
	  "graduel",
	  "graffiti",
	  "graine",
	  "grand",
	  "grappin",
	  "gratuit",
	  "gravir",
	  "grenat",
	  "griffure",
	  "griller",
	  "grimper",
	  "grogner",
	  "gronder",
	  "grotte",
	  "groupe",
	  "gruger",
	  "grutier",
	  "gruyère",
	  "guépard",
	  "guerrier",
	  "guide",
	  "guimauve",
	  "guitare",
	  "gustatif",
	  "gymnaste",
	  "gyrostat",
	  "habitude",
	  "hachoir",
	  "halte",
	  "hameau",
	  "hangar",
	  "hanneton",
	  "haricot",
	  "harmonie",
	  "harpon",
	  "hasard",
	  "hélium",
	  "hématome",
	  "herbe",
	  "hérisson",
	  "hermine",
	  "héron",
	  "hésiter",
	  "heureux",
	  "hiberner",
	  "hibou",
	  "hilarant",
	  "histoire",
	  "hiver",
	  "homard",
	  "hommage",
	  "homogène",
	  "honneur",
	  "honorer",
	  "honteux",
	  "horde",
	  "horizon",
	  "horloge",
	  "hormone",
	  "horrible",
	  "houleux",
	  "housse",
	  "hublot",
	  "huileux",
	  "humain",
	  "humble",
	  "humide",
	  "humour",
	  "hurler",
	  "hydromel",
	  "hygiène",
	  "hymne",
	  "hypnose",
	  "idylle",
	  "ignorer",
	  "iguane",
	  "illicite",
	  "illusion",
	  "image",
	  "imbiber",
	  "imiter",
	  "immense",
	  "immobile",
	  "immuable",
	  "impact",
	  "impérial",
	  "implorer",
	  "imposer",
	  "imprimer",
	  "imputer",
	  "incarner",
	  "incendie",
	  "incident",
	  "incliner",
	  "incolore",
	  "indexer",
	  "indice",
	  "inductif",
	  "inédit",
	  "ineptie",
	  "inexact",
	  "infini",
	  "infliger",
	  "informer",
	  "infusion",
	  "ingérer",
	  "inhaler",
	  "inhiber",
	  "injecter",
	  "injure",
	  "innocent",
	  "inoculer",
	  "inonder",
	  "inscrire",
	  "insecte",
	  "insigne",
	  "insolite",
	  "inspirer",
	  "instinct",
	  "insulter",
	  "intact",
	  "intense",
	  "intime",
	  "intrigue",
	  "intuitif",
	  "inutile",
	  "invasion",
	  "inventer",
	  "inviter",
	  "invoquer",
	  "ironique",
	  "irradier",
	  "irréel",
	  "irriter",
	  "isoler",
	  "ivoire",
	  "ivresse",
	  "jaguar",
	  "jaillir",
	  "jambe",
	  "janvier",
	  "jardin",
	  "jauger",
	  "jaune",
	  "javelot",
	  "jetable",
	  "jeton",
	  "jeudi",
	  "jeunesse",
	  "joindre",
	  "joncher",
	  "jongler",
	  "joueur",
	  "jouissif",
	  "journal",
	  "jovial",
	  "joyau",
	  "joyeux",
	  "jubiler",
	  "jugement",
	  "junior",
	  "jupon",
	  "juriste",
	  "justice",
	  "juteux",
	  "juvénile",
	  "kayak",
	  "kimono",
	  "kiosque",
	  "label",
	  "labial",
	  "labourer",
	  "lacérer",
	  "lactose",
	  "lagune",
	  "laine",
	  "laisser",
	  "laitier",
	  "lambeau",
	  "lamelle",
	  "lampe",
	  "lanceur",
	  "langage",
	  "lanterne",
	  "lapin",
	  "largeur",
	  "larme",
	  "laurier",
	  "lavabo",
	  "lavoir",
	  "lecture",
	  "légal",
	  "léger",
	  "légume",
	  "lessive",
	  "lettre",
	  "levier",
	  "lexique",
	  "lézard",
	  "liasse",
	  "libérer",
	  "libre",
	  "licence",
	  "licorne",
	  "liège",
	  "lièvre",
	  "ligature",
	  "ligoter",
	  "ligue",
	  "limer",
	  "limite",
	  "limonade",
	  "limpide",
	  "linéaire",
	  "lingot",
	  "lionceau",
	  "liquide",
	  "lisière",
	  "lister",
	  "lithium",
	  "litige",
	  "littoral",
	  "livreur",
	  "logique",
	  "lointain",
	  "loisir",
	  "lombric",
	  "loterie",
	  "louer",
	  "lourd",
	  "loutre",
	  "louve",
	  "loyal",
	  "lubie",
	  "lucide",
	  "lucratif",
	  "lueur",
	  "lugubre",
	  "luisant",
	  "lumière",
	  "lunaire",
	  "lundi",
	  "luron",
	  "lutter",
	  "luxueux",
	  "machine",
	  "magasin",
	  "magenta",
	  "magique",
	  "maigre",
	  "maillon",
	  "maintien",
	  "mairie",
	  "maison",
	  "majorer",
	  "malaxer",
	  "maléfice",
	  "malheur",
	  "malice",
	  "mallette",
	  "mammouth",
	  "mandater",
	  "maniable",
	  "manquant",
	  "manteau",
	  "manuel",
	  "marathon",
	  "marbre",
	  "marchand",
	  "mardi",
	  "maritime",
	  "marqueur",
	  "marron",
	  "marteler",
	  "mascotte",
	  "massif",
	  "matériel",
	  "matière",
	  "matraque",
	  "maudire",
	  "maussade",
	  "mauve",
	  "maximal",
	  "méchant",
	  "méconnu",
	  "médaille",
	  "médecin",
	  "méditer",
	  "méduse",
	  "meilleur",
	  "mélange",
	  "mélodie",
	  "membre",
	  "mémoire",
	  "menacer",
	  "mener",
	  "menhir",
	  "mensonge",
	  "mentor",
	  "mercredi",
	  "mérite",
	  "merle",
	  "messager",
	  "mesure",
	  "métal",
	  "météore",
	  "méthode",
	  "métier",
	  "meuble",
	  "miauler",
	  "microbe",
	  "miette",
	  "mignon",
	  "migrer",
	  "milieu",
	  "million",
	  "mimique",
	  "mince",
	  "minéral",
	  "minimal",
	  "minorer",
	  "minute",
	  "miracle",
	  "miroiter",
	  "missile",
	  "mixte",
	  "mobile",
	  "moderne",
	  "moelleux",
	  "mondial",
	  "moniteur",
	  "monnaie",
	  "monotone",
	  "monstre",
	  "montagne",
	  "monument",
	  "moqueur",
	  "morceau",
	  "morsure",
	  "mortier",
	  "moteur",
	  "motif",
	  "mouche",
	  "moufle",
	  "moulin",
	  "mousson",
	  "mouton",
	  "mouvant",
	  "multiple",
	  "munition",
	  "muraille",
	  "murène",
	  "murmure",
	  "muscle",
	  "muséum",
	  "musicien",
	  "mutation",
	  "muter",
	  "mutuel",
	  "myriade",
	  "myrtille",
	  "mystère",
	  "mythique",
	  "nageur",
	  "nappe",
	  "narquois",
	  "narrer",
	  "natation",
	  "nation",
	  "nature",
	  "naufrage",
	  "nautique",
	  "navire",
	  "nébuleux",
	  "nectar",
	  "néfaste",
	  "négation",
	  "négliger",
	  "négocier",
	  "neige",
	  "nerveux",
	  "nettoyer",
	  "neurone",
	  "neutron",
	  "neveu",
	  "niche",
	  "nickel",
	  "nitrate",
	  "niveau",
	  "noble",
	  "nocif",
	  "nocturne",
	  "noirceur",
	  "noisette",
	  "nomade",
	  "nombreux",
	  "nommer",
	  "normatif",
	  "notable",
	  "notifier",
	  "notoire",
	  "nourrir",
	  "nouveau",
	  "novateur",
	  "novembre",
	  "novice",
	  "nuage",
	  "nuancer",
	  "nuire",
	  "nuisible",
	  "numéro",
	  "nuptial",
	  "nuque",
	  "nutritif",
	  "obéir",
	  "objectif",
	  "obliger",
	  "obscur",
	  "observer",
	  "obstacle",
	  "obtenir",
	  "obturer",
	  "occasion",
	  "occuper",
	  "océan",
	  "octobre",
	  "octroyer",
	  "octupler",
	  "oculaire",
	  "odeur",
	  "odorant",
	  "offenser",
	  "officier",
	  "offrir",
	  "ogive",
	  "oiseau",
	  "oisillon",
	  "olfactif",
	  "olivier",
	  "ombrage",
	  "omettre",
	  "onctueux",
	  "onduler",
	  "onéreux",
	  "onirique",
	  "opale",
	  "opaque",
	  "opérer",
	  "opinion",
	  "opportun",
	  "opprimer",
	  "opter",
	  "optique",
	  "orageux",
	  "orange",
	  "orbite",
	  "ordonner",
	  "oreille",
	  "organe",
	  "orgueil",
	  "orifice",
	  "ornement",
	  "orque",
	  "ortie",
	  "osciller",
	  "osmose",
	  "ossature",
	  "otarie",
	  "ouragan",
	  "ourson",
	  "outil",
	  "outrager",
	  "ouvrage",
	  "ovation",
	  "oxyde",
	  "oxygène",
	  "ozone",
	  "paisible",
	  "palace",
	  "palmarès",
	  "palourde",
	  "palper",
	  "panache",
	  "panda",
	  "pangolin",
	  "paniquer",
	  "panneau",
	  "panorama",
	  "pantalon",
	  "papaye",
	  "papier",
	  "papoter",
	  "papyrus",
	  "paradoxe",
	  "parcelle",
	  "paresse",
	  "parfumer",
	  "parler",
	  "parole",
	  "parrain",
	  "parsemer",
	  "partager",
	  "parure",
	  "parvenir",
	  "passion",
	  "pastèque",
	  "paternel",
	  "patience",
	  "patron",
	  "pavillon",
	  "pavoiser",
	  "payer",
	  "paysage",
	  "peigne",
	  "peintre",
	  "pelage",
	  "pélican",
	  "pelle",
	  "pelouse",
	  "peluche",
	  "pendule",
	  "pénétrer",
	  "pénible",
	  "pensif",
	  "pénurie",
	  "pépite",
	  "péplum",
	  "perdrix",
	  "perforer",
	  "période",
	  "permuter",
	  "perplexe",
	  "persil",
	  "perte",
	  "peser",
	  "pétale",
	  "petit",
	  "pétrir",
	  "peuple",
	  "pharaon",
	  "phobie",
	  "phoque",
	  "photon",
	  "phrase",
	  "physique",
	  "piano",
	  "pictural",
	  "pièce",
	  "pierre",
	  "pieuvre",
	  "pilote",
	  "pinceau",
	  "pipette",
	  "piquer",
	  "pirogue",
	  "piscine",
	  "piston",
	  "pivoter",
	  "pixel",
	  "pizza",
	  "placard",
	  "plafond",
	  "plaisir",
	  "planer",
	  "plaque",
	  "plastron",
	  "plateau",
	  "pleurer",
	  "plexus",
	  "pliage",
	  "plomb",
	  "plonger",
	  "pluie",
	  "plumage",
	  "pochette",
	  "poésie",
	  "poète",
	  "pointe",
	  "poirier",
	  "poisson",
	  "poivre",
	  "polaire",
	  "policier",
	  "pollen",
	  "polygone",
	  "pommade",
	  "pompier",
	  "ponctuel",
	  "pondérer",
	  "poney",
	  "portique",
	  "position",
	  "posséder",
	  "posture",
	  "potager",
	  "poteau",
	  "potion",
	  "pouce",
	  "poulain",
	  "poumon",
	  "pourpre",
	  "poussin",
	  "pouvoir",
	  "prairie",
	  "pratique",
	  "précieux",
	  "prédire",
	  "préfixe",
	  "prélude",
	  "prénom",
	  "présence",
	  "prétexte",
	  "prévoir",
	  "primitif",
	  "prince",
	  "prison",
	  "priver",
	  "problème",
	  "procéder",
	  "prodige",
	  "profond",
	  "progrès",
	  "proie",
	  "projeter",
	  "prologue",
	  "promener",
	  "propre",
	  "prospère",
	  "protéger",
	  "prouesse",
	  "proverbe",
	  "prudence",
	  "pruneau",
	  "psychose",
	  "public",
	  "puceron",
	  "puiser",
	  "pulpe",
	  "pulsar",
	  "punaise",
	  "punitif",
	  "pupitre",
	  "purifier",
	  "puzzle",
	  "pyramide",
	  "quasar",
	  "querelle",
	  "question",
	  "quiétude",
	  "quitter",
	  "quotient",
	  "racine",
	  "raconter",
	  "radieux",
	  "ragondin",
	  "raideur",
	  "raisin",
	  "ralentir",
	  "rallonge",
	  "ramasser",
	  "rapide",
	  "rasage",
	  "ratisser",
	  "ravager",
	  "ravin",
	  "rayonner",
	  "réactif",
	  "réagir",
	  "réaliser",
	  "réanimer",
	  "recevoir",
	  "réciter",
	  "réclamer",
	  "récolter",
	  "recruter",
	  "reculer",
	  "recycler",
	  "rédiger",
	  "redouter",
	  "refaire",
	  "réflexe",
	  "réformer",
	  "refrain",
	  "refuge",
	  "régalien",
	  "région",
	  "réglage",
	  "régulier",
	  "réitérer",
	  "rejeter",
	  "rejouer",
	  "relatif",
	  "relever",
	  "relief",
	  "remarque",
	  "remède",
	  "remise",
	  "remonter",
	  "remplir",
	  "remuer",
	  "renard",
	  "renfort",
	  "renifler",
	  "renoncer",
	  "rentrer",
	  "renvoi",
	  "replier",
	  "reporter",
	  "reprise",
	  "reptile",
	  "requin",
	  "réserve",
	  "résineux",
	  "résoudre",
	  "respect",
	  "rester",
	  "résultat",
	  "rétablir",
	  "retenir",
	  "réticule",
	  "retomber",
	  "retracer",
	  "réunion",
	  "réussir",
	  "revanche",
	  "revivre",
	  "révolte",
	  "révulsif",
	  "richesse",
	  "rideau",
	  "rieur",
	  "rigide",
	  "rigoler",
	  "rincer",
	  "riposter",
	  "risible",
	  "risque",
	  "rituel",
	  "rival",
	  "rivière",
	  "rocheux",
	  "romance",
	  "rompre",
	  "ronce",
	  "rondin",
	  "roseau",
	  "rosier",
	  "rotatif",
	  "rotor",
	  "rotule",
	  "rouge",
	  "rouille",
	  "rouleau",
	  "routine",
	  "royaume",
	  "ruban",
	  "rubis",
	  "ruche",
	  "ruelle",
	  "rugueux",
	  "ruiner",
	  "ruisseau",
	  "ruser",
	  "rustique",
	  "rythme",
	  "sabler",
	  "saboter",
	  "sabre",
	  "sacoche",
	  "safari",
	  "sagesse",
	  "saisir",
	  "salade",
	  "salive",
	  "salon",
	  "saluer",
	  "samedi",
	  "sanction",
	  "sanglier",
	  "sarcasme",
	  "sardine",
	  "saturer",
	  "saugrenu",
	  "saumon",
	  "sauter",
	  "sauvage",
	  "savant",
	  "savonner",
	  "scalpel",
	  "scandale",
	  "scélérat",
	  "scénario",
	  "sceptre",
	  "schéma",
	  "science",
	  "scinder",
	  "score",
	  "scrutin",
	  "sculpter",
	  "séance",
	  "sécable",
	  "sécher",
	  "secouer",
	  "sécréter",
	  "sédatif",
	  "séduire",
	  "seigneur",
	  "séjour",
	  "sélectif",
	  "semaine",
	  "sembler",
	  "semence",
	  "séminal",
	  "sénateur",
	  "sensible",
	  "sentence",
	  "séparer",
	  "séquence",
	  "serein",
	  "sergent",
	  "sérieux",
	  "serrure",
	  "sérum",
	  "service",
	  "sésame",
	  "sévir",
	  "sevrage",
	  "sextuple",
	  "sidéral",
	  "siècle",
	  "siéger",
	  "siffler",
	  "sigle",
	  "signal",
	  "silence",
	  "silicium",
	  "simple",
	  "sincère",
	  "sinistre",
	  "siphon",
	  "sirop",
	  "sismique",
	  "situer",
	  "skier",
	  "social",
	  "socle",
	  "sodium",
	  "soigneux",
	  "soldat",
	  "soleil",
	  "solitude",
	  "soluble",
	  "sombre",
	  "sommeil",
	  "somnoler",
	  "sonde",
	  "songeur",
	  "sonnette",
	  "sonore",
	  "sorcier",
	  "sortir",
	  "sosie",
	  "sottise",
	  "soucieux",
	  "soudure",
	  "souffle",
	  "soulever",
	  "soupape",
	  "source",
	  "soutirer",
	  "souvenir",
	  "spacieux",
	  "spatial",
	  "spécial",
	  "sphère",
	  "spiral",
	  "stable",
	  "station",
	  "sternum",
	  "stimulus",
	  "stipuler",
	  "strict",
	  "studieux",
	  "stupeur",
	  "styliste",
	  "sublime",
	  "substrat",
	  "subtil",
	  "subvenir",
	  "succès",
	  "sucre",
	  "suffixe",
	  "suggérer",
	  "suiveur",
	  "sulfate",
	  "superbe",
	  "supplier",
	  "surface",
	  "suricate",
	  "surmener",
	  "surprise",
	  "sursaut",
	  "survie",
	  "suspect",
	  "syllabe",
	  "symbole",
	  "symétrie",
	  "synapse",
	  "syntaxe",
	  "système",
	  "tabac",
	  "tablier",
	  "tactile",
	  "tailler",
	  "talent",
	  "talisman",
	  "talonner",
	  "tambour",
	  "tamiser",
	  "tangible",
	  "tapis",
	  "taquiner",
	  "tarder",
	  "tarif",
	  "tartine",
	  "tasse",
	  "tatami",
	  "tatouage",
	  "taupe",
	  "taureau",
	  "taxer",
	  "témoin",
	  "temporel",
	  "tenaille",
	  "tendre",
	  "teneur",
	  "tenir",
	  "tension",
	  "terminer",
	  "terne",
	  "terrible",
	  "tétine",
	  "texte",
	  "thème",
	  "théorie",
	  "thérapie",
	  "thorax",
	  "tibia",
	  "tiède",
	  "timide",
	  "tirelire",
	  "tiroir",
	  "tissu",
	  "titane",
	  "titre",
	  "tituber",
	  "toboggan",
	  "tolérant",
	  "tomate",
	  "tonique",
	  "tonneau",
	  "toponyme",
	  "torche",
	  "tordre",
	  "tornade",
	  "torpille",
	  "torrent",
	  "torse",
	  "tortue",
	  "totem",
	  "toucher",
	  "tournage",
	  "tousser",
	  "toxine",
	  "traction",
	  "trafic",
	  "tragique",
	  "trahir",
	  "train",
	  "trancher",
	  "travail",
	  "trèfle",
	  "tremper",
	  "trésor",
	  "treuil",
	  "triage",
	  "tribunal",
	  "tricoter",
	  "trilogie",
	  "triomphe",
	  "tripler",
	  "triturer",
	  "trivial",
	  "trombone",
	  "tronc",
	  "tropical",
	  "troupeau",
	  "tuile",
	  "tulipe",
	  "tumulte",
	  "tunnel",
	  "turbine",
	  "tuteur",
	  "tutoyer",
	  "tuyau",
	  "tympan",
	  "typhon",
	  "typique",
	  "tyran",
	  "ubuesque",
	  "ultime",
	  "ultrason",
	  "unanime",
	  "unifier",
	  "union",
	  "unique",
	  "unitaire",
	  "univers",
	  "uranium",
	  "urbain",
	  "urticant",
	  "usage",
	  "usine",
	  "usuel",
	  "usure",
	  "utile",
	  "utopie",
	  "vacarme",
	  "vaccin",
	  "vagabond",
	  "vague",
	  "vaillant",
	  "vaincre",
	  "vaisseau",
	  "valable",
	  "valise",
	  "vallon",
	  "valve",
	  "vampire",
	  "vanille",
	  "vapeur",
	  "varier",
	  "vaseux",
	  "vassal",
	  "vaste",
	  "vecteur",
	  "vedette",
	  "végétal",
	  "véhicule",
	  "veinard",
	  "véloce",
	  "vendredi",
	  "vénérer",
	  "venger",
	  "venimeux",
	  "ventouse",
	  "verdure",
	  "vérin",
	  "vernir",
	  "verrou",
	  "verser",
	  "vertu",
	  "veston",
	  "vétéran",
	  "vétuste",
	  "vexant",
	  "vexer",
	  "viaduc",
	  "viande",
	  "victoire",
	  "vidange",
	  "vidéo",
	  "vignette",
	  "vigueur",
	  "vilain",
	  "village",
	  "vinaigre",
	  "violon",
	  "vipère",
	  "virement",
	  "virtuose",
	  "virus",
	  "visage",
	  "viseur",
	  "vision",
	  "visqueux",
	  "visuel",
	  "vital",
	  "vitesse",
	  "viticole",
	  "vitrine",
	  "vivace",
	  "vivipare",
	  "vocation",
	  "voguer",
	  "voile",
	  "voisin",
	  "voiture",
	  "volaille",
	  "volcan",
	  "voltiger",
	  "volume",
	  "vorace",
	  "vortex",
	  "voter",
	  "vouloir",
	  "voyage",
	  "voyelle",
	  "wagon",
	  "xénon",
	  "yacht",
	  "zèbre",
	  "zénith",
	  "zeste",
	  "zoologie"
	]
	;

	var french$1 = /*#__PURE__*/Object.freeze({
		default: french
	});

	var italian = [
	  "abaco",
	  "abbaglio",
	  "abbinato",
	  "abete",
	  "abisso",
	  "abolire",
	  "abrasivo",
	  "abrogato",
	  "accadere",
	  "accenno",
	  "accusato",
	  "acetone",
	  "achille",
	  "acido",
	  "acqua",
	  "acre",
	  "acrilico",
	  "acrobata",
	  "acuto",
	  "adagio",
	  "addebito",
	  "addome",
	  "adeguato",
	  "aderire",
	  "adipe",
	  "adottare",
	  "adulare",
	  "affabile",
	  "affetto",
	  "affisso",
	  "affranto",
	  "aforisma",
	  "afoso",
	  "africano",
	  "agave",
	  "agente",
	  "agevole",
	  "aggancio",
	  "agire",
	  "agitare",
	  "agonismo",
	  "agricolo",
	  "agrumeto",
	  "aguzzo",
	  "alabarda",
	  "alato",
	  "albatro",
	  "alberato",
	  "albo",
	  "albume",
	  "alce",
	  "alcolico",
	  "alettone",
	  "alfa",
	  "algebra",
	  "aliante",
	  "alibi",
	  "alimento",
	  "allagato",
	  "allegro",
	  "allievo",
	  "allodola",
	  "allusivo",
	  "almeno",
	  "alogeno",
	  "alpaca",
	  "alpestre",
	  "altalena",
	  "alterno",
	  "alticcio",
	  "altrove",
	  "alunno",
	  "alveolo",
	  "alzare",
	  "amalgama",
	  "amanita",
	  "amarena",
	  "ambito",
	  "ambrato",
	  "ameba",
	  "america",
	  "ametista",
	  "amico",
	  "ammasso",
	  "ammenda",
	  "ammirare",
	  "ammonito",
	  "amore",
	  "ampio",
	  "ampliare",
	  "amuleto",
	  "anacardo",
	  "anagrafe",
	  "analista",
	  "anarchia",
	  "anatra",
	  "anca",
	  "ancella",
	  "ancora",
	  "andare",
	  "andrea",
	  "anello",
	  "angelo",
	  "angolare",
	  "angusto",
	  "anima",
	  "annegare",
	  "annidato",
	  "anno",
	  "annuncio",
	  "anonimo",
	  "anticipo",
	  "anzi",
	  "apatico",
	  "apertura",
	  "apode",
	  "apparire",
	  "appetito",
	  "appoggio",
	  "approdo",
	  "appunto",
	  "aprile",
	  "arabica",
	  "arachide",
	  "aragosta",
	  "araldica",
	  "arancio",
	  "aratura",
	  "arazzo",
	  "arbitro",
	  "archivio",
	  "ardito",
	  "arenile",
	  "argento",
	  "argine",
	  "arguto",
	  "aria",
	  "armonia",
	  "arnese",
	  "arredato",
	  "arringa",
	  "arrosto",
	  "arsenico",
	  "arso",
	  "artefice",
	  "arzillo",
	  "asciutto",
	  "ascolto",
	  "asepsi",
	  "asettico",
	  "asfalto",
	  "asino",
	  "asola",
	  "aspirato",
	  "aspro",
	  "assaggio",
	  "asse",
	  "assoluto",
	  "assurdo",
	  "asta",
	  "astenuto",
	  "astice",
	  "astratto",
	  "atavico",
	  "ateismo",
	  "atomico",
	  "atono",
	  "attesa",
	  "attivare",
	  "attorno",
	  "attrito",
	  "attuale",
	  "ausilio",
	  "austria",
	  "autista",
	  "autonomo",
	  "autunno",
	  "avanzato",
	  "avere",
	  "avvenire",
	  "avviso",
	  "avvolgere",
	  "azione",
	  "azoto",
	  "azzimo",
	  "azzurro",
	  "babele",
	  "baccano",
	  "bacino",
	  "baco",
	  "badessa",
	  "badilata",
	  "bagnato",
	  "baita",
	  "balcone",
	  "baldo",
	  "balena",
	  "ballata",
	  "balzano",
	  "bambino",
	  "bandire",
	  "baraonda",
	  "barbaro",
	  "barca",
	  "baritono",
	  "barlume",
	  "barocco",
	  "basilico",
	  "basso",
	  "batosta",
	  "battuto",
	  "baule",
	  "bava",
	  "bavosa",
	  "becco",
	  "beffa",
	  "belgio",
	  "belva",
	  "benda",
	  "benevole",
	  "benigno",
	  "benzina",
	  "bere",
	  "berlina",
	  "beta",
	  "bibita",
	  "bici",
	  "bidone",
	  "bifido",
	  "biga",
	  "bilancia",
	  "bimbo",
	  "binocolo",
	  "biologo",
	  "bipede",
	  "bipolare",
	  "birbante",
	  "birra",
	  "biscotto",
	  "bisesto",
	  "bisnonno",
	  "bisonte",
	  "bisturi",
	  "bizzarro",
	  "blando",
	  "blatta",
	  "bollito",
	  "bonifico",
	  "bordo",
	  "bosco",
	  "botanico",
	  "bottino",
	  "bozzolo",
	  "braccio",
	  "bradipo",
	  "brama",
	  "branca",
	  "bravura",
	  "bretella",
	  "brevetto",
	  "brezza",
	  "briglia",
	  "brillante",
	  "brindare",
	  "broccolo",
	  "brodo",
	  "bronzina",
	  "brullo",
	  "bruno",
	  "bubbone",
	  "buca",
	  "budino",
	  "buffone",
	  "buio",
	  "bulbo",
	  "buono",
	  "burlone",
	  "burrasca",
	  "bussola",
	  "busta",
	  "cadetto",
	  "caduco",
	  "calamaro",
	  "calcolo",
	  "calesse",
	  "calibro",
	  "calmo",
	  "caloria",
	  "cambusa",
	  "camerata",
	  "camicia",
	  "cammino",
	  "camola",
	  "campale",
	  "canapa",
	  "candela",
	  "cane",
	  "canino",
	  "canotto",
	  "cantina",
	  "capace",
	  "capello",
	  "capitolo",
	  "capogiro",
	  "cappero",
	  "capra",
	  "capsula",
	  "carapace",
	  "carcassa",
	  "cardo",
	  "carisma",
	  "carovana",
	  "carretto",
	  "cartolina",
	  "casaccio",
	  "cascata",
	  "caserma",
	  "caso",
	  "cassone",
	  "castello",
	  "casuale",
	  "catasta",
	  "catena",
	  "catrame",
	  "cauto",
	  "cavillo",
	  "cedibile",
	  "cedrata",
	  "cefalo",
	  "celebre",
	  "cellulare",
	  "cena",
	  "cenone",
	  "centesimo",
	  "ceramica",
	  "cercare",
	  "certo",
	  "cerume",
	  "cervello",
	  "cesoia",
	  "cespo",
	  "ceto",
	  "chela",
	  "chiaro",
	  "chicca",
	  "chiedere",
	  "chimera",
	  "china",
	  "chirurgo",
	  "chitarra",
	  "ciao",
	  "ciclismo",
	  "cifrare",
	  "cigno",
	  "cilindro",
	  "ciottolo",
	  "circa",
	  "cirrosi",
	  "citrico",
	  "cittadino",
	  "ciuffo",
	  "civetta",
	  "civile",
	  "classico",
	  "clinica",
	  "cloro",
	  "cocco",
	  "codardo",
	  "codice",
	  "coerente",
	  "cognome",
	  "collare",
	  "colmato",
	  "colore",
	  "colposo",
	  "coltivato",
	  "colza",
	  "coma",
	  "cometa",
	  "commando",
	  "comodo",
	  "computer",
	  "comune",
	  "conciso",
	  "condurre",
	  "conferma",
	  "congelare",
	  "coniuge",
	  "connesso",
	  "conoscere",
	  "consumo",
	  "continuo",
	  "convegno",
	  "coperto",
	  "copione",
	  "coppia",
	  "copricapo",
	  "corazza",
	  "cordata",
	  "coricato",
	  "cornice",
	  "corolla",
	  "corpo",
	  "corredo",
	  "corsia",
	  "cortese",
	  "cosmico",
	  "costante",
	  "cottura",
	  "covato",
	  "cratere",
	  "cravatta",
	  "creato",
	  "credere",
	  "cremoso",
	  "crescita",
	  "creta",
	  "criceto",
	  "crinale",
	  "crisi",
	  "critico",
	  "croce",
	  "cronaca",
	  "crostata",
	  "cruciale",
	  "crusca",
	  "cucire",
	  "cuculo",
	  "cugino",
	  "cullato",
	  "cupola",
	  "curatore",
	  "cursore",
	  "curvo",
	  "cuscino",
	  "custode",
	  "dado",
	  "daino",
	  "dalmata",
	  "damerino",
	  "daniela",
	  "dannoso",
	  "danzare",
	  "datato",
	  "davanti",
	  "davvero",
	  "debutto",
	  "decennio",
	  "deciso",
	  "declino",
	  "decollo",
	  "decreto",
	  "dedicato",
	  "definito",
	  "deforme",
	  "degno",
	  "delegare",
	  "delfino",
	  "delirio",
	  "delta",
	  "demenza",
	  "denotato",
	  "dentro",
	  "deposito",
	  "derapata",
	  "derivare",
	  "deroga",
	  "descritto",
	  "deserto",
	  "desiderio",
	  "desumere",
	  "detersivo",
	  "devoto",
	  "diametro",
	  "dicembre",
	  "diedro",
	  "difeso",
	  "diffuso",
	  "digerire",
	  "digitale",
	  "diluvio",
	  "dinamico",
	  "dinnanzi",
	  "dipinto",
	  "diploma",
	  "dipolo",
	  "diradare",
	  "dire",
	  "dirotto",
	  "dirupo",
	  "disagio",
	  "discreto",
	  "disfare",
	  "disgelo",
	  "disposto",
	  "distanza",
	  "disumano",
	  "dito",
	  "divano",
	  "divelto",
	  "dividere",
	  "divorato",
	  "doblone",
	  "docente",
	  "doganale",
	  "dogma",
	  "dolce",
	  "domato",
	  "domenica",
	  "dominare",
	  "dondolo",
	  "dono",
	  "dormire",
	  "dote",
	  "dottore",
	  "dovuto",
	  "dozzina",
	  "drago",
	  "druido",
	  "dubbio",
	  "dubitare",
	  "ducale",
	  "duna",
	  "duomo",
	  "duplice",
	  "duraturo",
	  "ebano",
	  "eccesso",
	  "ecco",
	  "eclissi",
	  "economia",
	  "edera",
	  "edicola",
	  "edile",
	  "editoria",
	  "educare",
	  "egemonia",
	  "egli",
	  "egoismo",
	  "egregio",
	  "elaborato",
	  "elargire",
	  "elegante",
	  "elencato",
	  "eletto",
	  "elevare",
	  "elfico",
	  "elica",
	  "elmo",
	  "elsa",
	  "eluso",
	  "emanato",
	  "emblema",
	  "emesso",
	  "emiro",
	  "emotivo",
	  "emozione",
	  "empirico",
	  "emulo",
	  "endemico",
	  "enduro",
	  "energia",
	  "enfasi",
	  "enoteca",
	  "entrare",
	  "enzima",
	  "epatite",
	  "epilogo",
	  "episodio",
	  "epocale",
	  "eppure",
	  "equatore",
	  "erario",
	  "erba",
	  "erboso",
	  "erede",
	  "eremita",
	  "erigere",
	  "ermetico",
	  "eroe",
	  "erosivo",
	  "errante",
	  "esagono",
	  "esame",
	  "esanime",
	  "esaudire",
	  "esca",
	  "esempio",
	  "esercito",
	  "esibito",
	  "esigente",
	  "esistere",
	  "esito",
	  "esofago",
	  "esortato",
	  "esoso",
	  "espanso",
	  "espresso",
	  "essenza",
	  "esso",
	  "esteso",
	  "estimare",
	  "estonia",
	  "estroso",
	  "esultare",
	  "etilico",
	  "etnico",
	  "etrusco",
	  "etto",
	  "euclideo",
	  "europa",
	  "evaso",
	  "evidenza",
	  "evitato",
	  "evoluto",
	  "evviva",
	  "fabbrica",
	  "faccenda",
	  "fachiro",
	  "falco",
	  "famiglia",
	  "fanale",
	  "fanfara",
	  "fango",
	  "fantasma",
	  "fare",
	  "farfalla",
	  "farinoso",
	  "farmaco",
	  "fascia",
	  "fastoso",
	  "fasullo",
	  "faticare",
	  "fato",
	  "favoloso",
	  "febbre",
	  "fecola",
	  "fede",
	  "fegato",
	  "felpa",
	  "feltro",
	  "femmina",
	  "fendere",
	  "fenomeno",
	  "fermento",
	  "ferro",
	  "fertile",
	  "fessura",
	  "festivo",
	  "fetta",
	  "feudo",
	  "fiaba",
	  "fiducia",
	  "fifa",
	  "figurato",
	  "filo",
	  "finanza",
	  "finestra",
	  "finire",
	  "fiore",
	  "fiscale",
	  "fisico",
	  "fiume",
	  "flacone",
	  "flamenco",
	  "flebo",
	  "flemma",
	  "florido",
	  "fluente",
	  "fluoro",
	  "fobico",
	  "focaccia",
	  "focoso",
	  "foderato",
	  "foglio",
	  "folata",
	  "folclore",
	  "folgore",
	  "fondente",
	  "fonetico",
	  "fonia",
	  "fontana",
	  "forbito",
	  "forchetta",
	  "foresta",
	  "formica",
	  "fornaio",
	  "foro",
	  "fortezza",
	  "forzare",
	  "fosfato",
	  "fosso",
	  "fracasso",
	  "frana",
	  "frassino",
	  "fratello",
	  "freccetta",
	  "frenata",
	  "fresco",
	  "frigo",
	  "frollino",
	  "fronde",
	  "frugale",
	  "frutta",
	  "fucilata",
	  "fucsia",
	  "fuggente",
	  "fulmine",
	  "fulvo",
	  "fumante",
	  "fumetto",
	  "fumoso",
	  "fune",
	  "funzione",
	  "fuoco",
	  "furbo",
	  "furgone",
	  "furore",
	  "fuso",
	  "futile",
	  "gabbiano",
	  "gaffe",
	  "galateo",
	  "gallina",
	  "galoppo",
	  "gambero",
	  "gamma",
	  "garanzia",
	  "garbo",
	  "garofano",
	  "garzone",
	  "gasdotto",
	  "gasolio",
	  "gastrico",
	  "gatto",
	  "gaudio",
	  "gazebo",
	  "gazzella",
	  "geco",
	  "gelatina",
	  "gelso",
	  "gemello",
	  "gemmato",
	  "gene",
	  "genitore",
	  "gennaio",
	  "genotipo",
	  "gergo",
	  "ghepardo",
	  "ghiaccio",
	  "ghisa",
	  "giallo",
	  "gilda",
	  "ginepro",
	  "giocare",
	  "gioiello",
	  "giorno",
	  "giove",
	  "girato",
	  "girone",
	  "gittata",
	  "giudizio",
	  "giurato",
	  "giusto",
	  "globulo",
	  "glutine",
	  "gnomo",
	  "gobba",
	  "golf",
	  "gomito",
	  "gommone",
	  "gonfio",
	  "gonna",
	  "governo",
	  "gracile",
	  "grado",
	  "grafico",
	  "grammo",
	  "grande",
	  "grattare",
	  "gravoso",
	  "grazia",
	  "greca",
	  "gregge",
	  "grifone",
	  "grigio",
	  "grinza",
	  "grotta",
	  "gruppo",
	  "guadagno",
	  "guaio",
	  "guanto",
	  "guardare",
	  "gufo",
	  "guidare",
	  "ibernato",
	  "icona",
	  "identico",
	  "idillio",
	  "idolo",
	  "idra",
	  "idrico",
	  "idrogeno",
	  "igiene",
	  "ignaro",
	  "ignorato",
	  "ilare",
	  "illeso",
	  "illogico",
	  "illudere",
	  "imballo",
	  "imbevuto",
	  "imbocco",
	  "imbuto",
	  "immane",
	  "immerso",
	  "immolato",
	  "impacco",
	  "impeto",
	  "impiego",
	  "importo",
	  "impronta",
	  "inalare",
	  "inarcare",
	  "inattivo",
	  "incanto",
	  "incendio",
	  "inchino",
	  "incisivo",
	  "incluso",
	  "incontro",
	  "incrocio",
	  "incubo",
	  "indagine",
	  "india",
	  "indole",
	  "inedito",
	  "infatti",
	  "infilare",
	  "inflitto",
	  "ingaggio",
	  "ingegno",
	  "inglese",
	  "ingordo",
	  "ingrosso",
	  "innesco",
	  "inodore",
	  "inoltrare",
	  "inondato",
	  "insano",
	  "insetto",
	  "insieme",
	  "insonnia",
	  "insulina",
	  "intasato",
	  "intero",
	  "intonaco",
	  "intuito",
	  "inumidire",
	  "invalido",
	  "invece",
	  "invito",
	  "iperbole",
	  "ipnotico",
	  "ipotesi",
	  "ippica",
	  "iride",
	  "irlanda",
	  "ironico",
	  "irrigato",
	  "irrorare",
	  "isolato",
	  "isotopo",
	  "isterico",
	  "istituto",
	  "istrice",
	  "italia",
	  "iterare",
	  "labbro",
	  "labirinto",
	  "lacca",
	  "lacerato",
	  "lacrima",
	  "lacuna",
	  "laddove",
	  "lago",
	  "lampo",
	  "lancetta",
	  "lanterna",
	  "lardoso",
	  "larga",
	  "laringe",
	  "lastra",
	  "latenza",
	  "latino",
	  "lattuga",
	  "lavagna",
	  "lavoro",
	  "legale",
	  "leggero",
	  "lembo",
	  "lentezza",
	  "lenza",
	  "leone",
	  "lepre",
	  "lesivo",
	  "lessato",
	  "lesto",
	  "letterale",
	  "leva",
	  "levigato",
	  "libero",
	  "lido",
	  "lievito",
	  "lilla",
	  "limatura",
	  "limitare",
	  "limpido",
	  "lineare",
	  "lingua",
	  "liquido",
	  "lira",
	  "lirica",
	  "lisca",
	  "lite",
	  "litigio",
	  "livrea",
	  "locanda",
	  "lode",
	  "logica",
	  "lombare",
	  "londra",
	  "longevo",
	  "loquace",
	  "lorenzo",
	  "loto",
	  "lotteria",
	  "luce",
	  "lucidato",
	  "lumaca",
	  "luminoso",
	  "lungo",
	  "lupo",
	  "luppolo",
	  "lusinga",
	  "lusso",
	  "lutto",
	  "macabro",
	  "macchina",
	  "macero",
	  "macinato",
	  "madama",
	  "magico",
	  "maglia",
	  "magnete",
	  "magro",
	  "maiolica",
	  "malafede",
	  "malgrado",
	  "malinteso",
	  "malsano",
	  "malto",
	  "malumore",
	  "mana",
	  "mancia",
	  "mandorla",
	  "mangiare",
	  "manifesto",
	  "mannaro",
	  "manovra",
	  "mansarda",
	  "mantide",
	  "manubrio",
	  "mappa",
	  "maratona",
	  "marcire",
	  "maretta",
	  "marmo",
	  "marsupio",
	  "maschera",
	  "massaia",
	  "mastino",
	  "materasso",
	  "matricola",
	  "mattone",
	  "maturo",
	  "mazurca",
	  "meandro",
	  "meccanico",
	  "mecenate",
	  "medesimo",
	  "meditare",
	  "mega",
	  "melassa",
	  "melis",
	  "melodia",
	  "meninge",
	  "meno",
	  "mensola",
	  "mercurio",
	  "merenda",
	  "merlo",
	  "meschino",
	  "mese",
	  "messere",
	  "mestolo",
	  "metallo",
	  "metodo",
	  "mettere",
	  "miagolare",
	  "mica",
	  "micelio",
	  "michele",
	  "microbo",
	  "midollo",
	  "miele",
	  "migliore",
	  "milano",
	  "milite",
	  "mimosa",
	  "minerale",
	  "mini",
	  "minore",
	  "mirino",
	  "mirtillo",
	  "miscela",
	  "missiva",
	  "misto",
	  "misurare",
	  "mitezza",
	  "mitigare",
	  "mitra",
	  "mittente",
	  "mnemonico",
	  "modello",
	  "modifica",
	  "modulo",
	  "mogano",
	  "mogio",
	  "mole",
	  "molosso",
	  "monastero",
	  "monco",
	  "mondina",
	  "monetario",
	  "monile",
	  "monotono",
	  "monsone",
	  "montato",
	  "monviso",
	  "mora",
	  "mordere",
	  "morsicato",
	  "mostro",
	  "motivato",
	  "motosega",
	  "motto",
	  "movenza",
	  "movimento",
	  "mozzo",
	  "mucca",
	  "mucosa",
	  "muffa",
	  "mughetto",
	  "mugnaio",
	  "mulatto",
	  "mulinello",
	  "multiplo",
	  "mummia",
	  "munto",
	  "muovere",
	  "murale",
	  "musa",
	  "muscolo",
	  "musica",
	  "mutevole",
	  "muto",
	  "nababbo",
	  "nafta",
	  "nanometro",
	  "narciso",
	  "narice",
	  "narrato",
	  "nascere",
	  "nastrare",
	  "naturale",
	  "nautica",
	  "naviglio",
	  "nebulosa",
	  "necrosi",
	  "negativo",
	  "negozio",
	  "nemmeno",
	  "neofita",
	  "neretto",
	  "nervo",
	  "nessuno",
	  "nettuno",
	  "neutrale",
	  "neve",
	  "nevrotico",
	  "nicchia",
	  "ninfa",
	  "nitido",
	  "nobile",
	  "nocivo",
	  "nodo",
	  "nome",
	  "nomina",
	  "nordico",
	  "normale",
	  "norvegese",
	  "nostrano",
	  "notare",
	  "notizia",
	  "notturno",
	  "novella",
	  "nucleo",
	  "nulla",
	  "numero",
	  "nuovo",
	  "nutrire",
	  "nuvola",
	  "nuziale",
	  "oasi",
	  "obbedire",
	  "obbligo",
	  "obelisco",
	  "oblio",
	  "obolo",
	  "obsoleto",
	  "occasione",
	  "occhio",
	  "occidente",
	  "occorrere",
	  "occultare",
	  "ocra",
	  "oculato",
	  "odierno",
	  "odorare",
	  "offerta",
	  "offrire",
	  "offuscato",
	  "oggetto",
	  "oggi",
	  "ognuno",
	  "olandese",
	  "olfatto",
	  "oliato",
	  "oliva",
	  "ologramma",
	  "oltre",
	  "omaggio",
	  "ombelico",
	  "ombra",
	  "omega",
	  "omissione",
	  "ondoso",
	  "onere",
	  "onice",
	  "onnivoro",
	  "onorevole",
	  "onta",
	  "operato",
	  "opinione",
	  "opposto",
	  "oracolo",
	  "orafo",
	  "ordine",
	  "orecchino",
	  "orefice",
	  "orfano",
	  "organico",
	  "origine",
	  "orizzonte",
	  "orma",
	  "ormeggio",
	  "ornativo",
	  "orologio",
	  "orrendo",
	  "orribile",
	  "ortensia",
	  "ortica",
	  "orzata",
	  "orzo",
	  "osare",
	  "oscurare",
	  "osmosi",
	  "ospedale",
	  "ospite",
	  "ossa",
	  "ossidare",
	  "ostacolo",
	  "oste",
	  "otite",
	  "otre",
	  "ottagono",
	  "ottimo",
	  "ottobre",
	  "ovale",
	  "ovest",
	  "ovino",
	  "oviparo",
	  "ovocito",
	  "ovunque",
	  "ovviare",
	  "ozio",
	  "pacchetto",
	  "pace",
	  "pacifico",
	  "padella",
	  "padrone",
	  "paese",
	  "paga",
	  "pagina",
	  "palazzina",
	  "palesare",
	  "pallido",
	  "palo",
	  "palude",
	  "pandoro",
	  "pannello",
	  "paolo",
	  "paonazzo",
	  "paprica",
	  "parabola",
	  "parcella",
	  "parere",
	  "pargolo",
	  "pari",
	  "parlato",
	  "parola",
	  "partire",
	  "parvenza",
	  "parziale",
	  "passivo",
	  "pasticca",
	  "patacca",
	  "patologia",
	  "pattume",
	  "pavone",
	  "peccato",
	  "pedalare",
	  "pedonale",
	  "peggio",
	  "peloso",
	  "penare",
	  "pendice",
	  "penisola",
	  "pennuto",
	  "penombra",
	  "pensare",
	  "pentola",
	  "pepe",
	  "pepita",
	  "perbene",
	  "percorso",
	  "perdonato",
	  "perforare",
	  "pergamena",
	  "periodo",
	  "permesso",
	  "perno",
	  "perplesso",
	  "persuaso",
	  "pertugio",
	  "pervaso",
	  "pesatore",
	  "pesista",
	  "peso",
	  "pestifero",
	  "petalo",
	  "pettine",
	  "petulante",
	  "pezzo",
	  "piacere",
	  "pianta",
	  "piattino",
	  "piccino",
	  "picozza",
	  "piega",
	  "pietra",
	  "piffero",
	  "pigiama",
	  "pigolio",
	  "pigro",
	  "pila",
	  "pilifero",
	  "pillola",
	  "pilota",
	  "pimpante",
	  "pineta",
	  "pinna",
	  "pinolo",
	  "pioggia",
	  "piombo",
	  "piramide",
	  "piretico",
	  "pirite",
	  "pirolisi",
	  "pitone",
	  "pizzico",
	  "placebo",
	  "planare",
	  "plasma",
	  "platano",
	  "plenario",
	  "pochezza",
	  "poderoso",
	  "podismo",
	  "poesia",
	  "poggiare",
	  "polenta",
	  "poligono",
	  "pollice",
	  "polmonite",
	  "polpetta",
	  "polso",
	  "poltrona",
	  "polvere",
	  "pomice",
	  "pomodoro",
	  "ponte",
	  "popoloso",
	  "porfido",
	  "poroso",
	  "porpora",
	  "porre",
	  "portata",
	  "posa",
	  "positivo",
	  "possesso",
	  "postulato",
	  "potassio",
	  "potere",
	  "pranzo",
	  "prassi",
	  "pratica",
	  "precluso",
	  "predica",
	  "prefisso",
	  "pregiato",
	  "prelievo",
	  "premere",
	  "prenotare",
	  "preparato",
	  "presenza",
	  "pretesto",
	  "prevalso",
	  "prima",
	  "principe",
	  "privato",
	  "problema",
	  "procura",
	  "produrre",
	  "profumo",
	  "progetto",
	  "prolunga",
	  "promessa",
	  "pronome",
	  "proposta",
	  "proroga",
	  "proteso",
	  "prova",
	  "prudente",
	  "prugna",
	  "prurito",
	  "psiche",
	  "pubblico",
	  "pudica",
	  "pugilato",
	  "pugno",
	  "pulce",
	  "pulito",
	  "pulsante",
	  "puntare",
	  "pupazzo",
	  "pupilla",
	  "puro",
	  "quadro",
	  "qualcosa",
	  "quasi",
	  "querela",
	  "quota",
	  "raccolto",
	  "raddoppio",
	  "radicale",
	  "radunato",
	  "raffica",
	  "ragazzo",
	  "ragione",
	  "ragno",
	  "ramarro",
	  "ramingo",
	  "ramo",
	  "randagio",
	  "rantolare",
	  "rapato",
	  "rapina",
	  "rappreso",
	  "rasatura",
	  "raschiato",
	  "rasente",
	  "rassegna",
	  "rastrello",
	  "rata",
	  "ravveduto",
	  "reale",
	  "recepire",
	  "recinto",
	  "recluta",
	  "recondito",
	  "recupero",
	  "reddito",
	  "redimere",
	  "regalato",
	  "registro",
	  "regola",
	  "regresso",
	  "relazione",
	  "remare",
	  "remoto",
	  "renna",
	  "replica",
	  "reprimere",
	  "reputare",
	  "resa",
	  "residente",
	  "responso",
	  "restauro",
	  "rete",
	  "retina",
	  "retorica",
	  "rettifica",
	  "revocato",
	  "riassunto",
	  "ribadire",
	  "ribelle",
	  "ribrezzo",
	  "ricarica",
	  "ricco",
	  "ricevere",
	  "riciclato",
	  "ricordo",
	  "ricreduto",
	  "ridicolo",
	  "ridurre",
	  "rifasare",
	  "riflesso",
	  "riforma",
	  "rifugio",
	  "rigare",
	  "rigettato",
	  "righello",
	  "rilassato",
	  "rilevato",
	  "rimanere",
	  "rimbalzo",
	  "rimedio",
	  "rimorchio",
	  "rinascita",
	  "rincaro",
	  "rinforzo",
	  "rinnovo",
	  "rinomato",
	  "rinsavito",
	  "rintocco",
	  "rinuncia",
	  "rinvenire",
	  "riparato",
	  "ripetuto",
	  "ripieno",
	  "riportare",
	  "ripresa",
	  "ripulire",
	  "risata",
	  "rischio",
	  "riserva",
	  "risibile",
	  "riso",
	  "rispetto",
	  "ristoro",
	  "risultato",
	  "risvolto",
	  "ritardo",
	  "ritegno",
	  "ritmico",
	  "ritrovo",
	  "riunione",
	  "riva",
	  "riverso",
	  "rivincita",
	  "rivolto",
	  "rizoma",
	  "roba",
	  "robotico",
	  "robusto",
	  "roccia",
	  "roco",
	  "rodaggio",
	  "rodere",
	  "roditore",
	  "rogito",
	  "rollio",
	  "romantico",
	  "rompere",
	  "ronzio",
	  "rosolare",
	  "rospo",
	  "rotante",
	  "rotondo",
	  "rotula",
	  "rovescio",
	  "rubizzo",
	  "rubrica",
	  "ruga",
	  "rullino",
	  "rumine",
	  "rumoroso",
	  "ruolo",
	  "rupe",
	  "russare",
	  "rustico",
	  "sabato",
	  "sabbiare",
	  "sabotato",
	  "sagoma",
	  "salasso",
	  "saldatura",
	  "salgemma",
	  "salivare",
	  "salmone",
	  "salone",
	  "saltare",
	  "saluto",
	  "salvo",
	  "sapere",
	  "sapido",
	  "saporito",
	  "saraceno",
	  "sarcasmo",
	  "sarto",
	  "sassoso",
	  "satellite",
	  "satira",
	  "satollo",
	  "saturno",
	  "savana",
	  "savio",
	  "saziato",
	  "sbadiglio",
	  "sbalzo",
	  "sbancato",
	  "sbarra",
	  "sbattere",
	  "sbavare",
	  "sbendare",
	  "sbirciare",
	  "sbloccato",
	  "sbocciato",
	  "sbrinare",
	  "sbruffone",
	  "sbuffare",
	  "scabroso",
	  "scadenza",
	  "scala",
	  "scambiare",
	  "scandalo",
	  "scapola",
	  "scarso",
	  "scatenare",
	  "scavato",
	  "scelto",
	  "scenico",
	  "scettro",
	  "scheda",
	  "schiena",
	  "sciarpa",
	  "scienza",
	  "scindere",
	  "scippo",
	  "sciroppo",
	  "scivolo",
	  "sclerare",
	  "scodella",
	  "scolpito",
	  "scomparto",
	  "sconforto",
	  "scoprire",
	  "scorta",
	  "scossone",
	  "scozzese",
	  "scriba",
	  "scrollare",
	  "scrutinio",
	  "scuderia",
	  "scultore",
	  "scuola",
	  "scuro",
	  "scusare",
	  "sdebitare",
	  "sdoganare",
	  "seccatura",
	  "secondo",
	  "sedano",
	  "seggiola",
	  "segnalato",
	  "segregato",
	  "seguito",
	  "selciato",
	  "selettivo",
	  "sella",
	  "selvaggio",
	  "semaforo",
	  "sembrare",
	  "seme",
	  "seminato",
	  "sempre",
	  "senso",
	  "sentire",
	  "sepolto",
	  "sequenza",
	  "serata",
	  "serbato",
	  "sereno",
	  "serio",
	  "serpente",
	  "serraglio",
	  "servire",
	  "sestina",
	  "setola",
	  "settimana",
	  "sfacelo",
	  "sfaldare",
	  "sfamato",
	  "sfarzoso",
	  "sfaticato",
	  "sfera",
	  "sfida",
	  "sfilato",
	  "sfinge",
	  "sfocato",
	  "sfoderare",
	  "sfogo",
	  "sfoltire",
	  "sforzato",
	  "sfratto",
	  "sfruttato",
	  "sfuggito",
	  "sfumare",
	  "sfuso",
	  "sgabello",
	  "sgarbato",
	  "sgonfiare",
	  "sgorbio",
	  "sgrassato",
	  "sguardo",
	  "sibilo",
	  "siccome",
	  "sierra",
	  "sigla",
	  "signore",
	  "silenzio",
	  "sillaba",
	  "simbolo",
	  "simpatico",
	  "simulato",
	  "sinfonia",
	  "singolo",
	  "sinistro",
	  "sino",
	  "sintesi",
	  "sinusoide",
	  "sipario",
	  "sisma",
	  "sistole",
	  "situato",
	  "slitta",
	  "slogatura",
	  "sloveno",
	  "smarrito",
	  "smemorato",
	  "smentito",
	  "smeraldo",
	  "smilzo",
	  "smontare",
	  "smottato",
	  "smussato",
	  "snellire",
	  "snervato",
	  "snodo",
	  "sobbalzo",
	  "sobrio",
	  "soccorso",
	  "sociale",
	  "sodale",
	  "soffitto",
	  "sogno",
	  "soldato",
	  "solenne",
	  "solido",
	  "sollazzo",
	  "solo",
	  "solubile",
	  "solvente",
	  "somatico",
	  "somma",
	  "sonda",
	  "sonetto",
	  "sonnifero",
	  "sopire",
	  "soppeso",
	  "sopra",
	  "sorgere",
	  "sorpasso",
	  "sorriso",
	  "sorso",
	  "sorteggio",
	  "sorvolato",
	  "sospiro",
	  "sosta",
	  "sottile",
	  "spada",
	  "spalla",
	  "spargere",
	  "spatola",
	  "spavento",
	  "spazzola",
	  "specie",
	  "spedire",
	  "spegnere",
	  "spelatura",
	  "speranza",
	  "spessore",
	  "spettrale",
	  "spezzato",
	  "spia",
	  "spigoloso",
	  "spillato",
	  "spinoso",
	  "spirale",
	  "splendido",
	  "sportivo",
	  "sposo",
	  "spranga",
	  "sprecare",
	  "spronato",
	  "spruzzo",
	  "spuntino",
	  "squillo",
	  "sradicare",
	  "srotolato",
	  "stabile",
	  "stacco",
	  "staffa",
	  "stagnare",
	  "stampato",
	  "stantio",
	  "starnuto",
	  "stasera",
	  "statuto",
	  "stelo",
	  "steppa",
	  "sterzo",
	  "stiletto",
	  "stima",
	  "stirpe",
	  "stivale",
	  "stizzoso",
	  "stonato",
	  "storico",
	  "strappo",
	  "stregato",
	  "stridulo",
	  "strozzare",
	  "strutto",
	  "stuccare",
	  "stufo",
	  "stupendo",
	  "subentro",
	  "succoso",
	  "sudore",
	  "suggerito",
	  "sugo",
	  "sultano",
	  "suonare",
	  "superbo",
	  "supporto",
	  "surgelato",
	  "surrogato",
	  "sussurro",
	  "sutura",
	  "svagare",
	  "svedese",
	  "sveglio",
	  "svelare",
	  "svenuto",
	  "svezia",
	  "sviluppo",
	  "svista",
	  "svizzera",
	  "svolta",
	  "svuotare",
	  "tabacco",
	  "tabulato",
	  "tacciare",
	  "taciturno",
	  "tale",
	  "talismano",
	  "tampone",
	  "tannino",
	  "tara",
	  "tardivo",
	  "targato",
	  "tariffa",
	  "tarpare",
	  "tartaruga",
	  "tasto",
	  "tattico",
	  "taverna",
	  "tavolata",
	  "tazza",
	  "teca",
	  "tecnico",
	  "telefono",
	  "temerario",
	  "tempo",
	  "temuto",
	  "tendone",
	  "tenero",
	  "tensione",
	  "tentacolo",
	  "teorema",
	  "terme",
	  "terrazzo",
	  "terzetto",
	  "tesi",
	  "tesserato",
	  "testato",
	  "tetro",
	  "tettoia",
	  "tifare",
	  "tigella",
	  "timbro",
	  "tinto",
	  "tipico",
	  "tipografo",
	  "tiraggio",
	  "tiro",
	  "titanio",
	  "titolo",
	  "titubante",
	  "tizio",
	  "tizzone",
	  "toccare",
	  "tollerare",
	  "tolto",
	  "tombola",
	  "tomo",
	  "tonfo",
	  "tonsilla",
	  "topazio",
	  "topologia",
	  "toppa",
	  "torba",
	  "tornare",
	  "torrone",
	  "tortora",
	  "toscano",
	  "tossire",
	  "tostatura",
	  "totano",
	  "trabocco",
	  "trachea",
	  "trafila",
	  "tragedia",
	  "tralcio",
	  "tramonto",
	  "transito",
	  "trapano",
	  "trarre",
	  "trasloco",
	  "trattato",
	  "trave",
	  "treccia",
	  "tremolio",
	  "trespolo",
	  "tributo",
	  "tricheco",
	  "trifoglio",
	  "trillo",
	  "trincea",
	  "trio",
	  "tristezza",
	  "triturato",
	  "trivella",
	  "tromba",
	  "trono",
	  "troppo",
	  "trottola",
	  "trovare",
	  "truccato",
	  "tubatura",
	  "tuffato",
	  "tulipano",
	  "tumulto",
	  "tunisia",
	  "turbare",
	  "turchino",
	  "tuta",
	  "tutela",
	  "ubicato",
	  "uccello",
	  "uccisore",
	  "udire",
	  "uditivo",
	  "uffa",
	  "ufficio",
	  "uguale",
	  "ulisse",
	  "ultimato",
	  "umano",
	  "umile",
	  "umorismo",
	  "uncinetto",
	  "ungere",
	  "ungherese",
	  "unicorno",
	  "unificato",
	  "unisono",
	  "unitario",
	  "unte",
	  "uovo",
	  "upupa",
	  "uragano",
	  "urgenza",
	  "urlo",
	  "usanza",
	  "usato",
	  "uscito",
	  "usignolo",
	  "usuraio",
	  "utensile",
	  "utilizzo",
	  "utopia",
	  "vacante",
	  "vaccinato",
	  "vagabondo",
	  "vagliato",
	  "valanga",
	  "valgo",
	  "valico",
	  "valletta",
	  "valoroso",
	  "valutare",
	  "valvola",
	  "vampata",
	  "vangare",
	  "vanitoso",
	  "vano",
	  "vantaggio",
	  "vanvera",
	  "vapore",
	  "varano",
	  "varcato",
	  "variante",
	  "vasca",
	  "vedetta",
	  "vedova",
	  "veduto",
	  "vegetale",
	  "veicolo",
	  "velcro",
	  "velina",
	  "velluto",
	  "veloce",
	  "venato",
	  "vendemmia",
	  "vento",
	  "verace",
	  "verbale",
	  "vergogna",
	  "verifica",
	  "vero",
	  "verruca",
	  "verticale",
	  "vescica",
	  "vessillo",
	  "vestale",
	  "veterano",
	  "vetrina",
	  "vetusto",
	  "viandante",
	  "vibrante",
	  "vicenda",
	  "vichingo",
	  "vicinanza",
	  "vidimare",
	  "vigilia",
	  "vigneto",
	  "vigore",
	  "vile",
	  "villano",
	  "vimini",
	  "vincitore",
	  "viola",
	  "vipera",
	  "virgola",
	  "virologo",
	  "virulento",
	  "viscoso",
	  "visione",
	  "vispo",
	  "vissuto",
	  "visura",
	  "vita",
	  "vitello",
	  "vittima",
	  "vivanda",
	  "vivido",
	  "viziare",
	  "voce",
	  "voga",
	  "volatile",
	  "volere",
	  "volpe",
	  "voragine",
	  "vulcano",
	  "zampogna",
	  "zanna",
	  "zappato",
	  "zattera",
	  "zavorra",
	  "zefiro",
	  "zelante",
	  "zelo",
	  "zenzero",
	  "zerbino",
	  "zibetto",
	  "zinco",
	  "zircone",
	  "zitto",
	  "zolla",
	  "zotico",
	  "zucchero",
	  "zufolo",
	  "zulu",
	  "zuppa"
	]
	;

	var italian$1 = /*#__PURE__*/Object.freeze({
		default: italian
	});

	var japanese = [
	  "あいこくしん",
	  "あいさつ",
	  "あいだ",
	  "あおぞら",
	  "あかちゃん",
	  "あきる",
	  "あけがた",
	  "あける",
	  "あこがれる",
	  "あさい",
	  "あさひ",
	  "あしあと",
	  "あじわう",
	  "あずかる",
	  "あずき",
	  "あそぶ",
	  "あたえる",
	  "あたためる",
	  "あたりまえ",
	  "あたる",
	  "あつい",
	  "あつかう",
	  "あっしゅく",
	  "あつまり",
	  "あつめる",
	  "あてな",
	  "あてはまる",
	  "あひる",
	  "あぶら",
	  "あぶる",
	  "あふれる",
	  "あまい",
	  "あまど",
	  "あまやかす",
	  "あまり",
	  "あみもの",
	  "あめりか",
	  "あやまる",
	  "あゆむ",
	  "あらいぐま",
	  "あらし",
	  "あらすじ",
	  "あらためる",
	  "あらゆる",
	  "あらわす",
	  "ありがとう",
	  "あわせる",
	  "あわてる",
	  "あんい",
	  "あんがい",
	  "あんこ",
	  "あんぜん",
	  "あんてい",
	  "あんない",
	  "あんまり",
	  "いいだす",
	  "いおん",
	  "いがい",
	  "いがく",
	  "いきおい",
	  "いきなり",
	  "いきもの",
	  "いきる",
	  "いくじ",
	  "いくぶん",
	  "いけばな",
	  "いけん",
	  "いこう",
	  "いこく",
	  "いこつ",
	  "いさましい",
	  "いさん",
	  "いしき",
	  "いじゅう",
	  "いじょう",
	  "いじわる",
	  "いずみ",
	  "いずれ",
	  "いせい",
	  "いせえび",
	  "いせかい",
	  "いせき",
	  "いぜん",
	  "いそうろう",
	  "いそがしい",
	  "いだい",
	  "いだく",
	  "いたずら",
	  "いたみ",
	  "いたりあ",
	  "いちおう",
	  "いちじ",
	  "いちど",
	  "いちば",
	  "いちぶ",
	  "いちりゅう",
	  "いつか",
	  "いっしゅん",
	  "いっせい",
	  "いっそう",
	  "いったん",
	  "いっち",
	  "いってい",
	  "いっぽう",
	  "いてざ",
	  "いてん",
	  "いどう",
	  "いとこ",
	  "いない",
	  "いなか",
	  "いねむり",
	  "いのち",
	  "いのる",
	  "いはつ",
	  "いばる",
	  "いはん",
	  "いびき",
	  "いひん",
	  "いふく",
	  "いへん",
	  "いほう",
	  "いみん",
	  "いもうと",
	  "いもたれ",
	  "いもり",
	  "いやがる",
	  "いやす",
	  "いよかん",
	  "いよく",
	  "いらい",
	  "いらすと",
	  "いりぐち",
	  "いりょう",
	  "いれい",
	  "いれもの",
	  "いれる",
	  "いろえんぴつ",
	  "いわい",
	  "いわう",
	  "いわかん",
	  "いわば",
	  "いわゆる",
	  "いんげんまめ",
	  "いんさつ",
	  "いんしょう",
	  "いんよう",
	  "うえき",
	  "うえる",
	  "うおざ",
	  "うがい",
	  "うかぶ",
	  "うかべる",
	  "うきわ",
	  "うくらいな",
	  "うくれれ",
	  "うけたまわる",
	  "うけつけ",
	  "うけとる",
	  "うけもつ",
	  "うける",
	  "うごかす",
	  "うごく",
	  "うこん",
	  "うさぎ",
	  "うしなう",
	  "うしろがみ",
	  "うすい",
	  "うすぎ",
	  "うすぐらい",
	  "うすめる",
	  "うせつ",
	  "うちあわせ",
	  "うちがわ",
	  "うちき",
	  "うちゅう",
	  "うっかり",
	  "うつくしい",
	  "うったえる",
	  "うつる",
	  "うどん",
	  "うなぎ",
	  "うなじ",
	  "うなずく",
	  "うなる",
	  "うねる",
	  "うのう",
	  "うぶげ",
	  "うぶごえ",
	  "うまれる",
	  "うめる",
	  "うもう",
	  "うやまう",
	  "うよく",
	  "うらがえす",
	  "うらぐち",
	  "うらない",
	  "うりあげ",
	  "うりきれ",
	  "うるさい",
	  "うれしい",
	  "うれゆき",
	  "うれる",
	  "うろこ",
	  "うわき",
	  "うわさ",
	  "うんこう",
	  "うんちん",
	  "うんてん",
	  "うんどう",
	  "えいえん",
	  "えいが",
	  "えいきょう",
	  "えいご",
	  "えいせい",
	  "えいぶん",
	  "えいよう",
	  "えいわ",
	  "えおり",
	  "えがお",
	  "えがく",
	  "えきたい",
	  "えくせる",
	  "えしゃく",
	  "えすて",
	  "えつらん",
	  "えのぐ",
	  "えほうまき",
	  "えほん",
	  "えまき",
	  "えもじ",
	  "えもの",
	  "えらい",
	  "えらぶ",
	  "えりあ",
	  "えんえん",
	  "えんかい",
	  "えんぎ",
	  "えんげき",
	  "えんしゅう",
	  "えんぜつ",
	  "えんそく",
	  "えんちょう",
	  "えんとつ",
	  "おいかける",
	  "おいこす",
	  "おいしい",
	  "おいつく",
	  "おうえん",
	  "おうさま",
	  "おうじ",
	  "おうせつ",
	  "おうたい",
	  "おうふく",
	  "おうべい",
	  "おうよう",
	  "おえる",
	  "おおい",
	  "おおう",
	  "おおどおり",
	  "おおや",
	  "おおよそ",
	  "おかえり",
	  "おかず",
	  "おがむ",
	  "おかわり",
	  "おぎなう",
	  "おきる",
	  "おくさま",
	  "おくじょう",
	  "おくりがな",
	  "おくる",
	  "おくれる",
	  "おこす",
	  "おこなう",
	  "おこる",
	  "おさえる",
	  "おさない",
	  "おさめる",
	  "おしいれ",
	  "おしえる",
	  "おじぎ",
	  "おじさん",
	  "おしゃれ",
	  "おそらく",
	  "おそわる",
	  "おたがい",
	  "おたく",
	  "おだやか",
	  "おちつく",
	  "おっと",
	  "おつり",
	  "おでかけ",
	  "おとしもの",
	  "おとなしい",
	  "おどり",
	  "おどろかす",
	  "おばさん",
	  "おまいり",
	  "おめでとう",
	  "おもいで",
	  "おもう",
	  "おもたい",
	  "おもちゃ",
	  "おやつ",
	  "おやゆび",
	  "およぼす",
	  "おらんだ",
	  "おろす",
	  "おんがく",
	  "おんけい",
	  "おんしゃ",
	  "おんせん",
	  "おんだん",
	  "おんちゅう",
	  "おんどけい",
	  "かあつ",
	  "かいが",
	  "がいき",
	  "がいけん",
	  "がいこう",
	  "かいさつ",
	  "かいしゃ",
	  "かいすいよく",
	  "かいぜん",
	  "かいぞうど",
	  "かいつう",
	  "かいてん",
	  "かいとう",
	  "かいふく",
	  "がいへき",
	  "かいほう",
	  "かいよう",
	  "がいらい",
	  "かいわ",
	  "かえる",
	  "かおり",
	  "かかえる",
	  "かがく",
	  "かがし",
	  "かがみ",
	  "かくご",
	  "かくとく",
	  "かざる",
	  "がぞう",
	  "かたい",
	  "かたち",
	  "がちょう",
	  "がっきゅう",
	  "がっこう",
	  "がっさん",
	  "がっしょう",
	  "かなざわし",
	  "かのう",
	  "がはく",
	  "かぶか",
	  "かほう",
	  "かほご",
	  "かまう",
	  "かまぼこ",
	  "かめれおん",
	  "かゆい",
	  "かようび",
	  "からい",
	  "かるい",
	  "かろう",
	  "かわく",
	  "かわら",
	  "がんか",
	  "かんけい",
	  "かんこう",
	  "かんしゃ",
	  "かんそう",
	  "かんたん",
	  "かんち",
	  "がんばる",
	  "きあい",
	  "きあつ",
	  "きいろ",
	  "ぎいん",
	  "きうい",
	  "きうん",
	  "きえる",
	  "きおう",
	  "きおく",
	  "きおち",
	  "きおん",
	  "きかい",
	  "きかく",
	  "きかんしゃ",
	  "ききて",
	  "きくばり",
	  "きくらげ",
	  "きけんせい",
	  "きこう",
	  "きこえる",
	  "きこく",
	  "きさい",
	  "きさく",
	  "きさま",
	  "きさらぎ",
	  "ぎじかがく",
	  "ぎしき",
	  "ぎじたいけん",
	  "ぎじにってい",
	  "ぎじゅつしゃ",
	  "きすう",
	  "きせい",
	  "きせき",
	  "きせつ",
	  "きそう",
	  "きぞく",
	  "きぞん",
	  "きたえる",
	  "きちょう",
	  "きつえん",
	  "ぎっちり",
	  "きつつき",
	  "きつね",
	  "きてい",
	  "きどう",
	  "きどく",
	  "きない",
	  "きなが",
	  "きなこ",
	  "きぬごし",
	  "きねん",
	  "きのう",
	  "きのした",
	  "きはく",
	  "きびしい",
	  "きひん",
	  "きふく",
	  "きぶん",
	  "きぼう",
	  "きほん",
	  "きまる",
	  "きみつ",
	  "きむずかしい",
	  "きめる",
	  "きもだめし",
	  "きもち",
	  "きもの",
	  "きゃく",
	  "きやく",
	  "ぎゅうにく",
	  "きよう",
	  "きょうりゅう",
	  "きらい",
	  "きらく",
	  "きりん",
	  "きれい",
	  "きれつ",
	  "きろく",
	  "ぎろん",
	  "きわめる",
	  "ぎんいろ",
	  "きんかくじ",
	  "きんじょ",
	  "きんようび",
	  "ぐあい",
	  "くいず",
	  "くうかん",
	  "くうき",
	  "くうぐん",
	  "くうこう",
	  "ぐうせい",
	  "くうそう",
	  "ぐうたら",
	  "くうふく",
	  "くうぼ",
	  "くかん",
	  "くきょう",
	  "くげん",
	  "ぐこう",
	  "くさい",
	  "くさき",
	  "くさばな",
	  "くさる",
	  "くしゃみ",
	  "くしょう",
	  "くすのき",
	  "くすりゆび",
	  "くせげ",
	  "くせん",
	  "ぐたいてき",
	  "くださる",
	  "くたびれる",
	  "くちこみ",
	  "くちさき",
	  "くつした",
	  "ぐっすり",
	  "くつろぐ",
	  "くとうてん",
	  "くどく",
	  "くなん",
	  "くねくね",
	  "くのう",
	  "くふう",
	  "くみあわせ",
	  "くみたてる",
	  "くめる",
	  "くやくしょ",
	  "くらす",
	  "くらべる",
	  "くるま",
	  "くれる",
	  "くろう",
	  "くわしい",
	  "ぐんかん",
	  "ぐんしょく",
	  "ぐんたい",
	  "ぐんて",
	  "けあな",
	  "けいかく",
	  "けいけん",
	  "けいこ",
	  "けいさつ",
	  "げいじゅつ",
	  "けいたい",
	  "げいのうじん",
	  "けいれき",
	  "けいろ",
	  "けおとす",
	  "けおりもの",
	  "げきか",
	  "げきげん",
	  "げきだん",
	  "げきちん",
	  "げきとつ",
	  "げきは",
	  "げきやく",
	  "げこう",
	  "げこくじょう",
	  "げざい",
	  "けさき",
	  "げざん",
	  "けしき",
	  "けしごむ",
	  "けしょう",
	  "げすと",
	  "けたば",
	  "けちゃっぷ",
	  "けちらす",
	  "けつあつ",
	  "けつい",
	  "けつえき",
	  "けっこん",
	  "けつじょ",
	  "けっせき",
	  "けってい",
	  "けつまつ",
	  "げつようび",
	  "げつれい",
	  "けつろん",
	  "げどく",
	  "けとばす",
	  "けとる",
	  "けなげ",
	  "けなす",
	  "けなみ",
	  "けぬき",
	  "げねつ",
	  "けねん",
	  "けはい",
	  "げひん",
	  "けぶかい",
	  "げぼく",
	  "けまり",
	  "けみかる",
	  "けむし",
	  "けむり",
	  "けもの",
	  "けらい",
	  "けろけろ",
	  "けわしい",
	  "けんい",
	  "けんえつ",
	  "けんお",
	  "けんか",
	  "げんき",
	  "けんげん",
	  "けんこう",
	  "けんさく",
	  "けんしゅう",
	  "けんすう",
	  "げんそう",
	  "けんちく",
	  "けんてい",
	  "けんとう",
	  "けんない",
	  "けんにん",
	  "げんぶつ",
	  "けんま",
	  "けんみん",
	  "けんめい",
	  "けんらん",
	  "けんり",
	  "こあくま",
	  "こいぬ",
	  "こいびと",
	  "ごうい",
	  "こうえん",
	  "こうおん",
	  "こうかん",
	  "ごうきゅう",
	  "ごうけい",
	  "こうこう",
	  "こうさい",
	  "こうじ",
	  "こうすい",
	  "ごうせい",
	  "こうそく",
	  "こうたい",
	  "こうちゃ",
	  "こうつう",
	  "こうてい",
	  "こうどう",
	  "こうない",
	  "こうはい",
	  "ごうほう",
	  "ごうまん",
	  "こうもく",
	  "こうりつ",
	  "こえる",
	  "こおり",
	  "ごかい",
	  "ごがつ",
	  "ごかん",
	  "こくご",
	  "こくさい",
	  "こくとう",
	  "こくない",
	  "こくはく",
	  "こぐま",
	  "こけい",
	  "こける",
	  "ここのか",
	  "こころ",
	  "こさめ",
	  "こしつ",
	  "こすう",
	  "こせい",
	  "こせき",
	  "こぜん",
	  "こそだて",
	  "こたい",
	  "こたえる",
	  "こたつ",
	  "こちょう",
	  "こっか",
	  "こつこつ",
	  "こつばん",
	  "こつぶ",
	  "こてい",
	  "こてん",
	  "ことがら",
	  "ことし",
	  "ことば",
	  "ことり",
	  "こなごな",
	  "こねこね",
	  "このまま",
	  "このみ",
	  "このよ",
	  "ごはん",
	  "こひつじ",
	  "こふう",
	  "こふん",
	  "こぼれる",
	  "ごまあぶら",
	  "こまかい",
	  "ごますり",
	  "こまつな",
	  "こまる",
	  "こむぎこ",
	  "こもじ",
	  "こもち",
	  "こもの",
	  "こもん",
	  "こやく",
	  "こやま",
	  "こゆう",
	  "こゆび",
	  "こよい",
	  "こよう",
	  "こりる",
	  "これくしょん",
	  "ころっけ",
	  "こわもて",
	  "こわれる",
	  "こんいん",
	  "こんかい",
	  "こんき",
	  "こんしゅう",
	  "こんすい",
	  "こんだて",
	  "こんとん",
	  "こんなん",
	  "こんびに",
	  "こんぽん",
	  "こんまけ",
	  "こんや",
	  "こんれい",
	  "こんわく",
	  "ざいえき",
	  "さいかい",
	  "さいきん",
	  "ざいげん",
	  "ざいこ",
	  "さいしょ",
	  "さいせい",
	  "ざいたく",
	  "ざいちゅう",
	  "さいてき",
	  "ざいりょう",
	  "さうな",
	  "さかいし",
	  "さがす",
	  "さかな",
	  "さかみち",
	  "さがる",
	  "さぎょう",
	  "さくし",
	  "さくひん",
	  "さくら",
	  "さこく",
	  "さこつ",
	  "さずかる",
	  "ざせき",
	  "さたん",
	  "さつえい",
	  "ざつおん",
	  "ざっか",
	  "ざつがく",
	  "さっきょく",
	  "ざっし",
	  "さつじん",
	  "ざっそう",
	  "さつたば",
	  "さつまいも",
	  "さてい",
	  "さといも",
	  "さとう",
	  "さとおや",
	  "さとし",
	  "さとる",
	  "さのう",
	  "さばく",
	  "さびしい",
	  "さべつ",
	  "さほう",
	  "さほど",
	  "さます",
	  "さみしい",
	  "さみだれ",
	  "さむけ",
	  "さめる",
	  "さやえんどう",
	  "さゆう",
	  "さよう",
	  "さよく",
	  "さらだ",
	  "ざるそば",
	  "さわやか",
	  "さわる",
	  "さんいん",
	  "さんか",
	  "さんきゃく",
	  "さんこう",
	  "さんさい",
	  "ざんしょ",
	  "さんすう",
	  "さんせい",
	  "さんそ",
	  "さんち",
	  "さんま",
	  "さんみ",
	  "さんらん",
	  "しあい",
	  "しあげ",
	  "しあさって",
	  "しあわせ",
	  "しいく",
	  "しいん",
	  "しうち",
	  "しえい",
	  "しおけ",
	  "しかい",
	  "しかく",
	  "じかん",
	  "しごと",
	  "しすう",
	  "じだい",
	  "したうけ",
	  "したぎ",
	  "したて",
	  "したみ",
	  "しちょう",
	  "しちりん",
	  "しっかり",
	  "しつじ",
	  "しつもん",
	  "してい",
	  "してき",
	  "してつ",
	  "じてん",
	  "じどう",
	  "しなぎれ",
	  "しなもの",
	  "しなん",
	  "しねま",
	  "しねん",
	  "しのぐ",
	  "しのぶ",
	  "しはい",
	  "しばかり",
	  "しはつ",
	  "しはらい",
	  "しはん",
	  "しひょう",
	  "しふく",
	  "じぶん",
	  "しへい",
	  "しほう",
	  "しほん",
	  "しまう",
	  "しまる",
	  "しみん",
	  "しむける",
	  "じむしょ",
	  "しめい",
	  "しめる",
	  "しもん",
	  "しゃいん",
	  "しゃうん",
	  "しゃおん",
	  "じゃがいも",
	  "しやくしょ",
	  "しゃくほう",
	  "しゃけん",
	  "しゃこ",
	  "しゃざい",
	  "しゃしん",
	  "しゃせん",
	  "しゃそう",
	  "しゃたい",
	  "しゃちょう",
	  "しゃっきん",
	  "じゃま",
	  "しゃりん",
	  "しゃれい",
	  "じゆう",
	  "じゅうしょ",
	  "しゅくはく",
	  "じゅしん",
	  "しゅっせき",
	  "しゅみ",
	  "しゅらば",
	  "じゅんばん",
	  "しょうかい",
	  "しょくたく",
	  "しょっけん",
	  "しょどう",
	  "しょもつ",
	  "しらせる",
	  "しらべる",
	  "しんか",
	  "しんこう",
	  "じんじゃ",
	  "しんせいじ",
	  "しんちく",
	  "しんりん",
	  "すあげ",
	  "すあし",
	  "すあな",
	  "ずあん",
	  "すいえい",
	  "すいか",
	  "すいとう",
	  "ずいぶん",
	  "すいようび",
	  "すうがく",
	  "すうじつ",
	  "すうせん",
	  "すおどり",
	  "すきま",
	  "すくう",
	  "すくない",
	  "すける",
	  "すごい",
	  "すこし",
	  "ずさん",
	  "すずしい",
	  "すすむ",
	  "すすめる",
	  "すっかり",
	  "ずっしり",
	  "ずっと",
	  "すてき",
	  "すてる",
	  "すねる",
	  "すのこ",
	  "すはだ",
	  "すばらしい",
	  "ずひょう",
	  "ずぶぬれ",
	  "すぶり",
	  "すふれ",
	  "すべて",
	  "すべる",
	  "ずほう",
	  "すぼん",
	  "すまい",
	  "すめし",
	  "すもう",
	  "すやき",
	  "すらすら",
	  "するめ",
	  "すれちがう",
	  "すろっと",
	  "すわる",
	  "すんぜん",
	  "すんぽう",
	  "せあぶら",
	  "せいかつ",
	  "せいげん",
	  "せいじ",
	  "せいよう",
	  "せおう",
	  "せかいかん",
	  "せきにん",
	  "せきむ",
	  "せきゆ",
	  "せきらんうん",
	  "せけん",
	  "せこう",
	  "せすじ",
	  "せたい",
	  "せたけ",
	  "せっかく",
	  "せっきゃく",
	  "ぜっく",
	  "せっけん",
	  "せっこつ",
	  "せっさたくま",
	  "せつぞく",
	  "せつだん",
	  "せつでん",
	  "せっぱん",
	  "せつび",
	  "せつぶん",
	  "せつめい",
	  "せつりつ",
	  "せなか",
	  "せのび",
	  "せはば",
	  "せびろ",
	  "せぼね",
	  "せまい",
	  "せまる",
	  "せめる",
	  "せもたれ",
	  "せりふ",
	  "ぜんあく",
	  "せんい",
	  "せんえい",
	  "せんか",
	  "せんきょ",
	  "せんく",
	  "せんげん",
	  "ぜんご",
	  "せんさい",
	  "せんしゅ",
	  "せんすい",
	  "せんせい",
	  "せんぞ",
	  "せんたく",
	  "せんちょう",
	  "せんてい",
	  "せんとう",
	  "せんぬき",
	  "せんねん",
	  "せんぱい",
	  "ぜんぶ",
	  "ぜんぽう",
	  "せんむ",
	  "せんめんじょ",
	  "せんもん",
	  "せんやく",
	  "せんゆう",
	  "せんよう",
	  "ぜんら",
	  "ぜんりゃく",
	  "せんれい",
	  "せんろ",
	  "そあく",
	  "そいとげる",
	  "そいね",
	  "そうがんきょう",
	  "そうき",
	  "そうご",
	  "そうしん",
	  "そうだん",
	  "そうなん",
	  "そうび",
	  "そうめん",
	  "そうり",
	  "そえもの",
	  "そえん",
	  "そがい",
	  "そげき",
	  "そこう",
	  "そこそこ",
	  "そざい",
	  "そしな",
	  "そせい",
	  "そせん",
	  "そそぐ",
	  "そだてる",
	  "そつう",
	  "そつえん",
	  "そっかん",
	  "そつぎょう",
	  "そっけつ",
	  "そっこう",
	  "そっせん",
	  "そっと",
	  "そとがわ",
	  "そとづら",
	  "そなえる",
	  "そなた",
	  "そふぼ",
	  "そぼく",
	  "そぼろ",
	  "そまつ",
	  "そまる",
	  "そむく",
	  "そむりえ",
	  "そめる",
	  "そもそも",
	  "そよかぜ",
	  "そらまめ",
	  "そろう",
	  "そんかい",
	  "そんけい",
	  "そんざい",
	  "そんしつ",
	  "そんぞく",
	  "そんちょう",
	  "ぞんび",
	  "ぞんぶん",
	  "そんみん",
	  "たあい",
	  "たいいん",
	  "たいうん",
	  "たいえき",
	  "たいおう",
	  "だいがく",
	  "たいき",
	  "たいぐう",
	  "たいけん",
	  "たいこ",
	  "たいざい",
	  "だいじょうぶ",
	  "だいすき",
	  "たいせつ",
	  "たいそう",
	  "だいたい",
	  "たいちょう",
	  "たいてい",
	  "だいどころ",
	  "たいない",
	  "たいねつ",
	  "たいのう",
	  "たいはん",
	  "だいひょう",
	  "たいふう",
	  "たいへん",
	  "たいほ",
	  "たいまつばな",
	  "たいみんぐ",
	  "たいむ",
	  "たいめん",
	  "たいやき",
	  "たいよう",
	  "たいら",
	  "たいりょく",
	  "たいる",
	  "たいわん",
	  "たうえ",
	  "たえる",
	  "たおす",
	  "たおる",
	  "たおれる",
	  "たかい",
	  "たかね",
	  "たきび",
	  "たくさん",
	  "たこく",
	  "たこやき",
	  "たさい",
	  "たしざん",
	  "だじゃれ",
	  "たすける",
	  "たずさわる",
	  "たそがれ",
	  "たたかう",
	  "たたく",
	  "ただしい",
	  "たたみ",
	  "たちばな",
	  "だっかい",
	  "だっきゃく",
	  "だっこ",
	  "だっしゅつ",
	  "だったい",
	  "たてる",
	  "たとえる",
	  "たなばた",
	  "たにん",
	  "たぬき",
	  "たのしみ",
	  "たはつ",
	  "たぶん",
	  "たべる",
	  "たぼう",
	  "たまご",
	  "たまる",
	  "だむる",
	  "ためいき",
	  "ためす",
	  "ためる",
	  "たもつ",
	  "たやすい",
	  "たよる",
	  "たらす",
	  "たりきほんがん",
	  "たりょう",
	  "たりる",
	  "たると",
	  "たれる",
	  "たれんと",
	  "たろっと",
	  "たわむれる",
	  "だんあつ",
	  "たんい",
	  "たんおん",
	  "たんか",
	  "たんき",
	  "たんけん",
	  "たんご",
	  "たんさん",
	  "たんじょうび",
	  "だんせい",
	  "たんそく",
	  "たんたい",
	  "だんち",
	  "たんてい",
	  "たんとう",
	  "だんな",
	  "たんにん",
	  "だんねつ",
	  "たんのう",
	  "たんぴん",
	  "だんぼう",
	  "たんまつ",
	  "たんめい",
	  "だんれつ",
	  "だんろ",
	  "だんわ",
	  "ちあい",
	  "ちあん",
	  "ちいき",
	  "ちいさい",
	  "ちえん",
	  "ちかい",
	  "ちから",
	  "ちきゅう",
	  "ちきん",
	  "ちけいず",
	  "ちけん",
	  "ちこく",
	  "ちさい",
	  "ちしき",
	  "ちしりょう",
	  "ちせい",
	  "ちそう",
	  "ちたい",
	  "ちたん",
	  "ちちおや",
	  "ちつじょ",
	  "ちてき",
	  "ちてん",
	  "ちぬき",
	  "ちぬり",
	  "ちのう",
	  "ちひょう",
	  "ちへいせん",
	  "ちほう",
	  "ちまた",
	  "ちみつ",
	  "ちみどろ",
	  "ちめいど",
	  "ちゃんこなべ",
	  "ちゅうい",
	  "ちゆりょく",
	  "ちょうし",
	  "ちょさくけん",
	  "ちらし",
	  "ちらみ",
	  "ちりがみ",
	  "ちりょう",
	  "ちるど",
	  "ちわわ",
	  "ちんたい",
	  "ちんもく",
	  "ついか",
	  "ついたち",
	  "つうか",
	  "つうじょう",
	  "つうはん",
	  "つうわ",
	  "つかう",
	  "つかれる",
	  "つくね",
	  "つくる",
	  "つけね",
	  "つける",
	  "つごう",
	  "つたえる",
	  "つづく",
	  "つつじ",
	  "つつむ",
	  "つとめる",
	  "つながる",
	  "つなみ",
	  "つねづね",
	  "つのる",
	  "つぶす",
	  "つまらない",
	  "つまる",
	  "つみき",
	  "つめたい",
	  "つもり",
	  "つもる",
	  "つよい",
	  "つるぼ",
	  "つるみく",
	  "つわもの",
	  "つわり",
	  "てあし",
	  "てあて",
	  "てあみ",
	  "ていおん",
	  "ていか",
	  "ていき",
	  "ていけい",
	  "ていこく",
	  "ていさつ",
	  "ていし",
	  "ていせい",
	  "ていたい",
	  "ていど",
	  "ていねい",
	  "ていひょう",
	  "ていへん",
	  "ていぼう",
	  "てうち",
	  "ておくれ",
	  "てきとう",
	  "てくび",
	  "でこぼこ",
	  "てさぎょう",
	  "てさげ",
	  "てすり",
	  "てそう",
	  "てちがい",
	  "てちょう",
	  "てつがく",
	  "てつづき",
	  "でっぱ",
	  "てつぼう",
	  "てつや",
	  "でぬかえ",
	  "てぬき",
	  "てぬぐい",
	  "てのひら",
	  "てはい",
	  "てぶくろ",
	  "てふだ",
	  "てほどき",
	  "てほん",
	  "てまえ",
	  "てまきずし",
	  "てみじか",
	  "てみやげ",
	  "てらす",
	  "てれび",
	  "てわけ",
	  "てわたし",
	  "でんあつ",
	  "てんいん",
	  "てんかい",
	  "てんき",
	  "てんぐ",
	  "てんけん",
	  "てんごく",
	  "てんさい",
	  "てんし",
	  "てんすう",
	  "でんち",
	  "てんてき",
	  "てんとう",
	  "てんない",
	  "てんぷら",
	  "てんぼうだい",
	  "てんめつ",
	  "てんらんかい",
	  "でんりょく",
	  "でんわ",
	  "どあい",
	  "といれ",
	  "どうかん",
	  "とうきゅう",
	  "どうぐ",
	  "とうし",
	  "とうむぎ",
	  "とおい",
	  "とおか",
	  "とおく",
	  "とおす",
	  "とおる",
	  "とかい",
	  "とかす",
	  "ときおり",
	  "ときどき",
	  "とくい",
	  "とくしゅう",
	  "とくてん",
	  "とくに",
	  "とくべつ",
	  "とけい",
	  "とける",
	  "とこや",
	  "とさか",
	  "としょかん",
	  "とそう",
	  "とたん",
	  "とちゅう",
	  "とっきゅう",
	  "とっくん",
	  "とつぜん",
	  "とつにゅう",
	  "とどける",
	  "ととのえる",
	  "とない",
	  "となえる",
	  "となり",
	  "とのさま",
	  "とばす",
	  "どぶがわ",
	  "とほう",
	  "とまる",
	  "とめる",
	  "ともだち",
	  "ともる",
	  "どようび",
	  "とらえる",
	  "とんかつ",
	  "どんぶり",
	  "ないかく",
	  "ないこう",
	  "ないしょ",
	  "ないす",
	  "ないせん",
	  "ないそう",
	  "なおす",
	  "ながい",
	  "なくす",
	  "なげる",
	  "なこうど",
	  "なさけ",
	  "なたでここ",
	  "なっとう",
	  "なつやすみ",
	  "ななおし",
	  "なにごと",
	  "なにもの",
	  "なにわ",
	  "なのか",
	  "なふだ",
	  "なまいき",
	  "なまえ",
	  "なまみ",
	  "なみだ",
	  "なめらか",
	  "なめる",
	  "なやむ",
	  "ならう",
	  "ならび",
	  "ならぶ",
	  "なれる",
	  "なわとび",
	  "なわばり",
	  "にあう",
	  "にいがた",
	  "にうけ",
	  "におい",
	  "にかい",
	  "にがて",
	  "にきび",
	  "にくしみ",
	  "にくまん",
	  "にげる",
	  "にさんかたんそ",
	  "にしき",
	  "にせもの",
	  "にちじょう",
	  "にちようび",
	  "にっか",
	  "にっき",
	  "にっけい",
	  "にっこう",
	  "にっさん",
	  "にっしょく",
	  "にっすう",
	  "にっせき",
	  "にってい",
	  "になう",
	  "にほん",
	  "にまめ",
	  "にもつ",
	  "にやり",
	  "にゅういん",
	  "にりんしゃ",
	  "にわとり",
	  "にんい",
	  "にんか",
	  "にんき",
	  "にんげん",
	  "にんしき",
	  "にんずう",
	  "にんそう",
	  "にんたい",
	  "にんち",
	  "にんてい",
	  "にんにく",
	  "にんぷ",
	  "にんまり",
	  "にんむ",
	  "にんめい",
	  "にんよう",
	  "ぬいくぎ",
	  "ぬかす",
	  "ぬぐいとる",
	  "ぬぐう",
	  "ぬくもり",
	  "ぬすむ",
	  "ぬまえび",
	  "ぬめり",
	  "ぬらす",
	  "ぬんちゃく",
	  "ねあげ",
	  "ねいき",
	  "ねいる",
	  "ねいろ",
	  "ねぐせ",
	  "ねくたい",
	  "ねくら",
	  "ねこぜ",
	  "ねこむ",
	  "ねさげ",
	  "ねすごす",
	  "ねそべる",
	  "ねだん",
	  "ねつい",
	  "ねっしん",
	  "ねつぞう",
	  "ねったいぎょ",
	  "ねぶそく",
	  "ねふだ",
	  "ねぼう",
	  "ねほりはほり",
	  "ねまき",
	  "ねまわし",
	  "ねみみ",
	  "ねむい",
	  "ねむたい",
	  "ねもと",
	  "ねらう",
	  "ねわざ",
	  "ねんいり",
	  "ねんおし",
	  "ねんかん",
	  "ねんきん",
	  "ねんぐ",
	  "ねんざ",
	  "ねんし",
	  "ねんちゃく",
	  "ねんど",
	  "ねんぴ",
	  "ねんぶつ",
	  "ねんまつ",
	  "ねんりょう",
	  "ねんれい",
	  "のいず",
	  "のおづま",
	  "のがす",
	  "のきなみ",
	  "のこぎり",
	  "のこす",
	  "のこる",
	  "のせる",
	  "のぞく",
	  "のぞむ",
	  "のたまう",
	  "のちほど",
	  "のっく",
	  "のばす",
	  "のはら",
	  "のべる",
	  "のぼる",
	  "のみもの",
	  "のやま",
	  "のらいぬ",
	  "のらねこ",
	  "のりもの",
	  "のりゆき",
	  "のれん",
	  "のんき",
	  "ばあい",
	  "はあく",
	  "ばあさん",
	  "ばいか",
	  "ばいく",
	  "はいけん",
	  "はいご",
	  "はいしん",
	  "はいすい",
	  "はいせん",
	  "はいそう",
	  "はいち",
	  "ばいばい",
	  "はいれつ",
	  "はえる",
	  "はおる",
	  "はかい",
	  "ばかり",
	  "はかる",
	  "はくしゅ",
	  "はけん",
	  "はこぶ",
	  "はさみ",
	  "はさん",
	  "はしご",
	  "ばしょ",
	  "はしる",
	  "はせる",
	  "ぱそこん",
	  "はそん",
	  "はたん",
	  "はちみつ",
	  "はつおん",
	  "はっかく",
	  "はづき",
	  "はっきり",
	  "はっくつ",
	  "はっけん",
	  "はっこう",
	  "はっさん",
	  "はっしん",
	  "はったつ",
	  "はっちゅう",
	  "はってん",
	  "はっぴょう",
	  "はっぽう",
	  "はなす",
	  "はなび",
	  "はにかむ",
	  "はぶらし",
	  "はみがき",
	  "はむかう",
	  "はめつ",
	  "はやい",
	  "はやし",
	  "はらう",
	  "はろうぃん",
	  "はわい",
	  "はんい",
	  "はんえい",
	  "はんおん",
	  "はんかく",
	  "はんきょう",
	  "ばんぐみ",
	  "はんこ",
	  "はんしゃ",
	  "はんすう",
	  "はんだん",
	  "ぱんち",
	  "ぱんつ",
	  "はんてい",
	  "はんとし",
	  "はんのう",
	  "はんぱ",
	  "はんぶん",
	  "はんぺん",
	  "はんぼうき",
	  "はんめい",
	  "はんらん",
	  "はんろん",
	  "ひいき",
	  "ひうん",
	  "ひえる",
	  "ひかく",
	  "ひかり",
	  "ひかる",
	  "ひかん",
	  "ひくい",
	  "ひけつ",
	  "ひこうき",
	  "ひこく",
	  "ひさい",
	  "ひさしぶり",
	  "ひさん",
	  "びじゅつかん",
	  "ひしょ",
	  "ひそか",
	  "ひそむ",
	  "ひたむき",
	  "ひだり",
	  "ひたる",
	  "ひつぎ",
	  "ひっこし",
	  "ひっし",
	  "ひつじゅひん",
	  "ひっす",
	  "ひつぜん",
	  "ぴったり",
	  "ぴっちり",
	  "ひつよう",
	  "ひてい",
	  "ひとごみ",
	  "ひなまつり",
	  "ひなん",
	  "ひねる",
	  "ひはん",
	  "ひびく",
	  "ひひょう",
	  "ひほう",
	  "ひまわり",
	  "ひまん",
	  "ひみつ",
	  "ひめい",
	  "ひめじし",
	  "ひやけ",
	  "ひやす",
	  "ひよう",
	  "びょうき",
	  "ひらがな",
	  "ひらく",
	  "ひりつ",
	  "ひりょう",
	  "ひるま",
	  "ひるやすみ",
	  "ひれい",
	  "ひろい",
	  "ひろう",
	  "ひろき",
	  "ひろゆき",
	  "ひんかく",
	  "ひんけつ",
	  "ひんこん",
	  "ひんしゅ",
	  "ひんそう",
	  "ぴんち",
	  "ひんぱん",
	  "びんぼう",
	  "ふあん",
	  "ふいうち",
	  "ふうけい",
	  "ふうせん",
	  "ぷうたろう",
	  "ふうとう",
	  "ふうふ",
	  "ふえる",
	  "ふおん",
	  "ふかい",
	  "ふきん",
	  "ふくざつ",
	  "ふくぶくろ",
	  "ふこう",
	  "ふさい",
	  "ふしぎ",
	  "ふじみ",
	  "ふすま",
	  "ふせい",
	  "ふせぐ",
	  "ふそく",
	  "ぶたにく",
	  "ふたん",
	  "ふちょう",
	  "ふつう",
	  "ふつか",
	  "ふっかつ",
	  "ふっき",
	  "ふっこく",
	  "ぶどう",
	  "ふとる",
	  "ふとん",
	  "ふのう",
	  "ふはい",
	  "ふひょう",
	  "ふへん",
	  "ふまん",
	  "ふみん",
	  "ふめつ",
	  "ふめん",
	  "ふよう",
	  "ふりこ",
	  "ふりる",
	  "ふるい",
	  "ふんいき",
	  "ぶんがく",
	  "ぶんぐ",
	  "ふんしつ",
	  "ぶんせき",
	  "ふんそう",
	  "ぶんぽう",
	  "へいあん",
	  "へいおん",
	  "へいがい",
	  "へいき",
	  "へいげん",
	  "へいこう",
	  "へいさ",
	  "へいしゃ",
	  "へいせつ",
	  "へいそ",
	  "へいたく",
	  "へいてん",
	  "へいねつ",
	  "へいわ",
	  "へきが",
	  "へこむ",
	  "べにいろ",
	  "べにしょうが",
	  "へらす",
	  "へんかん",
	  "べんきょう",
	  "べんごし",
	  "へんさい",
	  "へんたい",
	  "べんり",
	  "ほあん",
	  "ほいく",
	  "ぼうぎょ",
	  "ほうこく",
	  "ほうそう",
	  "ほうほう",
	  "ほうもん",
	  "ほうりつ",
	  "ほえる",
	  "ほおん",
	  "ほかん",
	  "ほきょう",
	  "ぼきん",
	  "ほくろ",
	  "ほけつ",
	  "ほけん",
	  "ほこう",
	  "ほこる",
	  "ほしい",
	  "ほしつ",
	  "ほしゅ",
	  "ほしょう",
	  "ほせい",
	  "ほそい",
	  "ほそく",
	  "ほたて",
	  "ほたる",
	  "ぽちぶくろ",
	  "ほっきょく",
	  "ほっさ",
	  "ほったん",
	  "ほとんど",
	  "ほめる",
	  "ほんい",
	  "ほんき",
	  "ほんけ",
	  "ほんしつ",
	  "ほんやく",
	  "まいにち",
	  "まかい",
	  "まかせる",
	  "まがる",
	  "まける",
	  "まこと",
	  "まさつ",
	  "まじめ",
	  "ますく",
	  "まぜる",
	  "まつり",
	  "まとめ",
	  "まなぶ",
	  "まぬけ",
	  "まねく",
	  "まほう",
	  "まもる",
	  "まゆげ",
	  "まよう",
	  "まろやか",
	  "まわす",
	  "まわり",
	  "まわる",
	  "まんが",
	  "まんきつ",
	  "まんぞく",
	  "まんなか",
	  "みいら",
	  "みうち",
	  "みえる",
	  "みがく",
	  "みかた",
	  "みかん",
	  "みけん",
	  "みこん",
	  "みじかい",
	  "みすい",
	  "みすえる",
	  "みせる",
	  "みっか",
	  "みつかる",
	  "みつける",
	  "みてい",
	  "みとめる",
	  "みなと",
	  "みなみかさい",
	  "みねらる",
	  "みのう",
	  "みのがす",
	  "みほん",
	  "みもと",
	  "みやげ",
	  "みらい",
	  "みりょく",
	  "みわく",
	  "みんか",
	  "みんぞく",
	  "むいか",
	  "むえき",
	  "むえん",
	  "むかい",
	  "むかう",
	  "むかえ",
	  "むかし",
	  "むぎちゃ",
	  "むける",
	  "むげん",
	  "むさぼる",
	  "むしあつい",
	  "むしば",
	  "むじゅん",
	  "むしろ",
	  "むすう",
	  "むすこ",
	  "むすぶ",
	  "むすめ",
	  "むせる",
	  "むせん",
	  "むちゅう",
	  "むなしい",
	  "むのう",
	  "むやみ",
	  "むよう",
	  "むらさき",
	  "むりょう",
	  "むろん",
	  "めいあん",
	  "めいうん",
	  "めいえん",
	  "めいかく",
	  "めいきょく",
	  "めいさい",
	  "めいし",
	  "めいそう",
	  "めいぶつ",
	  "めいれい",
	  "めいわく",
	  "めぐまれる",
	  "めざす",
	  "めした",
	  "めずらしい",
	  "めだつ",
	  "めまい",
	  "めやす",
	  "めんきょ",
	  "めんせき",
	  "めんどう",
	  "もうしあげる",
	  "もうどうけん",
	  "もえる",
	  "もくし",
	  "もくてき",
	  "もくようび",
	  "もちろん",
	  "もどる",
	  "もらう",
	  "もんく",
	  "もんだい",
	  "やおや",
	  "やける",
	  "やさい",
	  "やさしい",
	  "やすい",
	  "やすたろう",
	  "やすみ",
	  "やせる",
	  "やそう",
	  "やたい",
	  "やちん",
	  "やっと",
	  "やっぱり",
	  "やぶる",
	  "やめる",
	  "ややこしい",
	  "やよい",
	  "やわらかい",
	  "ゆうき",
	  "ゆうびんきょく",
	  "ゆうべ",
	  "ゆうめい",
	  "ゆけつ",
	  "ゆしゅつ",
	  "ゆせん",
	  "ゆそう",
	  "ゆたか",
	  "ゆちゃく",
	  "ゆでる",
	  "ゆにゅう",
	  "ゆびわ",
	  "ゆらい",
	  "ゆれる",
	  "ようい",
	  "ようか",
	  "ようきゅう",
	  "ようじ",
	  "ようす",
	  "ようちえん",
	  "よかぜ",
	  "よかん",
	  "よきん",
	  "よくせい",
	  "よくぼう",
	  "よけい",
	  "よごれる",
	  "よさん",
	  "よしゅう",
	  "よそう",
	  "よそく",
	  "よっか",
	  "よてい",
	  "よどがわく",
	  "よねつ",
	  "よやく",
	  "よゆう",
	  "よろこぶ",
	  "よろしい",
	  "らいう",
	  "らくがき",
	  "らくご",
	  "らくさつ",
	  "らくだ",
	  "らしんばん",
	  "らせん",
	  "らぞく",
	  "らたい",
	  "らっか",
	  "られつ",
	  "りえき",
	  "りかい",
	  "りきさく",
	  "りきせつ",
	  "りくぐん",
	  "りくつ",
	  "りけん",
	  "りこう",
	  "りせい",
	  "りそう",
	  "りそく",
	  "りてん",
	  "りねん",
	  "りゆう",
	  "りゅうがく",
	  "りよう",
	  "りょうり",
	  "りょかん",
	  "りょくちゃ",
	  "りょこう",
	  "りりく",
	  "りれき",
	  "りろん",
	  "りんご",
	  "るいけい",
	  "るいさい",
	  "るいじ",
	  "るいせき",
	  "るすばん",
	  "るりがわら",
	  "れいかん",
	  "れいぎ",
	  "れいせい",
	  "れいぞうこ",
	  "れいとう",
	  "れいぼう",
	  "れきし",
	  "れきだい",
	  "れんあい",
	  "れんけい",
	  "れんこん",
	  "れんさい",
	  "れんしゅう",
	  "れんぞく",
	  "れんらく",
	  "ろうか",
	  "ろうご",
	  "ろうじん",
	  "ろうそく",
	  "ろくが",
	  "ろこつ",
	  "ろじうら",
	  "ろしゅつ",
	  "ろせん",
	  "ろてん",
	  "ろめん",
	  "ろれつ",
	  "ろんぎ",
	  "ろんぱ",
	  "ろんぶん",
	  "ろんり",
	  "わかす",
	  "わかめ",
	  "わかやま",
	  "わかれる",
	  "わしつ",
	  "わじまし",
	  "わすれもの",
	  "わらう",
	  "われる"
	]
	;

	var japanese$1 = /*#__PURE__*/Object.freeze({
		default: japanese
	});

	var korean = [
	  "가격",
	  "가끔",
	  "가난",
	  "가능",
	  "가득",
	  "가르침",
	  "가뭄",
	  "가방",
	  "가상",
	  "가슴",
	  "가운데",
	  "가을",
	  "가이드",
	  "가입",
	  "가장",
	  "가정",
	  "가족",
	  "가죽",
	  "각오",
	  "각자",
	  "간격",
	  "간부",
	  "간섭",
	  "간장",
	  "간접",
	  "간판",
	  "갈등",
	  "갈비",
	  "갈색",
	  "갈증",
	  "감각",
	  "감기",
	  "감소",
	  "감수성",
	  "감자",
	  "감정",
	  "갑자기",
	  "강남",
	  "강당",
	  "강도",
	  "강력히",
	  "강변",
	  "강북",
	  "강사",
	  "강수량",
	  "강아지",
	  "강원도",
	  "강의",
	  "강제",
	  "강조",
	  "같이",
	  "개구리",
	  "개나리",
	  "개방",
	  "개별",
	  "개선",
	  "개성",
	  "개인",
	  "객관적",
	  "거실",
	  "거액",
	  "거울",
	  "거짓",
	  "거품",
	  "걱정",
	  "건강",
	  "건물",
	  "건설",
	  "건조",
	  "건축",
	  "걸음",
	  "검사",
	  "검토",
	  "게시판",
	  "게임",
	  "겨울",
	  "견해",
	  "결과",
	  "결국",
	  "결론",
	  "결석",
	  "결승",
	  "결심",
	  "결정",
	  "결혼",
	  "경계",
	  "경고",
	  "경기",
	  "경력",
	  "경복궁",
	  "경비",
	  "경상도",
	  "경영",
	  "경우",
	  "경쟁",
	  "경제",
	  "경주",
	  "경찰",
	  "경치",
	  "경향",
	  "경험",
	  "계곡",
	  "계단",
	  "계란",
	  "계산",
	  "계속",
	  "계약",
	  "계절",
	  "계층",
	  "계획",
	  "고객",
	  "고구려",
	  "고궁",
	  "고급",
	  "고등학생",
	  "고무신",
	  "고민",
	  "고양이",
	  "고장",
	  "고전",
	  "고집",
	  "고춧가루",
	  "고통",
	  "고향",
	  "곡식",
	  "골목",
	  "골짜기",
	  "골프",
	  "공간",
	  "공개",
	  "공격",
	  "공군",
	  "공급",
	  "공기",
	  "공동",
	  "공무원",
	  "공부",
	  "공사",
	  "공식",
	  "공업",
	  "공연",
	  "공원",
	  "공장",
	  "공짜",
	  "공책",
	  "공통",
	  "공포",
	  "공항",
	  "공휴일",
	  "과목",
	  "과일",
	  "과장",
	  "과정",
	  "과학",
	  "관객",
	  "관계",
	  "관광",
	  "관념",
	  "관람",
	  "관련",
	  "관리",
	  "관습",
	  "관심",
	  "관점",
	  "관찰",
	  "광경",
	  "광고",
	  "광장",
	  "광주",
	  "괴로움",
	  "굉장히",
	  "교과서",
	  "교문",
	  "교복",
	  "교실",
	  "교양",
	  "교육",
	  "교장",
	  "교직",
	  "교통",
	  "교환",
	  "교훈",
	  "구경",
	  "구름",
	  "구멍",
	  "구별",
	  "구분",
	  "구석",
	  "구성",
	  "구속",
	  "구역",
	  "구입",
	  "구청",
	  "구체적",
	  "국가",
	  "국기",
	  "국내",
	  "국립",
	  "국물",
	  "국민",
	  "국수",
	  "국어",
	  "국왕",
	  "국적",
	  "국제",
	  "국회",
	  "군대",
	  "군사",
	  "군인",
	  "궁극적",
	  "권리",
	  "권위",
	  "권투",
	  "귀국",
	  "귀신",
	  "규정",
	  "규칙",
	  "균형",
	  "그날",
	  "그냥",
	  "그늘",
	  "그러나",
	  "그룹",
	  "그릇",
	  "그림",
	  "그제서야",
	  "그토록",
	  "극복",
	  "극히",
	  "근거",
	  "근교",
	  "근래",
	  "근로",
	  "근무",
	  "근본",
	  "근원",
	  "근육",
	  "근처",
	  "글씨",
	  "글자",
	  "금강산",
	  "금고",
	  "금년",
	  "금메달",
	  "금액",
	  "금연",
	  "금요일",
	  "금지",
	  "긍정적",
	  "기간",
	  "기관",
	  "기념",
	  "기능",
	  "기독교",
	  "기둥",
	  "기록",
	  "기름",
	  "기법",
	  "기본",
	  "기분",
	  "기쁨",
	  "기숙사",
	  "기술",
	  "기억",
	  "기업",
	  "기온",
	  "기운",
	  "기원",
	  "기적",
	  "기준",
	  "기침",
	  "기혼",
	  "기획",
	  "긴급",
	  "긴장",
	  "길이",
	  "김밥",
	  "김치",
	  "김포공항",
	  "깍두기",
	  "깜빡",
	  "깨달음",
	  "깨소금",
	  "껍질",
	  "꼭대기",
	  "꽃잎",
	  "나들이",
	  "나란히",
	  "나머지",
	  "나물",
	  "나침반",
	  "나흘",
	  "낙엽",
	  "난방",
	  "날개",
	  "날씨",
	  "날짜",
	  "남녀",
	  "남대문",
	  "남매",
	  "남산",
	  "남자",
	  "남편",
	  "남학생",
	  "낭비",
	  "낱말",
	  "내년",
	  "내용",
	  "내일",
	  "냄비",
	  "냄새",
	  "냇물",
	  "냉동",
	  "냉면",
	  "냉방",
	  "냉장고",
	  "넥타이",
	  "넷째",
	  "노동",
	  "노란색",
	  "노력",
	  "노인",
	  "녹음",
	  "녹차",
	  "녹화",
	  "논리",
	  "논문",
	  "논쟁",
	  "놀이",
	  "농구",
	  "농담",
	  "농민",
	  "농부",
	  "농업",
	  "농장",
	  "농촌",
	  "높이",
	  "눈동자",
	  "눈물",
	  "눈썹",
	  "뉴욕",
	  "느낌",
	  "늑대",
	  "능동적",
	  "능력",
	  "다방",
	  "다양성",
	  "다음",
	  "다이어트",
	  "다행",
	  "단계",
	  "단골",
	  "단독",
	  "단맛",
	  "단순",
	  "단어",
	  "단위",
	  "단점",
	  "단체",
	  "단추",
	  "단편",
	  "단풍",
	  "달걀",
	  "달러",
	  "달력",
	  "달리",
	  "닭고기",
	  "담당",
	  "담배",
	  "담요",
	  "담임",
	  "답변",
	  "답장",
	  "당근",
	  "당분간",
	  "당연히",
	  "당장",
	  "대규모",
	  "대낮",
	  "대단히",
	  "대답",
	  "대도시",
	  "대략",
	  "대량",
	  "대륙",
	  "대문",
	  "대부분",
	  "대신",
	  "대응",
	  "대장",
	  "대전",
	  "대접",
	  "대중",
	  "대책",
	  "대출",
	  "대충",
	  "대통령",
	  "대학",
	  "대한민국",
	  "대합실",
	  "대형",
	  "덩어리",
	  "데이트",
	  "도대체",
	  "도덕",
	  "도둑",
	  "도망",
	  "도서관",
	  "도심",
	  "도움",
	  "도입",
	  "도자기",
	  "도저히",
	  "도전",
	  "도중",
	  "도착",
	  "독감",
	  "독립",
	  "독서",
	  "독일",
	  "독창적",
	  "동화책",
	  "뒷모습",
	  "뒷산",
	  "딸아이",
	  "마누라",
	  "마늘",
	  "마당",
	  "마라톤",
	  "마련",
	  "마무리",
	  "마사지",
	  "마약",
	  "마요네즈",
	  "마을",
	  "마음",
	  "마이크",
	  "마중",
	  "마지막",
	  "마찬가지",
	  "마찰",
	  "마흔",
	  "막걸리",
	  "막내",
	  "막상",
	  "만남",
	  "만두",
	  "만세",
	  "만약",
	  "만일",
	  "만점",
	  "만족",
	  "만화",
	  "많이",
	  "말기",
	  "말씀",
	  "말투",
	  "맘대로",
	  "망원경",
	  "매년",
	  "매달",
	  "매력",
	  "매번",
	  "매스컴",
	  "매일",
	  "매장",
	  "맥주",
	  "먹이",
	  "먼저",
	  "먼지",
	  "멀리",
	  "메일",
	  "며느리",
	  "며칠",
	  "면담",
	  "멸치",
	  "명단",
	  "명령",
	  "명예",
	  "명의",
	  "명절",
	  "명칭",
	  "명함",
	  "모금",
	  "모니터",
	  "모델",
	  "모든",
	  "모범",
	  "모습",
	  "모양",
	  "모임",
	  "모조리",
	  "모집",
	  "모퉁이",
	  "목걸이",
	  "목록",
	  "목사",
	  "목소리",
	  "목숨",
	  "목적",
	  "목표",
	  "몰래",
	  "몸매",
	  "몸무게",
	  "몸살",
	  "몸속",
	  "몸짓",
	  "몸통",
	  "몹시",
	  "무관심",
	  "무궁화",
	  "무더위",
	  "무덤",
	  "무릎",
	  "무슨",
	  "무엇",
	  "무역",
	  "무용",
	  "무조건",
	  "무지개",
	  "무척",
	  "문구",
	  "문득",
	  "문법",
	  "문서",
	  "문제",
	  "문학",
	  "문화",
	  "물가",
	  "물건",
	  "물결",
	  "물고기",
	  "물론",
	  "물리학",
	  "물음",
	  "물질",
	  "물체",
	  "미국",
	  "미디어",
	  "미사일",
	  "미술",
	  "미역",
	  "미용실",
	  "미움",
	  "미인",
	  "미팅",
	  "미혼",
	  "민간",
	  "민족",
	  "민주",
	  "믿음",
	  "밀가루",
	  "밀리미터",
	  "밑바닥",
	  "바가지",
	  "바구니",
	  "바나나",
	  "바늘",
	  "바닥",
	  "바닷가",
	  "바람",
	  "바이러스",
	  "바탕",
	  "박물관",
	  "박사",
	  "박수",
	  "반대",
	  "반드시",
	  "반말",
	  "반발",
	  "반성",
	  "반응",
	  "반장",
	  "반죽",
	  "반지",
	  "반찬",
	  "받침",
	  "발가락",
	  "발걸음",
	  "발견",
	  "발달",
	  "발레",
	  "발목",
	  "발바닥",
	  "발생",
	  "발음",
	  "발자국",
	  "발전",
	  "발톱",
	  "발표",
	  "밤하늘",
	  "밥그릇",
	  "밥맛",
	  "밥상",
	  "밥솥",
	  "방금",
	  "방면",
	  "방문",
	  "방바닥",
	  "방법",
	  "방송",
	  "방식",
	  "방안",
	  "방울",
	  "방지",
	  "방학",
	  "방해",
	  "방향",
	  "배경",
	  "배꼽",
	  "배달",
	  "배드민턴",
	  "백두산",
	  "백색",
	  "백성",
	  "백인",
	  "백제",
	  "백화점",
	  "버릇",
	  "버섯",
	  "버튼",
	  "번개",
	  "번역",
	  "번지",
	  "번호",
	  "벌금",
	  "벌레",
	  "벌써",
	  "범위",
	  "범인",
	  "범죄",
	  "법률",
	  "법원",
	  "법적",
	  "법칙",
	  "베이징",
	  "벨트",
	  "변경",
	  "변동",
	  "변명",
	  "변신",
	  "변호사",
	  "변화",
	  "별도",
	  "별명",
	  "별일",
	  "병실",
	  "병아리",
	  "병원",
	  "보관",
	  "보너스",
	  "보라색",
	  "보람",
	  "보름",
	  "보상",
	  "보안",
	  "보자기",
	  "보장",
	  "보전",
	  "보존",
	  "보통",
	  "보편적",
	  "보험",
	  "복도",
	  "복사",
	  "복숭아",
	  "복습",
	  "볶음",
	  "본격적",
	  "본래",
	  "본부",
	  "본사",
	  "본성",
	  "본인",
	  "본질",
	  "볼펜",
	  "봉사",
	  "봉지",
	  "봉투",
	  "부근",
	  "부끄러움",
	  "부담",
	  "부동산",
	  "부문",
	  "부분",
	  "부산",
	  "부상",
	  "부엌",
	  "부인",
	  "부작용",
	  "부장",
	  "부정",
	  "부족",
	  "부지런히",
	  "부친",
	  "부탁",
	  "부품",
	  "부회장",
	  "북부",
	  "북한",
	  "분노",
	  "분량",
	  "분리",
	  "분명",
	  "분석",
	  "분야",
	  "분위기",
	  "분필",
	  "분홍색",
	  "불고기",
	  "불과",
	  "불교",
	  "불꽃",
	  "불만",
	  "불법",
	  "불빛",
	  "불안",
	  "불이익",
	  "불행",
	  "브랜드",
	  "비극",
	  "비난",
	  "비닐",
	  "비둘기",
	  "비디오",
	  "비로소",
	  "비만",
	  "비명",
	  "비밀",
	  "비바람",
	  "비빔밥",
	  "비상",
	  "비용",
	  "비율",
	  "비중",
	  "비타민",
	  "비판",
	  "빌딩",
	  "빗물",
	  "빗방울",
	  "빗줄기",
	  "빛깔",
	  "빨간색",
	  "빨래",
	  "빨리",
	  "사건",
	  "사계절",
	  "사나이",
	  "사냥",
	  "사람",
	  "사랑",
	  "사립",
	  "사모님",
	  "사물",
	  "사방",
	  "사상",
	  "사생활",
	  "사설",
	  "사슴",
	  "사실",
	  "사업",
	  "사용",
	  "사월",
	  "사장",
	  "사전",
	  "사진",
	  "사촌",
	  "사춘기",
	  "사탕",
	  "사투리",
	  "사흘",
	  "산길",
	  "산부인과",
	  "산업",
	  "산책",
	  "살림",
	  "살인",
	  "살짝",
	  "삼계탕",
	  "삼국",
	  "삼십",
	  "삼월",
	  "삼촌",
	  "상관",
	  "상금",
	  "상대",
	  "상류",
	  "상반기",
	  "상상",
	  "상식",
	  "상업",
	  "상인",
	  "상자",
	  "상점",
	  "상처",
	  "상추",
	  "상태",
	  "상표",
	  "상품",
	  "상황",
	  "새벽",
	  "색깔",
	  "색연필",
	  "생각",
	  "생명",
	  "생물",
	  "생방송",
	  "생산",
	  "생선",
	  "생신",
	  "생일",
	  "생활",
	  "서랍",
	  "서른",
	  "서명",
	  "서민",
	  "서비스",
	  "서양",
	  "서울",
	  "서적",
	  "서점",
	  "서쪽",
	  "서클",
	  "석사",
	  "석유",
	  "선거",
	  "선물",
	  "선배",
	  "선생",
	  "선수",
	  "선원",
	  "선장",
	  "선전",
	  "선택",
	  "선풍기",
	  "설거지",
	  "설날",
	  "설렁탕",
	  "설명",
	  "설문",
	  "설사",
	  "설악산",
	  "설치",
	  "설탕",
	  "섭씨",
	  "성공",
	  "성당",
	  "성명",
	  "성별",
	  "성인",
	  "성장",
	  "성적",
	  "성질",
	  "성함",
	  "세금",
	  "세미나",
	  "세상",
	  "세월",
	  "세종대왕",
	  "세탁",
	  "센터",
	  "센티미터",
	  "셋째",
	  "소규모",
	  "소극적",
	  "소금",
	  "소나기",
	  "소년",
	  "소득",
	  "소망",
	  "소문",
	  "소설",
	  "소속",
	  "소아과",
	  "소용",
	  "소원",
	  "소음",
	  "소중히",
	  "소지품",
	  "소질",
	  "소풍",
	  "소형",
	  "속담",
	  "속도",
	  "속옷",
	  "손가락",
	  "손길",
	  "손녀",
	  "손님",
	  "손등",
	  "손목",
	  "손뼉",
	  "손실",
	  "손질",
	  "손톱",
	  "손해",
	  "솔직히",
	  "솜씨",
	  "송아지",
	  "송이",
	  "송편",
	  "쇠고기",
	  "쇼핑",
	  "수건",
	  "수년",
	  "수단",
	  "수돗물",
	  "수동적",
	  "수면",
	  "수명",
	  "수박",
	  "수상",
	  "수석",
	  "수술",
	  "수시로",
	  "수업",
	  "수염",
	  "수영",
	  "수입",
	  "수준",
	  "수집",
	  "수출",
	  "수컷",
	  "수필",
	  "수학",
	  "수험생",
	  "수화기",
	  "숙녀",
	  "숙소",
	  "숙제",
	  "순간",
	  "순서",
	  "순수",
	  "순식간",
	  "순위",
	  "숟가락",
	  "술병",
	  "술집",
	  "숫자",
	  "스님",
	  "스물",
	  "스스로",
	  "스승",
	  "스웨터",
	  "스위치",
	  "스케이트",
	  "스튜디오",
	  "스트레스",
	  "스포츠",
	  "슬쩍",
	  "슬픔",
	  "습관",
	  "습기",
	  "승객",
	  "승리",
	  "승부",
	  "승용차",
	  "승진",
	  "시각",
	  "시간",
	  "시골",
	  "시금치",
	  "시나리오",
	  "시댁",
	  "시리즈",
	  "시멘트",
	  "시민",
	  "시부모",
	  "시선",
	  "시설",
	  "시스템",
	  "시아버지",
	  "시어머니",
	  "시월",
	  "시인",
	  "시일",
	  "시작",
	  "시장",
	  "시절",
	  "시점",
	  "시중",
	  "시즌",
	  "시집",
	  "시청",
	  "시합",
	  "시험",
	  "식구",
	  "식기",
	  "식당",
	  "식량",
	  "식료품",
	  "식물",
	  "식빵",
	  "식사",
	  "식생활",
	  "식초",
	  "식탁",
	  "식품",
	  "신고",
	  "신규",
	  "신념",
	  "신문",
	  "신발",
	  "신비",
	  "신사",
	  "신세",
	  "신용",
	  "신제품",
	  "신청",
	  "신체",
	  "신화",
	  "실감",
	  "실내",
	  "실력",
	  "실례",
	  "실망",
	  "실수",
	  "실습",
	  "실시",
	  "실장",
	  "실정",
	  "실질적",
	  "실천",
	  "실체",
	  "실컷",
	  "실태",
	  "실패",
	  "실험",
	  "실현",
	  "심리",
	  "심부름",
	  "심사",
	  "심장",
	  "심정",
	  "심판",
	  "쌍둥이",
	  "씨름",
	  "씨앗",
	  "아가씨",
	  "아나운서",
	  "아드님",
	  "아들",
	  "아쉬움",
	  "아스팔트",
	  "아시아",
	  "아울러",
	  "아저씨",
	  "아줌마",
	  "아직",
	  "아침",
	  "아파트",
	  "아프리카",
	  "아픔",
	  "아홉",
	  "아흔",
	  "악기",
	  "악몽",
	  "악수",
	  "안개",
	  "안경",
	  "안과",
	  "안내",
	  "안녕",
	  "안동",
	  "안방",
	  "안부",
	  "안주",
	  "알루미늄",
	  "알코올",
	  "암시",
	  "암컷",
	  "압력",
	  "앞날",
	  "앞문",
	  "애인",
	  "애정",
	  "액수",
	  "앨범",
	  "야간",
	  "야단",
	  "야옹",
	  "약간",
	  "약국",
	  "약속",
	  "약수",
	  "약점",
	  "약품",
	  "약혼녀",
	  "양념",
	  "양력",
	  "양말",
	  "양배추",
	  "양주",
	  "양파",
	  "어둠",
	  "어려움",
	  "어른",
	  "어젯밤",
	  "어쨌든",
	  "어쩌다가",
	  "어쩐지",
	  "언니",
	  "언덕",
	  "언론",
	  "언어",
	  "얼굴",
	  "얼른",
	  "얼음",
	  "얼핏",
	  "엄마",
	  "업무",
	  "업종",
	  "업체",
	  "엉덩이",
	  "엉망",
	  "엉터리",
	  "엊그제",
	  "에너지",
	  "에어컨",
	  "엔진",
	  "여건",
	  "여고생",
	  "여관",
	  "여군",
	  "여권",
	  "여대생",
	  "여덟",
	  "여동생",
	  "여든",
	  "여론",
	  "여름",
	  "여섯",
	  "여성",
	  "여왕",
	  "여인",
	  "여전히",
	  "여직원",
	  "여학생",
	  "여행",
	  "역사",
	  "역시",
	  "역할",
	  "연결",
	  "연구",
	  "연극",
	  "연기",
	  "연락",
	  "연설",
	  "연세",
	  "연속",
	  "연습",
	  "연애",
	  "연예인",
	  "연인",
	  "연장",
	  "연주",
	  "연출",
	  "연필",
	  "연합",
	  "연휴",
	  "열기",
	  "열매",
	  "열쇠",
	  "열심히",
	  "열정",
	  "열차",
	  "열흘",
	  "염려",
	  "엽서",
	  "영국",
	  "영남",
	  "영상",
	  "영양",
	  "영역",
	  "영웅",
	  "영원히",
	  "영하",
	  "영향",
	  "영혼",
	  "영화",
	  "옆구리",
	  "옆방",
	  "옆집",
	  "예감",
	  "예금",
	  "예방",
	  "예산",
	  "예상",
	  "예선",
	  "예술",
	  "예습",
	  "예식장",
	  "예약",
	  "예전",
	  "예절",
	  "예정",
	  "예컨대",
	  "옛날",
	  "오늘",
	  "오락",
	  "오랫동안",
	  "오렌지",
	  "오로지",
	  "오른발",
	  "오븐",
	  "오십",
	  "오염",
	  "오월",
	  "오전",
	  "오직",
	  "오징어",
	  "오페라",
	  "오피스텔",
	  "오히려",
	  "옥상",
	  "옥수수",
	  "온갖",
	  "온라인",
	  "온몸",
	  "온종일",
	  "온통",
	  "올가을",
	  "올림픽",
	  "올해",
	  "옷차림",
	  "와이셔츠",
	  "와인",
	  "완성",
	  "완전",
	  "왕비",
	  "왕자",
	  "왜냐하면",
	  "왠지",
	  "외갓집",
	  "외국",
	  "외로움",
	  "외삼촌",
	  "외출",
	  "외침",
	  "외할머니",
	  "왼발",
	  "왼손",
	  "왼쪽",
	  "요금",
	  "요일",
	  "요즘",
	  "요청",
	  "용기",
	  "용서",
	  "용어",
	  "우산",
	  "우선",
	  "우승",
	  "우연히",
	  "우정",
	  "우체국",
	  "우편",
	  "운동",
	  "운명",
	  "운반",
	  "운전",
	  "운행",
	  "울산",
	  "울음",
	  "움직임",
	  "웃어른",
	  "웃음",
	  "워낙",
	  "원고",
	  "원래",
	  "원서",
	  "원숭이",
	  "원인",
	  "원장",
	  "원피스",
	  "월급",
	  "월드컵",
	  "월세",
	  "월요일",
	  "웨이터",
	  "위반",
	  "위법",
	  "위성",
	  "위원",
	  "위험",
	  "위협",
	  "윗사람",
	  "유난히",
	  "유럽",
	  "유명",
	  "유물",
	  "유산",
	  "유적",
	  "유치원",
	  "유학",
	  "유행",
	  "유형",
	  "육군",
	  "육상",
	  "육십",
	  "육체",
	  "은행",
	  "음력",
	  "음료",
	  "음반",
	  "음성",
	  "음식",
	  "음악",
	  "음주",
	  "의견",
	  "의논",
	  "의문",
	  "의복",
	  "의식",
	  "의심",
	  "의외로",
	  "의욕",
	  "의원",
	  "의학",
	  "이것",
	  "이곳",
	  "이념",
	  "이놈",
	  "이달",
	  "이대로",
	  "이동",
	  "이렇게",
	  "이력서",
	  "이론적",
	  "이름",
	  "이민",
	  "이발소",
	  "이별",
	  "이불",
	  "이빨",
	  "이상",
	  "이성",
	  "이슬",
	  "이야기",
	  "이용",
	  "이웃",
	  "이월",
	  "이윽고",
	  "이익",
	  "이전",
	  "이중",
	  "이튿날",
	  "이틀",
	  "이혼",
	  "인간",
	  "인격",
	  "인공",
	  "인구",
	  "인근",
	  "인기",
	  "인도",
	  "인류",
	  "인물",
	  "인생",
	  "인쇄",
	  "인연",
	  "인원",
	  "인재",
	  "인종",
	  "인천",
	  "인체",
	  "인터넷",
	  "인하",
	  "인형",
	  "일곱",
	  "일기",
	  "일단",
	  "일대",
	  "일등",
	  "일반",
	  "일본",
	  "일부",
	  "일상",
	  "일생",
	  "일손",
	  "일요일",
	  "일월",
	  "일정",
	  "일종",
	  "일주일",
	  "일찍",
	  "일체",
	  "일치",
	  "일행",
	  "일회용",
	  "임금",
	  "임무",
	  "입대",
	  "입력",
	  "입맛",
	  "입사",
	  "입술",
	  "입시",
	  "입원",
	  "입장",
	  "입학",
	  "자가용",
	  "자격",
	  "자극",
	  "자동",
	  "자랑",
	  "자부심",
	  "자식",
	  "자신",
	  "자연",
	  "자원",
	  "자율",
	  "자전거",
	  "자정",
	  "자존심",
	  "자판",
	  "작가",
	  "작년",
	  "작성",
	  "작업",
	  "작용",
	  "작은딸",
	  "작품",
	  "잔디",
	  "잔뜩",
	  "잔치",
	  "잘못",
	  "잠깐",
	  "잠수함",
	  "잠시",
	  "잠옷",
	  "잠자리",
	  "잡지",
	  "장관",
	  "장군",
	  "장기간",
	  "장래",
	  "장례",
	  "장르",
	  "장마",
	  "장면",
	  "장모",
	  "장미",
	  "장비",
	  "장사",
	  "장소",
	  "장식",
	  "장애인",
	  "장인",
	  "장점",
	  "장차",
	  "장학금",
	  "재능",
	  "재빨리",
	  "재산",
	  "재생",
	  "재작년",
	  "재정",
	  "재채기",
	  "재판",
	  "재학",
	  "재활용",
	  "저것",
	  "저고리",
	  "저곳",
	  "저녁",
	  "저런",
	  "저렇게",
	  "저번",
	  "저울",
	  "저절로",
	  "저축",
	  "적극",
	  "적당히",
	  "적성",
	  "적용",
	  "적응",
	  "전개",
	  "전공",
	  "전기",
	  "전달",
	  "전라도",
	  "전망",
	  "전문",
	  "전반",
	  "전부",
	  "전세",
	  "전시",
	  "전용",
	  "전자",
	  "전쟁",
	  "전주",
	  "전철",
	  "전체",
	  "전통",
	  "전혀",
	  "전후",
	  "절대",
	  "절망",
	  "절반",
	  "절약",
	  "절차",
	  "점검",
	  "점수",
	  "점심",
	  "점원",
	  "점점",
	  "점차",
	  "접근",
	  "접시",
	  "접촉",
	  "젓가락",
	  "정거장",
	  "정도",
	  "정류장",
	  "정리",
	  "정말",
	  "정면",
	  "정문",
	  "정반대",
	  "정보",
	  "정부",
	  "정비",
	  "정상",
	  "정성",
	  "정오",
	  "정원",
	  "정장",
	  "정지",
	  "정치",
	  "정확히",
	  "제공",
	  "제과점",
	  "제대로",
	  "제목",
	  "제발",
	  "제법",
	  "제삿날",
	  "제안",
	  "제일",
	  "제작",
	  "제주도",
	  "제출",
	  "제품",
	  "제한",
	  "조각",
	  "조건",
	  "조금",
	  "조깅",
	  "조명",
	  "조미료",
	  "조상",
	  "조선",
	  "조용히",
	  "조절",
	  "조정",
	  "조직",
	  "존댓말",
	  "존재",
	  "졸업",
	  "졸음",
	  "종교",
	  "종로",
	  "종류",
	  "종소리",
	  "종업원",
	  "종종",
	  "종합",
	  "좌석",
	  "죄인",
	  "주관적",
	  "주름",
	  "주말",
	  "주머니",
	  "주먹",
	  "주문",
	  "주민",
	  "주방",
	  "주변",
	  "주식",
	  "주인",
	  "주일",
	  "주장",
	  "주전자",
	  "주택",
	  "준비",
	  "줄거리",
	  "줄기",
	  "줄무늬",
	  "중간",
	  "중계방송",
	  "중국",
	  "중년",
	  "중단",
	  "중독",
	  "중반",
	  "중부",
	  "중세",
	  "중소기업",
	  "중순",
	  "중앙",
	  "중요",
	  "중학교",
	  "즉석",
	  "즉시",
	  "즐거움",
	  "증가",
	  "증거",
	  "증권",
	  "증상",
	  "증세",
	  "지각",
	  "지갑",
	  "지경",
	  "지극히",
	  "지금",
	  "지급",
	  "지능",
	  "지름길",
	  "지리산",
	  "지방",
	  "지붕",
	  "지식",
	  "지역",
	  "지우개",
	  "지원",
	  "지적",
	  "지점",
	  "지진",
	  "지출",
	  "직선",
	  "직업",
	  "직원",
	  "직장",
	  "진급",
	  "진동",
	  "진로",
	  "진료",
	  "진리",
	  "진짜",
	  "진찰",
	  "진출",
	  "진통",
	  "진행",
	  "질문",
	  "질병",
	  "질서",
	  "짐작",
	  "집단",
	  "집안",
	  "집중",
	  "짜증",
	  "찌꺼기",
	  "차남",
	  "차라리",
	  "차량",
	  "차림",
	  "차별",
	  "차선",
	  "차츰",
	  "착각",
	  "찬물",
	  "찬성",
	  "참가",
	  "참기름",
	  "참새",
	  "참석",
	  "참여",
	  "참외",
	  "참조",
	  "찻잔",
	  "창가",
	  "창고",
	  "창구",
	  "창문",
	  "창밖",
	  "창작",
	  "창조",
	  "채널",
	  "채점",
	  "책가방",
	  "책방",
	  "책상",
	  "책임",
	  "챔피언",
	  "처벌",
	  "처음",
	  "천국",
	  "천둥",
	  "천장",
	  "천재",
	  "천천히",
	  "철도",
	  "철저히",
	  "철학",
	  "첫날",
	  "첫째",
	  "청년",
	  "청바지",
	  "청소",
	  "청춘",
	  "체계",
	  "체력",
	  "체온",
	  "체육",
	  "체중",
	  "체험",
	  "초등학생",
	  "초반",
	  "초밥",
	  "초상화",
	  "초순",
	  "초여름",
	  "초원",
	  "초저녁",
	  "초점",
	  "초청",
	  "초콜릿",
	  "촛불",
	  "총각",
	  "총리",
	  "총장",
	  "촬영",
	  "최근",
	  "최상",
	  "최선",
	  "최신",
	  "최악",
	  "최종",
	  "추석",
	  "추억",
	  "추진",
	  "추천",
	  "추측",
	  "축구",
	  "축소",
	  "축제",
	  "축하",
	  "출근",
	  "출발",
	  "출산",
	  "출신",
	  "출연",
	  "출입",
	  "출장",
	  "출판",
	  "충격",
	  "충고",
	  "충돌",
	  "충분히",
	  "충청도",
	  "취업",
	  "취직",
	  "취향",
	  "치약",
	  "친구",
	  "친척",
	  "칠십",
	  "칠월",
	  "칠판",
	  "침대",
	  "침묵",
	  "침실",
	  "칫솔",
	  "칭찬",
	  "카메라",
	  "카운터",
	  "칼국수",
	  "캐릭터",
	  "캠퍼스",
	  "캠페인",
	  "커튼",
	  "컨디션",
	  "컬러",
	  "컴퓨터",
	  "코끼리",
	  "코미디",
	  "콘서트",
	  "콜라",
	  "콤플렉스",
	  "콩나물",
	  "쾌감",
	  "쿠데타",
	  "크림",
	  "큰길",
	  "큰딸",
	  "큰소리",
	  "큰아들",
	  "큰어머니",
	  "큰일",
	  "큰절",
	  "클래식",
	  "클럽",
	  "킬로",
	  "타입",
	  "타자기",
	  "탁구",
	  "탁자",
	  "탄생",
	  "태권도",
	  "태양",
	  "태풍",
	  "택시",
	  "탤런트",
	  "터널",
	  "터미널",
	  "테니스",
	  "테스트",
	  "테이블",
	  "텔레비전",
	  "토론",
	  "토마토",
	  "토요일",
	  "통계",
	  "통과",
	  "통로",
	  "통신",
	  "통역",
	  "통일",
	  "통장",
	  "통제",
	  "통증",
	  "통합",
	  "통화",
	  "퇴근",
	  "퇴원",
	  "퇴직금",
	  "튀김",
	  "트럭",
	  "특급",
	  "특별",
	  "특성",
	  "특수",
	  "특징",
	  "특히",
	  "튼튼히",
	  "티셔츠",
	  "파란색",
	  "파일",
	  "파출소",
	  "판결",
	  "판단",
	  "판매",
	  "판사",
	  "팔십",
	  "팔월",
	  "팝송",
	  "패션",
	  "팩스",
	  "팩시밀리",
	  "팬티",
	  "퍼센트",
	  "페인트",
	  "편견",
	  "편의",
	  "편지",
	  "편히",
	  "평가",
	  "평균",
	  "평생",
	  "평소",
	  "평양",
	  "평일",
	  "평화",
	  "포스터",
	  "포인트",
	  "포장",
	  "포함",
	  "표면",
	  "표정",
	  "표준",
	  "표현",
	  "품목",
	  "품질",
	  "풍경",
	  "풍속",
	  "풍습",
	  "프랑스",
	  "프린터",
	  "플라스틱",
	  "피곤",
	  "피망",
	  "피아노",
	  "필름",
	  "필수",
	  "필요",
	  "필자",
	  "필통",
	  "핑계",
	  "하느님",
	  "하늘",
	  "하드웨어",
	  "하룻밤",
	  "하반기",
	  "하숙집",
	  "하순",
	  "하여튼",
	  "하지만",
	  "하천",
	  "하품",
	  "하필",
	  "학과",
	  "학교",
	  "학급",
	  "학기",
	  "학년",
	  "학력",
	  "학번",
	  "학부모",
	  "학비",
	  "학생",
	  "학술",
	  "학습",
	  "학용품",
	  "학원",
	  "학위",
	  "학자",
	  "학점",
	  "한계",
	  "한글",
	  "한꺼번에",
	  "한낮",
	  "한눈",
	  "한동안",
	  "한때",
	  "한라산",
	  "한마디",
	  "한문",
	  "한번",
	  "한복",
	  "한식",
	  "한여름",
	  "한쪽",
	  "할머니",
	  "할아버지",
	  "할인",
	  "함께",
	  "함부로",
	  "합격",
	  "합리적",
	  "항공",
	  "항구",
	  "항상",
	  "항의",
	  "해결",
	  "해군",
	  "해답",
	  "해당",
	  "해물",
	  "해석",
	  "해설",
	  "해수욕장",
	  "해안",
	  "핵심",
	  "핸드백",
	  "햄버거",
	  "햇볕",
	  "햇살",
	  "행동",
	  "행복",
	  "행사",
	  "행운",
	  "행위",
	  "향기",
	  "향상",
	  "향수",
	  "허락",
	  "허용",
	  "헬기",
	  "현관",
	  "현금",
	  "현대",
	  "현상",
	  "현실",
	  "현장",
	  "현재",
	  "현지",
	  "혈액",
	  "협력",
	  "형부",
	  "형사",
	  "형수",
	  "형식",
	  "형제",
	  "형태",
	  "형편",
	  "혜택",
	  "호기심",
	  "호남",
	  "호랑이",
	  "호박",
	  "호텔",
	  "호흡",
	  "혹시",
	  "홀로",
	  "홈페이지",
	  "홍보",
	  "홍수",
	  "홍차",
	  "화면",
	  "화분",
	  "화살",
	  "화요일",
	  "화장",
	  "화학",
	  "확보",
	  "확인",
	  "확장",
	  "확정",
	  "환갑",
	  "환경",
	  "환영",
	  "환율",
	  "환자",
	  "활기",
	  "활동",
	  "활발히",
	  "활용",
	  "활짝",
	  "회견",
	  "회관",
	  "회복",
	  "회색",
	  "회원",
	  "회장",
	  "회전",
	  "횟수",
	  "횡단보도",
	  "효율적",
	  "후반",
	  "후춧가루",
	  "훈련",
	  "훨씬",
	  "휴식",
	  "휴일",
	  "흉내",
	  "흐름",
	  "흑백",
	  "흑인",
	  "흔적",
	  "흔히",
	  "흥미",
	  "흥분",
	  "희곡",
	  "희망",
	  "희생",
	  "흰색",
	  "힘껏"
	]
	;

	var korean$1 = /*#__PURE__*/Object.freeze({
		default: korean
	});

	var spanish = [
	  "ábaco",
	  "abdomen",
	  "abeja",
	  "abierto",
	  "abogado",
	  "abono",
	  "aborto",
	  "abrazo",
	  "abrir",
	  "abuelo",
	  "abuso",
	  "acabar",
	  "academia",
	  "acceso",
	  "acción",
	  "aceite",
	  "acelga",
	  "acento",
	  "aceptar",
	  "ácido",
	  "aclarar",
	  "acné",
	  "acoger",
	  "acoso",
	  "activo",
	  "acto",
	  "actriz",
	  "actuar",
	  "acudir",
	  "acuerdo",
	  "acusar",
	  "adicto",
	  "admitir",
	  "adoptar",
	  "adorno",
	  "aduana",
	  "adulto",
	  "aéreo",
	  "afectar",
	  "afición",
	  "afinar",
	  "afirmar",
	  "ágil",
	  "agitar",
	  "agonía",
	  "agosto",
	  "agotar",
	  "agregar",
	  "agrio",
	  "agua",
	  "agudo",
	  "águila",
	  "aguja",
	  "ahogo",
	  "ahorro",
	  "aire",
	  "aislar",
	  "ajedrez",
	  "ajeno",
	  "ajuste",
	  "alacrán",
	  "alambre",
	  "alarma",
	  "alba",
	  "álbum",
	  "alcalde",
	  "aldea",
	  "alegre",
	  "alejar",
	  "alerta",
	  "aleta",
	  "alfiler",
	  "alga",
	  "algodón",
	  "aliado",
	  "aliento",
	  "alivio",
	  "alma",
	  "almeja",
	  "almíbar",
	  "altar",
	  "alteza",
	  "altivo",
	  "alto",
	  "altura",
	  "alumno",
	  "alzar",
	  "amable",
	  "amante",
	  "amapola",
	  "amargo",
	  "amasar",
	  "ámbar",
	  "ámbito",
	  "ameno",
	  "amigo",
	  "amistad",
	  "amor",
	  "amparo",
	  "amplio",
	  "ancho",
	  "anciano",
	  "ancla",
	  "andar",
	  "andén",
	  "anemia",
	  "ángulo",
	  "anillo",
	  "ánimo",
	  "anís",
	  "anotar",
	  "antena",
	  "antiguo",
	  "antojo",
	  "anual",
	  "anular",
	  "anuncio",
	  "añadir",
	  "añejo",
	  "año",
	  "apagar",
	  "aparato",
	  "apetito",
	  "apio",
	  "aplicar",
	  "apodo",
	  "aporte",
	  "apoyo",
	  "aprender",
	  "aprobar",
	  "apuesta",
	  "apuro",
	  "arado",
	  "araña",
	  "arar",
	  "árbitro",
	  "árbol",
	  "arbusto",
	  "archivo",
	  "arco",
	  "arder",
	  "ardilla",
	  "arduo",
	  "área",
	  "árido",
	  "aries",
	  "armonía",
	  "arnés",
	  "aroma",
	  "arpa",
	  "arpón",
	  "arreglo",
	  "arroz",
	  "arruga",
	  "arte",
	  "artista",
	  "asa",
	  "asado",
	  "asalto",
	  "ascenso",
	  "asegurar",
	  "aseo",
	  "asesor",
	  "asiento",
	  "asilo",
	  "asistir",
	  "asno",
	  "asombro",
	  "áspero",
	  "astilla",
	  "astro",
	  "astuto",
	  "asumir",
	  "asunto",
	  "atajo",
	  "ataque",
	  "atar",
	  "atento",
	  "ateo",
	  "ático",
	  "atleta",
	  "átomo",
	  "atraer",
	  "atroz",
	  "atún",
	  "audaz",
	  "audio",
	  "auge",
	  "aula",
	  "aumento",
	  "ausente",
	  "autor",
	  "aval",
	  "avance",
	  "avaro",
	  "ave",
	  "avellana",
	  "avena",
	  "avestruz",
	  "avión",
	  "aviso",
	  "ayer",
	  "ayuda",
	  "ayuno",
	  "azafrán",
	  "azar",
	  "azote",
	  "azúcar",
	  "azufre",
	  "azul",
	  "baba",
	  "babor",
	  "bache",
	  "bahía",
	  "baile",
	  "bajar",
	  "balanza",
	  "balcón",
	  "balde",
	  "bambú",
	  "banco",
	  "banda",
	  "baño",
	  "barba",
	  "barco",
	  "barniz",
	  "barro",
	  "báscula",
	  "bastón",
	  "basura",
	  "batalla",
	  "batería",
	  "batir",
	  "batuta",
	  "baúl",
	  "bazar",
	  "bebé",
	  "bebida",
	  "bello",
	  "besar",
	  "beso",
	  "bestia",
	  "bicho",
	  "bien",
	  "bingo",
	  "blanco",
	  "bloque",
	  "blusa",
	  "boa",
	  "bobina",
	  "bobo",
	  "boca",
	  "bocina",
	  "boda",
	  "bodega",
	  "boina",
	  "bola",
	  "bolero",
	  "bolsa",
	  "bomba",
	  "bondad",
	  "bonito",
	  "bono",
	  "bonsái",
	  "borde",
	  "borrar",
	  "bosque",
	  "bote",
	  "botín",
	  "bóveda",
	  "bozal",
	  "bravo",
	  "brazo",
	  "brecha",
	  "breve",
	  "brillo",
	  "brinco",
	  "brisa",
	  "broca",
	  "broma",
	  "bronce",
	  "brote",
	  "bruja",
	  "brusco",
	  "bruto",
	  "buceo",
	  "bucle",
	  "bueno",
	  "buey",
	  "bufanda",
	  "bufón",
	  "búho",
	  "buitre",
	  "bulto",
	  "burbuja",
	  "burla",
	  "burro",
	  "buscar",
	  "butaca",
	  "buzón",
	  "caballo",
	  "cabeza",
	  "cabina",
	  "cabra",
	  "cacao",
	  "cadáver",
	  "cadena",
	  "caer",
	  "café",
	  "caída",
	  "caimán",
	  "caja",
	  "cajón",
	  "cal",
	  "calamar",
	  "calcio",
	  "caldo",
	  "calidad",
	  "calle",
	  "calma",
	  "calor",
	  "calvo",
	  "cama",
	  "cambio",
	  "camello",
	  "camino",
	  "campo",
	  "cáncer",
	  "candil",
	  "canela",
	  "canguro",
	  "canica",
	  "canto",
	  "caña",
	  "cañón",
	  "caoba",
	  "caos",
	  "capaz",
	  "capitán",
	  "capote",
	  "captar",
	  "capucha",
	  "cara",
	  "carbón",
	  "cárcel",
	  "careta",
	  "carga",
	  "cariño",
	  "carne",
	  "carpeta",
	  "carro",
	  "carta",
	  "casa",
	  "casco",
	  "casero",
	  "caspa",
	  "castor",
	  "catorce",
	  "catre",
	  "caudal",
	  "causa",
	  "cazo",
	  "cebolla",
	  "ceder",
	  "cedro",
	  "celda",
	  "célebre",
	  "celoso",
	  "célula",
	  "cemento",
	  "ceniza",
	  "centro",
	  "cerca",
	  "cerdo",
	  "cereza",
	  "cero",
	  "cerrar",
	  "certeza",
	  "césped",
	  "cetro",
	  "chacal",
	  "chaleco",
	  "champú",
	  "chancla",
	  "chapa",
	  "charla",
	  "chico",
	  "chiste",
	  "chivo",
	  "choque",
	  "choza",
	  "chuleta",
	  "chupar",
	  "ciclón",
	  "ciego",
	  "cielo",
	  "cien",
	  "cierto",
	  "cifra",
	  "cigarro",
	  "cima",
	  "cinco",
	  "cine",
	  "cinta",
	  "ciprés",
	  "circo",
	  "ciruela",
	  "cisne",
	  "cita",
	  "ciudad",
	  "clamor",
	  "clan",
	  "claro",
	  "clase",
	  "clave",
	  "cliente",
	  "clima",
	  "clínica",
	  "cobre",
	  "cocción",
	  "cochino",
	  "cocina",
	  "coco",
	  "código",
	  "codo",
	  "cofre",
	  "coger",
	  "cohete",
	  "cojín",
	  "cojo",
	  "cola",
	  "colcha",
	  "colegio",
	  "colgar",
	  "colina",
	  "collar",
	  "colmo",
	  "columna",
	  "combate",
	  "comer",
	  "comida",
	  "cómodo",
	  "compra",
	  "conde",
	  "conejo",
	  "conga",
	  "conocer",
	  "consejo",
	  "contar",
	  "copa",
	  "copia",
	  "corazón",
	  "corbata",
	  "corcho",
	  "cordón",
	  "corona",
	  "correr",
	  "coser",
	  "cosmos",
	  "costa",
	  "cráneo",
	  "cráter",
	  "crear",
	  "crecer",
	  "creído",
	  "crema",
	  "cría",
	  "crimen",
	  "cripta",
	  "crisis",
	  "cromo",
	  "crónica",
	  "croqueta",
	  "crudo",
	  "cruz",
	  "cuadro",
	  "cuarto",
	  "cuatro",
	  "cubo",
	  "cubrir",
	  "cuchara",
	  "cuello",
	  "cuento",
	  "cuerda",
	  "cuesta",
	  "cueva",
	  "cuidar",
	  "culebra",
	  "culpa",
	  "culto",
	  "cumbre",
	  "cumplir",
	  "cuna",
	  "cuneta",
	  "cuota",
	  "cupón",
	  "cúpula",
	  "curar",
	  "curioso",
	  "curso",
	  "curva",
	  "cutis",
	  "dama",
	  "danza",
	  "dar",
	  "dardo",
	  "dátil",
	  "deber",
	  "débil",
	  "década",
	  "decir",
	  "dedo",
	  "defensa",
	  "definir",
	  "dejar",
	  "delfín",
	  "delgado",
	  "delito",
	  "demora",
	  "denso",
	  "dental",
	  "deporte",
	  "derecho",
	  "derrota",
	  "desayuno",
	  "deseo",
	  "desfile",
	  "desnudo",
	  "destino",
	  "desvío",
	  "detalle",
	  "detener",
	  "deuda",
	  "día",
	  "diablo",
	  "diadema",
	  "diamante",
	  "diana",
	  "diario",
	  "dibujo",
	  "dictar",
	  "diente",
	  "dieta",
	  "diez",
	  "difícil",
	  "digno",
	  "dilema",
	  "diluir",
	  "dinero",
	  "directo",
	  "dirigir",
	  "disco",
	  "diseño",
	  "disfraz",
	  "diva",
	  "divino",
	  "doble",
	  "doce",
	  "dolor",
	  "domingo",
	  "don",
	  "donar",
	  "dorado",
	  "dormir",
	  "dorso",
	  "dos",
	  "dosis",
	  "dragón",
	  "droga",
	  "ducha",
	  "duda",
	  "duelo",
	  "dueño",
	  "dulce",
	  "dúo",
	  "duque",
	  "durar",
	  "dureza",
	  "duro",
	  "ébano",
	  "ebrio",
	  "echar",
	  "eco",
	  "ecuador",
	  "edad",
	  "edición",
	  "edificio",
	  "editor",
	  "educar",
	  "efecto",
	  "eficaz",
	  "eje",
	  "ejemplo",
	  "elefante",
	  "elegir",
	  "elemento",
	  "elevar",
	  "elipse",
	  "élite",
	  "elixir",
	  "elogio",
	  "eludir",
	  "embudo",
	  "emitir",
	  "emoción",
	  "empate",
	  "empeño",
	  "empleo",
	  "empresa",
	  "enano",
	  "encargo",
	  "enchufe",
	  "encía",
	  "enemigo",
	  "enero",
	  "enfado",
	  "enfermo",
	  "engaño",
	  "enigma",
	  "enlace",
	  "enorme",
	  "enredo",
	  "ensayo",
	  "enseñar",
	  "entero",
	  "entrar",
	  "envase",
	  "envío",
	  "época",
	  "equipo",
	  "erizo",
	  "escala",
	  "escena",
	  "escolar",
	  "escribir",
	  "escudo",
	  "esencia",
	  "esfera",
	  "esfuerzo",
	  "espada",
	  "espejo",
	  "espía",
	  "esposa",
	  "espuma",
	  "esquí",
	  "estar",
	  "este",
	  "estilo",
	  "estufa",
	  "etapa",
	  "eterno",
	  "ética",
	  "etnia",
	  "evadir",
	  "evaluar",
	  "evento",
	  "evitar",
	  "exacto",
	  "examen",
	  "exceso",
	  "excusa",
	  "exento",
	  "exigir",
	  "exilio",
	  "existir",
	  "éxito",
	  "experto",
	  "explicar",
	  "exponer",
	  "extremo",
	  "fábrica",
	  "fábula",
	  "fachada",
	  "fácil",
	  "factor",
	  "faena",
	  "faja",
	  "falda",
	  "fallo",
	  "falso",
	  "faltar",
	  "fama",
	  "familia",
	  "famoso",
	  "faraón",
	  "farmacia",
	  "farol",
	  "farsa",
	  "fase",
	  "fatiga",
	  "fauna",
	  "favor",
	  "fax",
	  "febrero",
	  "fecha",
	  "feliz",
	  "feo",
	  "feria",
	  "feroz",
	  "fértil",
	  "fervor",
	  "festín",
	  "fiable",
	  "fianza",
	  "fiar",
	  "fibra",
	  "ficción",
	  "ficha",
	  "fideo",
	  "fiebre",
	  "fiel",
	  "fiera",
	  "fiesta",
	  "figura",
	  "fijar",
	  "fijo",
	  "fila",
	  "filete",
	  "filial",
	  "filtro",
	  "fin",
	  "finca",
	  "fingir",
	  "finito",
	  "firma",
	  "flaco",
	  "flauta",
	  "flecha",
	  "flor",
	  "flota",
	  "fluir",
	  "flujo",
	  "flúor",
	  "fobia",
	  "foca",
	  "fogata",
	  "fogón",
	  "folio",
	  "folleto",
	  "fondo",
	  "forma",
	  "forro",
	  "fortuna",
	  "forzar",
	  "fosa",
	  "foto",
	  "fracaso",
	  "frágil",
	  "franja",
	  "frase",
	  "fraude",
	  "freír",
	  "freno",
	  "fresa",
	  "frío",
	  "frito",
	  "fruta",
	  "fuego",
	  "fuente",
	  "fuerza",
	  "fuga",
	  "fumar",
	  "función",
	  "funda",
	  "furgón",
	  "furia",
	  "fusil",
	  "fútbol",
	  "futuro",
	  "gacela",
	  "gafas",
	  "gaita",
	  "gajo",
	  "gala",
	  "galería",
	  "gallo",
	  "gamba",
	  "ganar",
	  "gancho",
	  "ganga",
	  "ganso",
	  "garaje",
	  "garza",
	  "gasolina",
	  "gastar",
	  "gato",
	  "gavilán",
	  "gemelo",
	  "gemir",
	  "gen",
	  "género",
	  "genio",
	  "gente",
	  "geranio",
	  "gerente",
	  "germen",
	  "gesto",
	  "gigante",
	  "gimnasio",
	  "girar",
	  "giro",
	  "glaciar",
	  "globo",
	  "gloria",
	  "gol",
	  "golfo",
	  "goloso",
	  "golpe",
	  "goma",
	  "gordo",
	  "gorila",
	  "gorra",
	  "gota",
	  "goteo",
	  "gozar",
	  "grada",
	  "gráfico",
	  "grano",
	  "grasa",
	  "gratis",
	  "grave",
	  "grieta",
	  "grillo",
	  "gripe",
	  "gris",
	  "grito",
	  "grosor",
	  "grúa",
	  "grueso",
	  "grumo",
	  "grupo",
	  "guante",
	  "guapo",
	  "guardia",
	  "guerra",
	  "guía",
	  "guiño",
	  "guion",
	  "guiso",
	  "guitarra",
	  "gusano",
	  "gustar",
	  "haber",
	  "hábil",
	  "hablar",
	  "hacer",
	  "hacha",
	  "hada",
	  "hallar",
	  "hamaca",
	  "harina",
	  "haz",
	  "hazaña",
	  "hebilla",
	  "hebra",
	  "hecho",
	  "helado",
	  "helio",
	  "hembra",
	  "herir",
	  "hermano",
	  "héroe",
	  "hervir",
	  "hielo",
	  "hierro",
	  "hígado",
	  "higiene",
	  "hijo",
	  "himno",
	  "historia",
	  "hocico",
	  "hogar",
	  "hoguera",
	  "hoja",
	  "hombre",
	  "hongo",
	  "honor",
	  "honra",
	  "hora",
	  "hormiga",
	  "horno",
	  "hostil",
	  "hoyo",
	  "hueco",
	  "huelga",
	  "huerta",
	  "hueso",
	  "huevo",
	  "huida",
	  "huir",
	  "humano",
	  "húmedo",
	  "humilde",
	  "humo",
	  "hundir",
	  "huracán",
	  "hurto",
	  "icono",
	  "ideal",
	  "idioma",
	  "ídolo",
	  "iglesia",
	  "iglú",
	  "igual",
	  "ilegal",
	  "ilusión",
	  "imagen",
	  "imán",
	  "imitar",
	  "impar",
	  "imperio",
	  "imponer",
	  "impulso",
	  "incapaz",
	  "índice",
	  "inerte",
	  "infiel",
	  "informe",
	  "ingenio",
	  "inicio",
	  "inmenso",
	  "inmune",
	  "innato",
	  "insecto",
	  "instante",
	  "interés",
	  "íntimo",
	  "intuir",
	  "inútil",
	  "invierno",
	  "ira",
	  "iris",
	  "ironía",
	  "isla",
	  "islote",
	  "jabalí",
	  "jabón",
	  "jamón",
	  "jarabe",
	  "jardín",
	  "jarra",
	  "jaula",
	  "jazmín",
	  "jefe",
	  "jeringa",
	  "jinete",
	  "jornada",
	  "joroba",
	  "joven",
	  "joya",
	  "juerga",
	  "jueves",
	  "juez",
	  "jugador",
	  "jugo",
	  "juguete",
	  "juicio",
	  "junco",
	  "jungla",
	  "junio",
	  "juntar",
	  "júpiter",
	  "jurar",
	  "justo",
	  "juvenil",
	  "juzgar",
	  "kilo",
	  "koala",
	  "labio",
	  "lacio",
	  "lacra",
	  "lado",
	  "ladrón",
	  "lagarto",
	  "lágrima",
	  "laguna",
	  "laico",
	  "lamer",
	  "lámina",
	  "lámpara",
	  "lana",
	  "lancha",
	  "langosta",
	  "lanza",
	  "lápiz",
	  "largo",
	  "larva",
	  "lástima",
	  "lata",
	  "látex",
	  "latir",
	  "laurel",
	  "lavar",
	  "lazo",
	  "leal",
	  "lección",
	  "leche",
	  "lector",
	  "leer",
	  "legión",
	  "legumbre",
	  "lejano",
	  "lengua",
	  "lento",
	  "leña",
	  "león",
	  "leopardo",
	  "lesión",
	  "letal",
	  "letra",
	  "leve",
	  "leyenda",
	  "libertad",
	  "libro",
	  "licor",
	  "líder",
	  "lidiar",
	  "lienzo",
	  "liga",
	  "ligero",
	  "lima",
	  "límite",
	  "limón",
	  "limpio",
	  "lince",
	  "lindo",
	  "línea",
	  "lingote",
	  "lino",
	  "linterna",
	  "líquido",
	  "liso",
	  "lista",
	  "litera",
	  "litio",
	  "litro",
	  "llaga",
	  "llama",
	  "llanto",
	  "llave",
	  "llegar",
	  "llenar",
	  "llevar",
	  "llorar",
	  "llover",
	  "lluvia",
	  "lobo",
	  "loción",
	  "loco",
	  "locura",
	  "lógica",
	  "logro",
	  "lombriz",
	  "lomo",
	  "lonja",
	  "lote",
	  "lucha",
	  "lucir",
	  "lugar",
	  "lujo",
	  "luna",
	  "lunes",
	  "lupa",
	  "lustro",
	  "luto",
	  "luz",
	  "maceta",
	  "macho",
	  "madera",
	  "madre",
	  "maduro",
	  "maestro",
	  "mafia",
	  "magia",
	  "mago",
	  "maíz",
	  "maldad",
	  "maleta",
	  "malla",
	  "malo",
	  "mamá",
	  "mambo",
	  "mamut",
	  "manco",
	  "mando",
	  "manejar",
	  "manga",
	  "maniquí",
	  "manjar",
	  "mano",
	  "manso",
	  "manta",
	  "mañana",
	  "mapa",
	  "máquina",
	  "mar",
	  "marco",
	  "marea",
	  "marfil",
	  "margen",
	  "marido",
	  "mármol",
	  "marrón",
	  "martes",
	  "marzo",
	  "masa",
	  "máscara",
	  "masivo",
	  "matar",
	  "materia",
	  "matiz",
	  "matriz",
	  "máximo",
	  "mayor",
	  "mazorca",
	  "mecha",
	  "medalla",
	  "medio",
	  "médula",
	  "mejilla",
	  "mejor",
	  "melena",
	  "melón",
	  "memoria",
	  "menor",
	  "mensaje",
	  "mente",
	  "menú",
	  "mercado",
	  "merengue",
	  "mérito",
	  "mes",
	  "mesón",
	  "meta",
	  "meter",
	  "método",
	  "metro",
	  "mezcla",
	  "miedo",
	  "miel",
	  "miembro",
	  "miga",
	  "mil",
	  "milagro",
	  "militar",
	  "millón",
	  "mimo",
	  "mina",
	  "minero",
	  "mínimo",
	  "minuto",
	  "miope",
	  "mirar",
	  "misa",
	  "miseria",
	  "misil",
	  "mismo",
	  "mitad",
	  "mito",
	  "mochila",
	  "moción",
	  "moda",
	  "modelo",
	  "moho",
	  "mojar",
	  "molde",
	  "moler",
	  "molino",
	  "momento",
	  "momia",
	  "monarca",
	  "moneda",
	  "monja",
	  "monto",
	  "moño",
	  "morada",
	  "morder",
	  "moreno",
	  "morir",
	  "morro",
	  "morsa",
	  "mortal",
	  "mosca",
	  "mostrar",
	  "motivo",
	  "mover",
	  "móvil",
	  "mozo",
	  "mucho",
	  "mudar",
	  "mueble",
	  "muela",
	  "muerte",
	  "muestra",
	  "mugre",
	  "mujer",
	  "mula",
	  "muleta",
	  "multa",
	  "mundo",
	  "muñeca",
	  "mural",
	  "muro",
	  "músculo",
	  "museo",
	  "musgo",
	  "música",
	  "muslo",
	  "nácar",
	  "nación",
	  "nadar",
	  "naipe",
	  "naranja",
	  "nariz",
	  "narrar",
	  "nasal",
	  "natal",
	  "nativo",
	  "natural",
	  "náusea",
	  "naval",
	  "nave",
	  "navidad",
	  "necio",
	  "néctar",
	  "negar",
	  "negocio",
	  "negro",
	  "neón",
	  "nervio",
	  "neto",
	  "neutro",
	  "nevar",
	  "nevera",
	  "nicho",
	  "nido",
	  "niebla",
	  "nieto",
	  "niñez",
	  "niño",
	  "nítido",
	  "nivel",
	  "nobleza",
	  "noche",
	  "nómina",
	  "noria",
	  "norma",
	  "norte",
	  "nota",
	  "noticia",
	  "novato",
	  "novela",
	  "novio",
	  "nube",
	  "nuca",
	  "núcleo",
	  "nudillo",
	  "nudo",
	  "nuera",
	  "nueve",
	  "nuez",
	  "nulo",
	  "número",
	  "nutria",
	  "oasis",
	  "obeso",
	  "obispo",
	  "objeto",
	  "obra",
	  "obrero",
	  "observar",
	  "obtener",
	  "obvio",
	  "oca",
	  "ocaso",
	  "océano",
	  "ochenta",
	  "ocho",
	  "ocio",
	  "ocre",
	  "octavo",
	  "octubre",
	  "oculto",
	  "ocupar",
	  "ocurrir",
	  "odiar",
	  "odio",
	  "odisea",
	  "oeste",
	  "ofensa",
	  "oferta",
	  "oficio",
	  "ofrecer",
	  "ogro",
	  "oído",
	  "oír",
	  "ojo",
	  "ola",
	  "oleada",
	  "olfato",
	  "olivo",
	  "olla",
	  "olmo",
	  "olor",
	  "olvido",
	  "ombligo",
	  "onda",
	  "onza",
	  "opaco",
	  "opción",
	  "ópera",
	  "opinar",
	  "oponer",
	  "optar",
	  "óptica",
	  "opuesto",
	  "oración",
	  "orador",
	  "oral",
	  "órbita",
	  "orca",
	  "orden",
	  "oreja",
	  "órgano",
	  "orgía",
	  "orgullo",
	  "oriente",
	  "origen",
	  "orilla",
	  "oro",
	  "orquesta",
	  "oruga",
	  "osadía",
	  "oscuro",
	  "osezno",
	  "oso",
	  "ostra",
	  "otoño",
	  "otro",
	  "oveja",
	  "óvulo",
	  "óxido",
	  "oxígeno",
	  "oyente",
	  "ozono",
	  "pacto",
	  "padre",
	  "paella",
	  "página",
	  "pago",
	  "país",
	  "pájaro",
	  "palabra",
	  "palco",
	  "paleta",
	  "pálido",
	  "palma",
	  "paloma",
	  "palpar",
	  "pan",
	  "panal",
	  "pánico",
	  "pantera",
	  "pañuelo",
	  "papá",
	  "papel",
	  "papilla",
	  "paquete",
	  "parar",
	  "parcela",
	  "pared",
	  "parir",
	  "paro",
	  "párpado",
	  "parque",
	  "párrafo",
	  "parte",
	  "pasar",
	  "paseo",
	  "pasión",
	  "paso",
	  "pasta",
	  "pata",
	  "patio",
	  "patria",
	  "pausa",
	  "pauta",
	  "pavo",
	  "payaso",
	  "peatón",
	  "pecado",
	  "pecera",
	  "pecho",
	  "pedal",
	  "pedir",
	  "pegar",
	  "peine",
	  "pelar",
	  "peldaño",
	  "pelea",
	  "peligro",
	  "pellejo",
	  "pelo",
	  "peluca",
	  "pena",
	  "pensar",
	  "peñón",
	  "peón",
	  "peor",
	  "pepino",
	  "pequeño",
	  "pera",
	  "percha",
	  "perder",
	  "pereza",
	  "perfil",
	  "perico",
	  "perla",
	  "permiso",
	  "perro",
	  "persona",
	  "pesa",
	  "pesca",
	  "pésimo",
	  "pestaña",
	  "pétalo",
	  "petróleo",
	  "pez",
	  "pezuña",
	  "picar",
	  "pichón",
	  "pie",
	  "piedra",
	  "pierna",
	  "pieza",
	  "pijama",
	  "pilar",
	  "piloto",
	  "pimienta",
	  "pino",
	  "pintor",
	  "pinza",
	  "piña",
	  "piojo",
	  "pipa",
	  "pirata",
	  "pisar",
	  "piscina",
	  "piso",
	  "pista",
	  "pitón",
	  "pizca",
	  "placa",
	  "plan",
	  "plata",
	  "playa",
	  "plaza",
	  "pleito",
	  "pleno",
	  "plomo",
	  "pluma",
	  "plural",
	  "pobre",
	  "poco",
	  "poder",
	  "podio",
	  "poema",
	  "poesía",
	  "poeta",
	  "polen",
	  "policía",
	  "pollo",
	  "polvo",
	  "pomada",
	  "pomelo",
	  "pomo",
	  "pompa",
	  "poner",
	  "porción",
	  "portal",
	  "posada",
	  "poseer",
	  "posible",
	  "poste",
	  "potencia",
	  "potro",
	  "pozo",
	  "prado",
	  "precoz",
	  "pregunta",
	  "premio",
	  "prensa",
	  "preso",
	  "previo",
	  "primo",
	  "príncipe",
	  "prisión",
	  "privar",
	  "proa",
	  "probar",
	  "proceso",
	  "producto",
	  "proeza",
	  "profesor",
	  "programa",
	  "prole",
	  "promesa",
	  "pronto",
	  "propio",
	  "próximo",
	  "prueba",
	  "público",
	  "puchero",
	  "pudor",
	  "pueblo",
	  "puerta",
	  "puesto",
	  "pulga",
	  "pulir",
	  "pulmón",
	  "pulpo",
	  "pulso",
	  "puma",
	  "punto",
	  "puñal",
	  "puño",
	  "pupa",
	  "pupila",
	  "puré",
	  "quedar",
	  "queja",
	  "quemar",
	  "querer",
	  "queso",
	  "quieto",
	  "química",
	  "quince",
	  "quitar",
	  "rábano",
	  "rabia",
	  "rabo",
	  "ración",
	  "radical",
	  "raíz",
	  "rama",
	  "rampa",
	  "rancho",
	  "rango",
	  "rapaz",
	  "rápido",
	  "rapto",
	  "rasgo",
	  "raspa",
	  "rato",
	  "rayo",
	  "raza",
	  "razón",
	  "reacción",
	  "realidad",
	  "rebaño",
	  "rebote",
	  "recaer",
	  "receta",
	  "rechazo",
	  "recoger",
	  "recreo",
	  "recto",
	  "recurso",
	  "red",
	  "redondo",
	  "reducir",
	  "reflejo",
	  "reforma",
	  "refrán",
	  "refugio",
	  "regalo",
	  "regir",
	  "regla",
	  "regreso",
	  "rehén",
	  "reino",
	  "reír",
	  "reja",
	  "relato",
	  "relevo",
	  "relieve",
	  "relleno",
	  "reloj",
	  "remar",
	  "remedio",
	  "remo",
	  "rencor",
	  "rendir",
	  "renta",
	  "reparto",
	  "repetir",
	  "reposo",
	  "reptil",
	  "res",
	  "rescate",
	  "resina",
	  "respeto",
	  "resto",
	  "resumen",
	  "retiro",
	  "retorno",
	  "retrato",
	  "reunir",
	  "revés",
	  "revista",
	  "rey",
	  "rezar",
	  "rico",
	  "riego",
	  "rienda",
	  "riesgo",
	  "rifa",
	  "rígido",
	  "rigor",
	  "rincón",
	  "riñón",
	  "río",
	  "riqueza",
	  "risa",
	  "ritmo",
	  "rito",
	  "rizo",
	  "roble",
	  "roce",
	  "rociar",
	  "rodar",
	  "rodeo",
	  "rodilla",
	  "roer",
	  "rojizo",
	  "rojo",
	  "romero",
	  "romper",
	  "ron",
	  "ronco",
	  "ronda",
	  "ropa",
	  "ropero",
	  "rosa",
	  "rosca",
	  "rostro",
	  "rotar",
	  "rubí",
	  "rubor",
	  "rudo",
	  "rueda",
	  "rugir",
	  "ruido",
	  "ruina",
	  "ruleta",
	  "rulo",
	  "rumbo",
	  "rumor",
	  "ruptura",
	  "ruta",
	  "rutina",
	  "sábado",
	  "saber",
	  "sabio",
	  "sable",
	  "sacar",
	  "sagaz",
	  "sagrado",
	  "sala",
	  "saldo",
	  "salero",
	  "salir",
	  "salmón",
	  "salón",
	  "salsa",
	  "salto",
	  "salud",
	  "salvar",
	  "samba",
	  "sanción",
	  "sandía",
	  "sanear",
	  "sangre",
	  "sanidad",
	  "sano",
	  "santo",
	  "sapo",
	  "saque",
	  "sardina",
	  "sartén",
	  "sastre",
	  "satán",
	  "sauna",
	  "saxofón",
	  "sección",
	  "seco",
	  "secreto",
	  "secta",
	  "sed",
	  "seguir",
	  "seis",
	  "sello",
	  "selva",
	  "semana",
	  "semilla",
	  "senda",
	  "sensor",
	  "señal",
	  "señor",
	  "separar",
	  "sepia",
	  "sequía",
	  "ser",
	  "serie",
	  "sermón",
	  "servir",
	  "sesenta",
	  "sesión",
	  "seta",
	  "setenta",
	  "severo",
	  "sexo",
	  "sexto",
	  "sidra",
	  "siesta",
	  "siete",
	  "siglo",
	  "signo",
	  "sílaba",
	  "silbar",
	  "silencio",
	  "silla",
	  "símbolo",
	  "simio",
	  "sirena",
	  "sistema",
	  "sitio",
	  "situar",
	  "sobre",
	  "socio",
	  "sodio",
	  "sol",
	  "solapa",
	  "soldado",
	  "soledad",
	  "sólido",
	  "soltar",
	  "solución",
	  "sombra",
	  "sondeo",
	  "sonido",
	  "sonoro",
	  "sonrisa",
	  "sopa",
	  "soplar",
	  "soporte",
	  "sordo",
	  "sorpresa",
	  "sorteo",
	  "sostén",
	  "sótano",
	  "suave",
	  "subir",
	  "suceso",
	  "sudor",
	  "suegra",
	  "suelo",
	  "sueño",
	  "suerte",
	  "sufrir",
	  "sujeto",
	  "sultán",
	  "sumar",
	  "superar",
	  "suplir",
	  "suponer",
	  "supremo",
	  "sur",
	  "surco",
	  "sureño",
	  "surgir",
	  "susto",
	  "sutil",
	  "tabaco",
	  "tabique",
	  "tabla",
	  "tabú",
	  "taco",
	  "tacto",
	  "tajo",
	  "talar",
	  "talco",
	  "talento",
	  "talla",
	  "talón",
	  "tamaño",
	  "tambor",
	  "tango",
	  "tanque",
	  "tapa",
	  "tapete",
	  "tapia",
	  "tapón",
	  "taquilla",
	  "tarde",
	  "tarea",
	  "tarifa",
	  "tarjeta",
	  "tarot",
	  "tarro",
	  "tarta",
	  "tatuaje",
	  "tauro",
	  "taza",
	  "tazón",
	  "teatro",
	  "techo",
	  "tecla",
	  "técnica",
	  "tejado",
	  "tejer",
	  "tejido",
	  "tela",
	  "teléfono",
	  "tema",
	  "temor",
	  "templo",
	  "tenaz",
	  "tender",
	  "tener",
	  "tenis",
	  "tenso",
	  "teoría",
	  "terapia",
	  "terco",
	  "término",
	  "ternura",
	  "terror",
	  "tesis",
	  "tesoro",
	  "testigo",
	  "tetera",
	  "texto",
	  "tez",
	  "tibio",
	  "tiburón",
	  "tiempo",
	  "tienda",
	  "tierra",
	  "tieso",
	  "tigre",
	  "tijera",
	  "tilde",
	  "timbre",
	  "tímido",
	  "timo",
	  "tinta",
	  "tío",
	  "típico",
	  "tipo",
	  "tira",
	  "tirón",
	  "titán",
	  "títere",
	  "título",
	  "tiza",
	  "toalla",
	  "tobillo",
	  "tocar",
	  "tocino",
	  "todo",
	  "toga",
	  "toldo",
	  "tomar",
	  "tono",
	  "tonto",
	  "topar",
	  "tope",
	  "toque",
	  "tórax",
	  "torero",
	  "tormenta",
	  "torneo",
	  "toro",
	  "torpedo",
	  "torre",
	  "torso",
	  "tortuga",
	  "tos",
	  "tosco",
	  "toser",
	  "tóxico",
	  "trabajo",
	  "tractor",
	  "traer",
	  "tráfico",
	  "trago",
	  "traje",
	  "tramo",
	  "trance",
	  "trato",
	  "trauma",
	  "trazar",
	  "trébol",
	  "tregua",
	  "treinta",
	  "tren",
	  "trepar",
	  "tres",
	  "tribu",
	  "trigo",
	  "tripa",
	  "triste",
	  "triunfo",
	  "trofeo",
	  "trompa",
	  "tronco",
	  "tropa",
	  "trote",
	  "trozo",
	  "truco",
	  "trueno",
	  "trufa",
	  "tubería",
	  "tubo",
	  "tuerto",
	  "tumba",
	  "tumor",
	  "túnel",
	  "túnica",
	  "turbina",
	  "turismo",
	  "turno",
	  "tutor",
	  "ubicar",
	  "úlcera",
	  "umbral",
	  "unidad",
	  "unir",
	  "universo",
	  "uno",
	  "untar",
	  "uña",
	  "urbano",
	  "urbe",
	  "urgente",
	  "urna",
	  "usar",
	  "usuario",
	  "útil",
	  "utopía",
	  "uva",
	  "vaca",
	  "vacío",
	  "vacuna",
	  "vagar",
	  "vago",
	  "vaina",
	  "vajilla",
	  "vale",
	  "válido",
	  "valle",
	  "valor",
	  "válvula",
	  "vampiro",
	  "vara",
	  "variar",
	  "varón",
	  "vaso",
	  "vecino",
	  "vector",
	  "vehículo",
	  "veinte",
	  "vejez",
	  "vela",
	  "velero",
	  "veloz",
	  "vena",
	  "vencer",
	  "venda",
	  "veneno",
	  "vengar",
	  "venir",
	  "venta",
	  "venus",
	  "ver",
	  "verano",
	  "verbo",
	  "verde",
	  "vereda",
	  "verja",
	  "verso",
	  "verter",
	  "vía",
	  "viaje",
	  "vibrar",
	  "vicio",
	  "víctima",
	  "vida",
	  "vídeo",
	  "vidrio",
	  "viejo",
	  "viernes",
	  "vigor",
	  "vil",
	  "villa",
	  "vinagre",
	  "vino",
	  "viñedo",
	  "violín",
	  "viral",
	  "virgo",
	  "virtud",
	  "visor",
	  "víspera",
	  "vista",
	  "vitamina",
	  "viudo",
	  "vivaz",
	  "vivero",
	  "vivir",
	  "vivo",
	  "volcán",
	  "volumen",
	  "volver",
	  "voraz",
	  "votar",
	  "voto",
	  "voz",
	  "vuelo",
	  "vulgar",
	  "yacer",
	  "yate",
	  "yegua",
	  "yema",
	  "yerno",
	  "yeso",
	  "yodo",
	  "yoga",
	  "yogur",
	  "zafiro",
	  "zanja",
	  "zapato",
	  "zarza",
	  "zona",
	  "zorro",
	  "zumo",
	  "zurdo"
	]
	;

	var spanish$1 = /*#__PURE__*/Object.freeze({
		default: spanish
	});

	var CHINESE_SIMPLIFIED_WORDLIST = getCjsExportFromNamespace(chinese_simplified$1)

	var CHINESE_TRADITIONAL_WORDLIST = getCjsExportFromNamespace(chinese_traditional$1)

	var ENGLISH_WORDLIST = getCjsExportFromNamespace(english$1)

	var FRENCH_WORDLIST = getCjsExportFromNamespace(french$1)

	var ITALIAN_WORDLIST = getCjsExportFromNamespace(italian$1)

	var JAPANESE_WORDLIST = getCjsExportFromNamespace(japanese$1)

	var KOREAN_WORDLIST = getCjsExportFromNamespace(korean$1)

	var SPANISH_WORDLIST = getCjsExportFromNamespace(spanish$1)

	var Buffer$3 = safeBuffer.Buffer;


	var pbkdf2$2 = pbkdf2$1.pbkdf2Sync;
	var pbkdf2Async = pbkdf2$1.pbkdf2;


	// use unorm until String.prototype.normalize gets better browser support










	var DEFAULT_WORDLIST = ENGLISH_WORDLIST;

	var INVALID_MNEMONIC = 'Invalid mnemonic';
	var INVALID_ENTROPY = 'Invalid entropy';
	var INVALID_CHECKSUM = 'Invalid mnemonic checksum';

	function lpad (str, padString, length) {
	  while (str.length < length) str = padString + str;
	  return str
	}

	function binaryToByte (bin) {
	  return parseInt(bin, 2)
	}

	function bytesToBinary (bytes) {
	  return bytes.map(function (x) {
	    return lpad(x.toString(2), '0', 8)
	  }).join('')
	}

	function deriveChecksumBits (entropyBuffer) {
	  var ENT = entropyBuffer.length * 8;
	  var CS = ENT / 32;
	  var hash = createHash('sha256').update(entropyBuffer).digest();

	  return bytesToBinary([].slice.call(hash)).slice(0, CS)
	}

	function salt (password) {
	  return 'mnemonic' + (password || '')
	}

	function mnemonicToSeed (mnemonic, password) {
	  var mnemonicBuffer = Buffer$3.from(unorm.nfkd(mnemonic), 'utf8');
	  var saltBuffer = Buffer$3.from(salt(unorm.nfkd(password)), 'utf8');

	  return pbkdf2$2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512')
	}

	function mnemonicToSeedHex (mnemonic, password) {
	  return mnemonicToSeed(mnemonic, password).toString('hex')
	}

	function mnemonicToSeedAsync (mnemonic, password) {
	  return new Promise(function (resolve, reject) {
	    try {
	      var mnemonicBuffer = Buffer$3.from(unorm.nfkd(mnemonic), 'utf8');
	      var saltBuffer = Buffer$3.from(salt(unorm.nfkd(password)), 'utf8');
	    } catch (error) {
	      return reject(error)
	    }

	    pbkdf2Async(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function (err, data) {
	      if (err) return reject(err)
	      else return resolve(data)
	    });
	  })
	}

	function mnemonicToSeedHexAsync (mnemonic, password) {
	  return mnemonicToSeedAsync(mnemonic, password)
	    .then(function (buf) { return buf.toString('hex') })
	}

	function mnemonicToEntropy (mnemonic, wordlist) {
	  wordlist = wordlist || DEFAULT_WORDLIST;

	  var words = unorm.nfkd(mnemonic).split(' ');
	  if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)

	  // convert word indices to 11 bit binary strings
	  var bits = words.map(function (word) {
	    var index = wordlist.indexOf(word);
	    if (index === -1) throw new Error(INVALID_MNEMONIC)

	    return lpad(index.toString(2), '0', 11)
	  }).join('');

	  // split the binary string into ENT/CS
	  var dividerIndex = Math.floor(bits.length / 33) * 32;
	  var entropyBits = bits.slice(0, dividerIndex);
	  var checksumBits = bits.slice(dividerIndex);

	  // calculate the checksum and compare
	  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
	  if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY)
	  if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY)
	  if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY)

	  var entropy = Buffer$3.from(entropyBytes);
	  var newChecksum = deriveChecksumBits(entropy);
	  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)

	  return entropy.toString('hex')
	}

	function entropyToMnemonic (entropy, wordlist) {
	  if (!Buffer$3.isBuffer(entropy)) entropy = Buffer$3.from(entropy, 'hex');
	  wordlist = wordlist || DEFAULT_WORDLIST;

	  // 128 <= ENT <= 256
	  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)
	  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)
	  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)

	  var entropyBits = bytesToBinary([].slice.call(entropy));
	  var checksumBits = deriveChecksumBits(entropy);

	  var bits = entropyBits + checksumBits;
	  var chunks = bits.match(/(.{1,11})/g);
	  var words = chunks.map(function (binary) {
	    var index = binaryToByte(binary);
	    return wordlist[index]
	  });

	  return wordlist === JAPANESE_WORDLIST ? words.join('\u3000') : words.join(' ')
	}

	function generateMnemonic (strength, rng, wordlist) {
	  strength = strength || 128;
	  if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY)
	  rng = rng || randombytes;

	  return entropyToMnemonic(rng(strength / 8), wordlist)
	}

	function validateMnemonic (mnemonic, wordlist) {
	  try {
	    mnemonicToEntropy(mnemonic, wordlist);
	  } catch (e) {
	    return false
	  }

	  return true
	}

	var bip39 = {
	  mnemonicToSeed: mnemonicToSeed,
	  mnemonicToSeedAsync: mnemonicToSeedAsync,
	  mnemonicToSeedHex: mnemonicToSeedHex,
	  mnemonicToSeedHexAsync: mnemonicToSeedHexAsync,
	  mnemonicToEntropy: mnemonicToEntropy,
	  entropyToMnemonic: entropyToMnemonic,
	  generateMnemonic: generateMnemonic,
	  validateMnemonic: validateMnemonic,
	  wordlists: {
	    EN: ENGLISH_WORDLIST,
	    JA: JAPANESE_WORDLIST,

	    chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,
	    chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,
	    english: ENGLISH_WORDLIST,
	    french: FRENCH_WORDLIST,
	    italian: ITALIAN_WORDLIST,
	    japanese: JAPANESE_WORDLIST,
	    korean: KOREAN_WORDLIST,
	    spanish: SPANISH_WORDLIST
	  }
	};

	// Base58 encoding/decoding
	// Originally written by Mike Hearn for BitcoinJ
	// Copyright (c) 2011 Google Inc
	// Ported to JavaScript by Stefan Thomas
	// Merged Buffer refactorings from base58-native by Stephen Pair
	// Copyright (c) 2013 BitPay Inc

	var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
	var ALPHABET_MAP = {};
	for(var i = 0; i < ALPHABET.length; i++) {
	  ALPHABET_MAP[ALPHABET.charAt(i)] = i;
	}
	var BASE = 58;

	function encode(buffer$$1) {
	  if (buffer$$1.length === 0) return ''

	  var i, j, digits = [0];
	  for (i = 0; i < buffer$$1.length; i++) {
	    for (j = 0; j < digits.length; j++) digits[j] <<= 8;

	    digits[0] += buffer$$1[i];

	    var carry = 0;
	    for (j = 0; j < digits.length; ++j) {
	      digits[j] += carry;

	      carry = (digits[j] / BASE) | 0;
	      digits[j] %= BASE;
	    }

	    while (carry) {
	      digits.push(carry % BASE);

	      carry = (carry / BASE) | 0;
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; buffer$$1[i] === 0 && i < buffer$$1.length - 1; i++) digits.push(0);

	  // convert digits to a string
	  var stringOutput = "";
	  for (var i = digits.length - 1; i >= 0; i--) {
	    stringOutput = stringOutput + ALPHABET[digits[i]];
	  }
	  return stringOutput
	}

	function decode(string) {
	  if (string.length === 0) return []

	  var i, j, bytes = [0];
	  for (i = 0; i < string.length; i++) {
	    var c = string[i];
	    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')

	    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE;
	    bytes[0] += ALPHABET_MAP[c];

	    var carry = 0;
	    for (j = 0; j < bytes.length; ++j) {
	      bytes[j] += carry;

	      carry = bytes[j] >> 8;
	      bytes[j] &= 0xff;
	    }

	    while (carry) {
	      bytes.push(carry & 0xff);

	      carry >>= 8;
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0);

	  return bytes.reverse()
	}

	var bs58 = {
	  encode: encode,
	  decode: decode
	};

	function encode$1 (payload, version) {
	  if (Array.isArray(payload) || payload instanceof Uint8Array) {
	    payload = new Buffer(payload);
	  }

	  var buf;
	  if (version != null) {
	    if (typeof version === 'number') {
	      version = new Buffer([version]);
	    }
	    buf = Buffer.concat([version, payload]);
	  } else {
	    buf = payload;
	  }

	  var checksum = sha256x2(buf).slice(0, 4);
	  var result = Buffer.concat([buf, checksum]);
	  return bs58.encode(result)
	}

	function decode$1 (base58str, version) {
	  var arr = bs58.decode(base58str);
	  var buf = new Buffer(arr);
	  var versionLength;

	  if (version == null) {
	    versionLength = 0;
	  } else {
	    if (typeof version === 'number') version = new Buffer([version]);

	    versionLength = version.length;
	    var versionCompare = buf.slice(0, versionLength);
	    if (versionCompare.toString('hex') !== version.toString('hex')) {
	      throw new Error('Invalid version')
	    }
	  }

	  var checksum = buf.slice(-4);
	  var endPos = buf.length - 4;
	  var bytes = buf.slice(0, endPos);

	  var newChecksum = sha256x2(bytes).slice(0, 4);
	  if (checksum.toString('hex') !== newChecksum.toString('hex')) {
	    throw new Error('Invalid checksum')
	  }

	  return bytes.slice(versionLength)
	}

	function isValid (base58str, version) {
	  try {
	    decode$1(base58str, version);
	  } catch (e) {
	    return false
	  }

	  return true
	}

	function createEncoder (version) {
	  return function (payload) {
	    return encode$1(payload, version)
	  }
	}

	function createDecoder (version) {
	  return function (base58str) {
	    return decode$1(base58str, version)
	  }
	}

	function createValidator (version) {
	  return function (base58str) {
	    return isValid(base58str, version)
	  }
	}

	function sha256x2 (buffer$$1) {
	  var sha = createHash('sha256').update(buffer$$1).digest();
	  return createHash('sha256').update(sha).digest()
	}

	var coinstring = {
	  encode: encode$1,
	  decode: decode$1,
	  isValid: isValid,
	  createEncoder: createEncoder,
	  createDecoder: createDecoder,
	  createValidator: createValidator
	};

	/**
	 * Module dependencies.
	 */

	var sep = path.sep || '/';

	/**
	 * Module exports.
	 */

	var fileUriToPath_1 = fileUriToPath;

	/**
	 * File URI to Path function.
	 *
	 * @param {String} uri
	 * @return {String} path
	 * @api public
	 */

	function fileUriToPath (uri) {
	  if ('string' != typeof uri ||
	      uri.length <= 7 ||
	      'file://' != uri.substring(0, 7)) {
	    throw new TypeError('must pass in a file:// URI to convert to a file path');
	  }

	  var rest = decodeURI(uri.substring(7));
	  var firstSlash = rest.indexOf('/');
	  var host = rest.substring(0, firstSlash);
	  var path$$1 = rest.substring(firstSlash + 1);

	  // 2.  Scheme Definition
	  // As a special case, <host> can be the string "localhost" or the empty
	  // string; this is interpreted as "the machine from which the URL is
	  // being interpreted".
	  if ('localhost' == host) host = '';

	  if (host) {
	    host = sep + sep + host;
	  }

	  // 3.2  Drives, drive letters, mount points, file system root
	  // Drive letters are mapped into the top of a file URI in various ways,
	  // depending on the implementation; some applications substitute
	  // vertical bar ("|") for the colon after the drive letter, yielding
	  // "file:///c|/tmp/test.txt".  In some cases, the colon is left
	  // unchanged, as in "file:///c:/tmp/test.txt".  In other cases, the
	  // colon is simply omitted, as in "file:///c/tmp/test.txt".
	  path$$1 = path$$1.replace(/^(.+)\|/, '$1:');

	  // for Windows, we need to invert the path separators from what a URI uses
	  if (sep == '\\') {
	    path$$1 = path$$1.replace(/\//g, '\\');
	  }

	  if (/^.+\:/.test(path$$1)) ; else {
	    // unix path…
	    path$$1 = sep + path$$1;
	  }

	  return host + path$$1;
	}

	var bindings_1 = createCommonjsModule(function (module, exports) {
	/**
	 * Module dependencies.
	 */

	var join = path.join,
	  dirname = path.dirname,
	  exists =
	    (fs.accessSync &&
	      function(path$$1) {
	        try {
	          fs.accessSync(path$$1);
	        } catch (e) {
	          return false;
	        }
	        return true;
	      }) ||
	    fs.existsSync ||
	    path.existsSync,
	  defaults = {
	    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',
	    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',
	    platform: process.platform,
	    arch: process.arch,
	    nodePreGyp:
	      'node-v' +
	      process.versions.modules +
	      '-' +
	      process.platform +
	      '-' +
	      process.arch,
	    version: process.versions.node,
	    bindings: 'bindings.node',
	    try: [
	      // node-gyp's linked version in the "build" dir
	      ['module_root', 'build', 'bindings'],
	      // node-waf and gyp_addon (a.k.a node-gyp)
	      ['module_root', 'build', 'Debug', 'bindings'],
	      ['module_root', 'build', 'Release', 'bindings'],
	      // Debug files, for development (legacy behavior, remove for node v0.9)
	      ['module_root', 'out', 'Debug', 'bindings'],
	      ['module_root', 'Debug', 'bindings'],
	      // Release files, but manually compiled (legacy behavior, remove for node v0.9)
	      ['module_root', 'out', 'Release', 'bindings'],
	      ['module_root', 'Release', 'bindings'],
	      // Legacy from node-waf, node <= 0.4.x
	      ['module_root', 'build', 'default', 'bindings'],
	      // Production "Release" buildtype binary (meh...)
	      ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'],
	      // node-qbs builds
	      ['module_root', 'addon-build', 'release', 'install-root', 'bindings'],
	      ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'],
	      ['module_root', 'addon-build', 'default', 'install-root', 'bindings'],
	      // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}
	      ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']
	    ]
	  };

	/**
	 * The main `bindings()` function loads the compiled bindings for a given module.
	 * It uses V8's Error API to determine the parent filename that this function is
	 * being invoked from, which is then used to find the root directory.
	 */

	function bindings(opts) {
	  // Argument surgery
	  if (typeof opts == 'string') {
	    opts = { bindings: opts };
	  } else if (!opts) {
	    opts = {};
	  }

	  // maps `defaults` onto `opts` object
	  Object.keys(defaults).map(function(i) {
	    if (!(i in opts)) opts[i] = defaults[i];
	  });

	  // Get the module root
	  if (!opts.module_root) {
	    opts.module_root = exports.getRoot(exports.getFileName());
	  }

	  // Ensure the given bindings name ends with .node
	  if (path.extname(opts.bindings) != '.node') {
	    opts.bindings += '.node';
	  }

	  // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035
	  var requireFunc =
	    typeof __webpack_require__ === 'function'
	      ? __non_webpack_require__
	      : commonjsRequire;

	  var tries = [],
	    i = 0,
	    l = opts.try.length,
	    n,
	    b,
	    err;

	  for (; i < l; i++) {
	    n = join.apply(
	      null,
	      opts.try[i].map(function(p) {
	        return opts[p] || p;
	      })
	    );
	    tries.push(n);
	    try {
	      b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
	      if (!opts.path) {
	        b.path = n;
	      }
	      return b;
	    } catch (e) {
	      if (e.code !== 'MODULE_NOT_FOUND' &&
	          e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' &&
	          !/not find/i.test(e.message)) {
	        throw e;
	      }
	    }
	  }

	  err = new Error(
	    'Could not locate the bindings file. Tried:\n' +
	      tries
	        .map(function(a) {
	          return opts.arrow + a;
	        })
	        .join('\n')
	  );
	  err.tries = tries;
	  throw err;
	}
	module.exports = exports = bindings;

	/**
	 * Gets the filename of the JavaScript file that invokes this function.
	 * Used to help find the root directory of a module.
	 * Optionally accepts an filename argument to skip when searching for the invoking filename
	 */

	exports.getFileName = function getFileName(calling_file) {
	  var origPST = Error.prepareStackTrace,
	    origSTL = Error.stackTraceLimit,
	    dummy = {},
	    fileName;

	  Error.stackTraceLimit = 10;

	  Error.prepareStackTrace = function(e, st) {
	    for (var i = 0, l = st.length; i < l; i++) {
	      fileName = st[i].getFileName();
	      if (fileName !== __filename) {
	        if (calling_file) {
	          if (fileName !== calling_file) {
	            return;
	          }
	        } else {
	          return;
	        }
	      }
	    }
	  };

	  // run the 'prepareStackTrace' function above
	  Error.captureStackTrace(dummy);

	  // cleanup
	  Error.prepareStackTrace = origPST;
	  Error.stackTraceLimit = origSTL;

	  // handle filename that starts with "file://"
	  var fileSchema = 'file://';
	  if (fileName.indexOf(fileSchema) === 0) {
	    fileName = fileUriToPath_1(fileName);
	  }

	  return fileName;
	};

	/**
	 * Gets the root directory of a module, given an arbitrary filename
	 * somewhere in the module tree. The "root directory" is the directory
	 * containing the `package.json` file.
	 *
	 *   In:  /home/nate/node-native-module/lib/index.js
	 *   Out: /home/nate/node-native-module
	 */

	exports.getRoot = function getRoot(file) {
	  var dir = dirname(file),
	    prev;
	  while (true) {
	    if (dir === '.') {
	      // Avoids an infinite loop in rare cases, like the REPL
	      dir = process.cwd();
	    }
	    if (
	      exists(join(dir, 'package.json')) ||
	      exists(join(dir, 'node_modules'))
	    ) {
	      // Found the 'package.json' file or 'node_modules' dir; we're done
	      return dir;
	    }
	    if (prev === dir) {
	      // Got to the top
	      throw new Error(
	        'Could not find module root given file: "' +
	          file +
	          '". Do you have a `package.json` file? '
	      );
	    }
	    // Try the parent dir next
	    prev = dir;
	    dir = join(dir, '..');
	  }
	};
	});
	var bindings_2 = bindings_1.getFileName;
	var bindings_3 = bindings_1.getRoot;

	var bindings = bindings_1('secp256k1');

	var toString = Object.prototype.toString;

	// TypeError
	var isArray = function (value, message) {
	  if (!Array.isArray(value)) throw TypeError(message)
	};

	var isBoolean = function (value, message) {
	  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)
	};

	var isBuffer = function (value, message) {
	  if (!Buffer.isBuffer(value)) throw TypeError(message)
	};

	var isFunction = function (value, message) {
	  if (toString.call(value) !== '[object Function]') throw TypeError(message)
	};

	var isNumber = function (value, message) {
	  if (toString.call(value) !== '[object Number]') throw TypeError(message)
	};

	var isObject = function (value, message) {
	  if (toString.call(value) !== '[object Object]') throw TypeError(message)
	};

	// RangeError
	var isBufferLength = function (buffer$$1, length, message) {
	  if (buffer$$1.length !== length) throw RangeError(message)
	};

	var isBufferLength2 = function (buffer$$1, length1, length2, message) {
	  if (buffer$$1.length !== length1 && buffer$$1.length !== length2) throw RangeError(message)
	};

	var isLengthGTZero = function (value, message) {
	  if (value.length === 0) throw RangeError(message)
	};

	var isNumberInInterval = function (number, x, y, message) {
	  if (number <= x || number >= y) throw RangeError(message)
	};

	var assert$1 = {
		isArray: isArray,
		isBoolean: isBoolean,
		isBuffer: isBuffer,
		isFunction: isFunction,
		isNumber: isNumber,
		isObject: isObject,
		isBufferLength: isBufferLength,
		isBufferLength2: isBufferLength2,
		isLengthGTZero: isLengthGTZero,
		isNumberInInterval: isNumberInInterval
	};

	// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
	// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	// NOTE: SIGHASH byte ignored AND restricted, truncate before use

	var Buffer$4 = safeBuffer.Buffer;

	function check (buffer$$1) {
	  if (buffer$$1.length < 8) return false
	  if (buffer$$1.length > 72) return false
	  if (buffer$$1[0] !== 0x30) return false
	  if (buffer$$1[1] !== buffer$$1.length - 2) return false
	  if (buffer$$1[2] !== 0x02) return false

	  var lenR = buffer$$1[3];
	  if (lenR === 0) return false
	  if (5 + lenR >= buffer$$1.length) return false
	  if (buffer$$1[4 + lenR] !== 0x02) return false

	  var lenS = buffer$$1[5 + lenR];
	  if (lenS === 0) return false
	  if ((6 + lenR + lenS) !== buffer$$1.length) return false

	  if (buffer$$1[4] & 0x80) return false
	  if (lenR > 1 && (buffer$$1[4] === 0x00) && !(buffer$$1[5] & 0x80)) return false

	  if (buffer$$1[lenR + 6] & 0x80) return false
	  if (lenS > 1 && (buffer$$1[lenR + 6] === 0x00) && !(buffer$$1[lenR + 7] & 0x80)) return false
	  return true
	}

	function decode$2 (buffer$$1) {
	  if (buffer$$1.length < 8) throw new Error('DER sequence length is too short')
	  if (buffer$$1.length > 72) throw new Error('DER sequence length is too long')
	  if (buffer$$1[0] !== 0x30) throw new Error('Expected DER sequence')
	  if (buffer$$1[1] !== buffer$$1.length - 2) throw new Error('DER sequence length is invalid')
	  if (buffer$$1[2] !== 0x02) throw new Error('Expected DER integer')

	  var lenR = buffer$$1[3];
	  if (lenR === 0) throw new Error('R length is zero')
	  if (5 + lenR >= buffer$$1.length) throw new Error('R length is too long')
	  if (buffer$$1[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)')

	  var lenS = buffer$$1[5 + lenR];
	  if (lenS === 0) throw new Error('S length is zero')
	  if ((6 + lenR + lenS) !== buffer$$1.length) throw new Error('S length is invalid')

	  if (buffer$$1[4] & 0x80) throw new Error('R value is negative')
	  if (lenR > 1 && (buffer$$1[4] === 0x00) && !(buffer$$1[5] & 0x80)) throw new Error('R value excessively padded')

	  if (buffer$$1[lenR + 6] & 0x80) throw new Error('S value is negative')
	  if (lenS > 1 && (buffer$$1[lenR + 6] === 0x00) && !(buffer$$1[lenR + 7] & 0x80)) throw new Error('S value excessively padded')

	  // non-BIP66 - extract R, S values
	  return {
	    r: buffer$$1.slice(4, 4 + lenR),
	    s: buffer$$1.slice(6 + lenR)
	  }
	}

	/*
	 * Expects r and s to be positive DER integers.
	 *
	 * The DER format uses the most significant bit as a sign bit (& 0x80).
	 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
	 *
	 * Examples:
	 *
	 *      0 =>     0x00
	 *      1 =>     0x01
	 *     -1 =>     0xff
	 *    127 =>     0x7f
	 *   -127 =>     0x81
	 *    128 =>   0x0080
	 *   -128 =>     0x80
	 *    255 =>   0x00ff
	 *   -255 =>   0xff01
	 *  16300 =>   0x3fac
	 * -16300 =>   0xc054
	 *  62300 => 0x00f35c
	 * -62300 => 0xff0ca4
	*/
	function encode$2 (r, s) {
	  var lenR = r.length;
	  var lenS = s.length;
	  if (lenR === 0) throw new Error('R length is zero')
	  if (lenS === 0) throw new Error('S length is zero')
	  if (lenR > 33) throw new Error('R length is too long')
	  if (lenS > 33) throw new Error('S length is too long')
	  if (r[0] & 0x80) throw new Error('R value is negative')
	  if (s[0] & 0x80) throw new Error('S value is negative')
	  if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) throw new Error('R value excessively padded')
	  if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) throw new Error('S value excessively padded')

	  var signature = Buffer$4.allocUnsafe(6 + lenR + lenS);

	  // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
	  signature[0] = 0x30;
	  signature[1] = signature.length - 2;
	  signature[2] = 0x02;
	  signature[3] = r.length;
	  r.copy(signature, 4);
	  signature[4 + lenR] = 0x02;
	  signature[5 + lenR] = s.length;
	  s.copy(signature, 6 + lenR);

	  return signature
	}

	var bip66 = {
	  check: check,
	  decode: decode$2,
	  encode: encode$2
	};

	var Buffer$5 = safeBuffer.Buffer;


	var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer$5.from([
	  // begin
	  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,
	  // private key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  // middle
	  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
	  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
	  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
	  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
	  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
	  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,
	  // public key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00
	]);

	var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer$5.from([
	  // begin
	  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,
	  // private key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  // middle
	  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
	  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,
	  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,
	  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,
	  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,
	  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,
	  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,
	  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,
	  // public key
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	  0x00
	]);

	var privateKeyExport = function (privateKey, publicKey, compressed) {
	  var result = Buffer$5.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
	  privateKey.copy(result, compressed ? 8 : 9);
	  publicKey.copy(result, compressed ? 181 : 214);
	  return result
	};

	var privateKeyImport = function (privateKey) {
	  var length = privateKey.length;

	  // sequence header
	  var index = 0;
	  if (length < index + 1 || privateKey[index] !== 0x30) return
	  index += 1;

	  // sequence length constructor
	  if (length < index + 1 || !(privateKey[index] & 0x80)) return

	  var lenb = privateKey[index] & 0x7f;
	  index += 1;
	  if (lenb < 1 || lenb > 2) return
	  if (length < index + lenb) return

	  // sequence length
	  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
	  index += lenb;
	  if (length < index + len) return

	  // sequence element 0: version number (=1)
	  if (length < index + 3 ||
	      privateKey[index] !== 0x02 ||
	      privateKey[index + 1] !== 0x01 ||
	      privateKey[index + 2] !== 0x01) {
	    return
	  }
	  index += 3;

	  // sequence element 1: octet string, up to 32 bytes
	  if (length < index + 2 ||
	      privateKey[index] !== 0x04 ||
	      privateKey[index + 1] > 0x20 ||
	      length < index + 2 + privateKey[index + 1]) {
	    return
	  }

	  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])
	};

	var signatureExport = function (sigObj) {
	  var r = Buffer$5.concat([Buffer$5.from([0]), sigObj.r]);
	  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);

	  var s = Buffer$5.concat([Buffer$5.from([0]), sigObj.s]);
	  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);

	  return bip66.encode(r.slice(posR), s.slice(posS))
	};

	var signatureImport = function (sig) {
	  var r = Buffer$5.alloc(32, 0);
	  var s = Buffer$5.alloc(32, 0);

	  try {
	    var sigObj = bip66.decode(sig);
	    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);
	    if (sigObj.r.length > 32) throw new Error('R length is too long')
	    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);
	    if (sigObj.s.length > 32) throw new Error('S length is too long')
	  } catch (err) {
	    return
	  }

	  sigObj.r.copy(r, 32 - sigObj.r.length);
	  sigObj.s.copy(s, 32 - sigObj.s.length);

	  return { r: r, s: s }
	};

	var signatureImportLax = function (sig) {
	  var r = Buffer$5.alloc(32, 0);
	  var s = Buffer$5.alloc(32, 0);

	  var length = sig.length;
	  var index = 0;

	  // sequence tag byte
	  if (sig[index++] !== 0x30) return

	  // sequence length byte
	  var lenbyte = sig[index++];
	  if (lenbyte & 0x80) {
	    index += lenbyte - 0x80;
	    if (index > length) return
	  }

	  // sequence tag byte for r
	  if (sig[index++] !== 0x02) return

	  // length for r
	  var rlen = sig[index++];
	  if (rlen & 0x80) {
	    lenbyte = rlen - 0x80;
	    if (index + lenbyte > length) return
	    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
	    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index];
	  }
	  if (rlen > length - index) return
	  var rindex = index;
	  index += rlen;

	  // sequence tag byte for s
	  if (sig[index++] !== 0x02) return

	  // length for s
	  var slen = sig[index++];
	  if (slen & 0x80) {
	    lenbyte = slen - 0x80;
	    if (index + lenbyte > length) return
	    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
	    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index];
	  }
	  if (slen > length - index) return
	  var sindex = index;
	  index += slen;

	  // ignore leading zeros in r
	  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
	  // copy r value
	  if (rlen > 32) return
	  var rvalue = sig.slice(rindex, rindex + rlen);
	  rvalue.copy(r, 32 - rvalue.length);

	  // ignore leading zeros in s
	  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
	  // copy s value
	  if (slen > 32) return
	  var svalue = sig.slice(sindex, sindex + slen);
	  svalue.copy(s, 32 - svalue.length);

	  return { r: r, s: s }
	};

	var der = {
		privateKeyExport: privateKeyExport,
		privateKeyImport: privateKeyImport,
		signatureExport: signatureExport,
		signatureImport: signatureImport,
		signatureImportLax: signatureImportLax
	};

	var COMPRESSED_TYPE_INVALID = "compressed should be a boolean";
	var EC_PRIVATE_KEY_TYPE_INVALID = "private key should be a Buffer";
	var EC_PRIVATE_KEY_LENGTH_INVALID = "private key length is invalid";
	var EC_PRIVATE_KEY_RANGE_INVALID = "private key range is invalid";
	var EC_PRIVATE_KEY_TWEAK_ADD_FAIL = "tweak out of range or resulting private key is invalid";
	var EC_PRIVATE_KEY_TWEAK_MUL_FAIL = "tweak out of range";
	var EC_PRIVATE_KEY_EXPORT_DER_FAIL = "couldn't export to DER format";
	var EC_PRIVATE_KEY_IMPORT_DER_FAIL = "couldn't import from DER format";
	var EC_PUBLIC_KEYS_TYPE_INVALID = "public keys should be an Array";
	var EC_PUBLIC_KEYS_LENGTH_INVALID = "public keys Array should have at least 1 element";
	var EC_PUBLIC_KEY_TYPE_INVALID = "public key should be a Buffer";
	var EC_PUBLIC_KEY_LENGTH_INVALID = "public key length is invalid";
	var EC_PUBLIC_KEY_PARSE_FAIL = "the public key could not be parsed or is invalid";
	var EC_PUBLIC_KEY_CREATE_FAIL = "private was invalid, try again";
	var EC_PUBLIC_KEY_TWEAK_ADD_FAIL = "tweak out of range or resulting public key is invalid";
	var EC_PUBLIC_KEY_TWEAK_MUL_FAIL = "tweak out of range";
	var EC_PUBLIC_KEY_COMBINE_FAIL = "the sum of the public keys is not valid";
	var ECDH_FAIL = "scalar was invalid (zero or overflow)";
	var ECDSA_SIGNATURE_TYPE_INVALID = "signature should be a Buffer";
	var ECDSA_SIGNATURE_LENGTH_INVALID = "signature length is invalid";
	var ECDSA_SIGNATURE_PARSE_FAIL = "couldn't parse signature";
	var ECDSA_SIGNATURE_PARSE_DER_FAIL = "couldn't parse DER signature";
	var ECDSA_SIGNATURE_SERIALIZE_DER_FAIL = "couldn't serialize signature to DER format";
	var ECDSA_SIGN_FAIL = "nonce generation function failed or private key is invalid";
	var ECDSA_RECOVER_FAIL = "couldn't recover public key from signature";
	var MSG32_TYPE_INVALID = "message should be a Buffer";
	var MSG32_LENGTH_INVALID = "message length is invalid";
	var OPTIONS_TYPE_INVALID = "options should be an Object";
	var OPTIONS_DATA_TYPE_INVALID = "options.data should be a Buffer";
	var OPTIONS_DATA_LENGTH_INVALID = "options.data length is invalid";
	var OPTIONS_NONCEFN_TYPE_INVALID = "options.noncefn should be a Function";
	var RECOVERY_ID_TYPE_INVALID = "recovery should be a Number";
	var RECOVERY_ID_VALUE_INVALID = "recovery should have value between -1 and 4";
	var TWEAK_TYPE_INVALID = "tweak should be a Buffer";
	var TWEAK_LENGTH_INVALID = "tweak length is invalid";
	var messages = {
		COMPRESSED_TYPE_INVALID: COMPRESSED_TYPE_INVALID,
		EC_PRIVATE_KEY_TYPE_INVALID: EC_PRIVATE_KEY_TYPE_INVALID,
		EC_PRIVATE_KEY_LENGTH_INVALID: EC_PRIVATE_KEY_LENGTH_INVALID,
		EC_PRIVATE_KEY_RANGE_INVALID: EC_PRIVATE_KEY_RANGE_INVALID,
		EC_PRIVATE_KEY_TWEAK_ADD_FAIL: EC_PRIVATE_KEY_TWEAK_ADD_FAIL,
		EC_PRIVATE_KEY_TWEAK_MUL_FAIL: EC_PRIVATE_KEY_TWEAK_MUL_FAIL,
		EC_PRIVATE_KEY_EXPORT_DER_FAIL: EC_PRIVATE_KEY_EXPORT_DER_FAIL,
		EC_PRIVATE_KEY_IMPORT_DER_FAIL: EC_PRIVATE_KEY_IMPORT_DER_FAIL,
		EC_PUBLIC_KEYS_TYPE_INVALID: EC_PUBLIC_KEYS_TYPE_INVALID,
		EC_PUBLIC_KEYS_LENGTH_INVALID: EC_PUBLIC_KEYS_LENGTH_INVALID,
		EC_PUBLIC_KEY_TYPE_INVALID: EC_PUBLIC_KEY_TYPE_INVALID,
		EC_PUBLIC_KEY_LENGTH_INVALID: EC_PUBLIC_KEY_LENGTH_INVALID,
		EC_PUBLIC_KEY_PARSE_FAIL: EC_PUBLIC_KEY_PARSE_FAIL,
		EC_PUBLIC_KEY_CREATE_FAIL: EC_PUBLIC_KEY_CREATE_FAIL,
		EC_PUBLIC_KEY_TWEAK_ADD_FAIL: EC_PUBLIC_KEY_TWEAK_ADD_FAIL,
		EC_PUBLIC_KEY_TWEAK_MUL_FAIL: EC_PUBLIC_KEY_TWEAK_MUL_FAIL,
		EC_PUBLIC_KEY_COMBINE_FAIL: EC_PUBLIC_KEY_COMBINE_FAIL,
		ECDH_FAIL: ECDH_FAIL,
		ECDSA_SIGNATURE_TYPE_INVALID: ECDSA_SIGNATURE_TYPE_INVALID,
		ECDSA_SIGNATURE_LENGTH_INVALID: ECDSA_SIGNATURE_LENGTH_INVALID,
		ECDSA_SIGNATURE_PARSE_FAIL: ECDSA_SIGNATURE_PARSE_FAIL,
		ECDSA_SIGNATURE_PARSE_DER_FAIL: ECDSA_SIGNATURE_PARSE_DER_FAIL,
		ECDSA_SIGNATURE_SERIALIZE_DER_FAIL: ECDSA_SIGNATURE_SERIALIZE_DER_FAIL,
		ECDSA_SIGN_FAIL: ECDSA_SIGN_FAIL,
		ECDSA_RECOVER_FAIL: ECDSA_RECOVER_FAIL,
		MSG32_TYPE_INVALID: MSG32_TYPE_INVALID,
		MSG32_LENGTH_INVALID: MSG32_LENGTH_INVALID,
		OPTIONS_TYPE_INVALID: OPTIONS_TYPE_INVALID,
		OPTIONS_DATA_TYPE_INVALID: OPTIONS_DATA_TYPE_INVALID,
		OPTIONS_DATA_LENGTH_INVALID: OPTIONS_DATA_LENGTH_INVALID,
		OPTIONS_NONCEFN_TYPE_INVALID: OPTIONS_NONCEFN_TYPE_INVALID,
		RECOVERY_ID_TYPE_INVALID: RECOVERY_ID_TYPE_INVALID,
		RECOVERY_ID_VALUE_INVALID: RECOVERY_ID_VALUE_INVALID,
		TWEAK_TYPE_INVALID: TWEAK_TYPE_INVALID,
		TWEAK_LENGTH_INVALID: TWEAK_LENGTH_INVALID
	};

	var messages$1 = /*#__PURE__*/Object.freeze({
		COMPRESSED_TYPE_INVALID: COMPRESSED_TYPE_INVALID,
		EC_PRIVATE_KEY_TYPE_INVALID: EC_PRIVATE_KEY_TYPE_INVALID,
		EC_PRIVATE_KEY_LENGTH_INVALID: EC_PRIVATE_KEY_LENGTH_INVALID,
		EC_PRIVATE_KEY_RANGE_INVALID: EC_PRIVATE_KEY_RANGE_INVALID,
		EC_PRIVATE_KEY_TWEAK_ADD_FAIL: EC_PRIVATE_KEY_TWEAK_ADD_FAIL,
		EC_PRIVATE_KEY_TWEAK_MUL_FAIL: EC_PRIVATE_KEY_TWEAK_MUL_FAIL,
		EC_PRIVATE_KEY_EXPORT_DER_FAIL: EC_PRIVATE_KEY_EXPORT_DER_FAIL,
		EC_PRIVATE_KEY_IMPORT_DER_FAIL: EC_PRIVATE_KEY_IMPORT_DER_FAIL,
		EC_PUBLIC_KEYS_TYPE_INVALID: EC_PUBLIC_KEYS_TYPE_INVALID,
		EC_PUBLIC_KEYS_LENGTH_INVALID: EC_PUBLIC_KEYS_LENGTH_INVALID,
		EC_PUBLIC_KEY_TYPE_INVALID: EC_PUBLIC_KEY_TYPE_INVALID,
		EC_PUBLIC_KEY_LENGTH_INVALID: EC_PUBLIC_KEY_LENGTH_INVALID,
		EC_PUBLIC_KEY_PARSE_FAIL: EC_PUBLIC_KEY_PARSE_FAIL,
		EC_PUBLIC_KEY_CREATE_FAIL: EC_PUBLIC_KEY_CREATE_FAIL,
		EC_PUBLIC_KEY_TWEAK_ADD_FAIL: EC_PUBLIC_KEY_TWEAK_ADD_FAIL,
		EC_PUBLIC_KEY_TWEAK_MUL_FAIL: EC_PUBLIC_KEY_TWEAK_MUL_FAIL,
		EC_PUBLIC_KEY_COMBINE_FAIL: EC_PUBLIC_KEY_COMBINE_FAIL,
		ECDH_FAIL: ECDH_FAIL,
		ECDSA_SIGNATURE_TYPE_INVALID: ECDSA_SIGNATURE_TYPE_INVALID,
		ECDSA_SIGNATURE_LENGTH_INVALID: ECDSA_SIGNATURE_LENGTH_INVALID,
		ECDSA_SIGNATURE_PARSE_FAIL: ECDSA_SIGNATURE_PARSE_FAIL,
		ECDSA_SIGNATURE_PARSE_DER_FAIL: ECDSA_SIGNATURE_PARSE_DER_FAIL,
		ECDSA_SIGNATURE_SERIALIZE_DER_FAIL: ECDSA_SIGNATURE_SERIALIZE_DER_FAIL,
		ECDSA_SIGN_FAIL: ECDSA_SIGN_FAIL,
		ECDSA_RECOVER_FAIL: ECDSA_RECOVER_FAIL,
		MSG32_TYPE_INVALID: MSG32_TYPE_INVALID,
		MSG32_LENGTH_INVALID: MSG32_LENGTH_INVALID,
		OPTIONS_TYPE_INVALID: OPTIONS_TYPE_INVALID,
		OPTIONS_DATA_TYPE_INVALID: OPTIONS_DATA_TYPE_INVALID,
		OPTIONS_DATA_LENGTH_INVALID: OPTIONS_DATA_LENGTH_INVALID,
		OPTIONS_NONCEFN_TYPE_INVALID: OPTIONS_NONCEFN_TYPE_INVALID,
		RECOVERY_ID_TYPE_INVALID: RECOVERY_ID_TYPE_INVALID,
		RECOVERY_ID_VALUE_INVALID: RECOVERY_ID_VALUE_INVALID,
		TWEAK_TYPE_INVALID: TWEAK_TYPE_INVALID,
		TWEAK_LENGTH_INVALID: TWEAK_LENGTH_INVALID,
		default: messages
	});

	var messages$2 = getCjsExportFromNamespace(messages$1)

	function initCompressedValue (value, defaultValue) {
	  if (value === undefined) return defaultValue

	  assert$1.isBoolean(value, messages$2.COMPRESSED_TYPE_INVALID);
	  return value
	}

	var lib = function (secp256k1) {
	  return {
	    privateKeyVerify: function (privateKey) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)
	    },

	    privateKeyExport: function (privateKey, compressed) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      compressed = initCompressedValue(compressed, true);
	      var publicKey = secp256k1.privateKeyExport(privateKey, compressed);

	      return der.privateKeyExport(privateKey, publicKey, compressed)
	    },

	    privateKeyImport: function (privateKey) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);

	      privateKey = der.privateKeyImport(privateKey);
	      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey

	      throw new Error(messages$2.EC_PRIVATE_KEY_IMPORT_DER_FAIL)
	    },

	    privateKeyNegate: function (privateKey) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      return secp256k1.privateKeyNegate(privateKey)
	    },

	    privateKeyModInverse: function (privateKey) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      return secp256k1.privateKeyModInverse(privateKey)
	    },

	    privateKeyTweakAdd: function (privateKey, tweak) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
	      assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

	      return secp256k1.privateKeyTweakAdd(privateKey, tweak)
	    },

	    privateKeyTweakMul: function (privateKey, tweak) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
	      assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

	      return secp256k1.privateKeyTweakMul(privateKey, tweak)
	    },

	    publicKeyCreate: function (privateKey, compressed) {
	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.publicKeyCreate(privateKey, compressed)
	    },

	    publicKeyConvert: function (publicKey, compressed) {
	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.publicKeyConvert(publicKey, compressed)
	    },

	    publicKeyVerify: function (publicKey) {
	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      return secp256k1.publicKeyVerify(publicKey)
	    },

	    publicKeyTweakAdd: function (publicKey, tweak, compressed) {
	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

	      assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
	      assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)
	    },

	    publicKeyTweakMul: function (publicKey, tweak, compressed) {
	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

	      assert$1.isBuffer(tweak, messages$2.TWEAK_TYPE_INVALID);
	      assert$1.isBufferLength(tweak, 32, messages$2.TWEAK_LENGTH_INVALID);

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)
	    },

	    publicKeyCombine: function (publicKeys, compressed) {
	      assert$1.isArray(publicKeys, messages$2.EC_PUBLIC_KEYS_TYPE_INVALID);
	      assert$1.isLengthGTZero(publicKeys, messages$2.EC_PUBLIC_KEYS_LENGTH_INVALID);
	      for (var i = 0; i < publicKeys.length; ++i) {
	        assert$1.isBuffer(publicKeys[i], messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	        assert$1.isBufferLength2(publicKeys[i], 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);
	      }

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.publicKeyCombine(publicKeys, compressed)
	    },

	    signatureNormalize: function (signature) {
	      assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
	      assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

	      return secp256k1.signatureNormalize(signature)
	    },

	    signatureExport: function (signature) {
	      assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
	      assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

	      var sigObj = secp256k1.signatureExport(signature);
	      return der.signatureExport(sigObj)
	    },

	    signatureImport: function (sig) {
	      assert$1.isBuffer(sig, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
	      assert$1.isLengthGTZero(sig, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

	      var sigObj = der.signatureImport(sig);
	      if (sigObj) return secp256k1.signatureImport(sigObj)

	      throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_DER_FAIL)
	    },

	    signatureImportLax: function (sig) {
	      assert$1.isBuffer(sig, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
	      assert$1.isLengthGTZero(sig, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

	      var sigObj = der.signatureImportLax(sig);
	      if (sigObj) return secp256k1.signatureImport(sigObj)

	      throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_DER_FAIL)
	    },

	    sign: function (message, privateKey, options) {
	      assert$1.isBuffer(message, messages$2.MSG32_TYPE_INVALID);
	      assert$1.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);

	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      var data = null;
	      var noncefn = null;
	      if (options !== undefined) {
	        assert$1.isObject(options, messages$2.OPTIONS_TYPE_INVALID);

	        if (options.data !== undefined) {
	          assert$1.isBuffer(options.data, messages$2.OPTIONS_DATA_TYPE_INVALID);
	          assert$1.isBufferLength(options.data, 32, messages$2.OPTIONS_DATA_LENGTH_INVALID);
	          data = options.data;
	        }

	        if (options.noncefn !== undefined) {
	          assert$1.isFunction(options.noncefn, messages$2.OPTIONS_NONCEFN_TYPE_INVALID);
	          noncefn = options.noncefn;
	        }
	      }

	      return secp256k1.sign(message, privateKey, noncefn, data)
	    },

	    verify: function (message, signature, publicKey) {
	      assert$1.isBuffer(message, messages$2.MSG32_TYPE_INVALID);
	      assert$1.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);

	      assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
	      assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

	      return secp256k1.verify(message, signature, publicKey)
	    },

	    recover: function (message, signature, recovery, compressed) {
	      assert$1.isBuffer(message, messages$2.MSG32_TYPE_INVALID);
	      assert$1.isBufferLength(message, 32, messages$2.MSG32_LENGTH_INVALID);

	      assert$1.isBuffer(signature, messages$2.ECDSA_SIGNATURE_TYPE_INVALID);
	      assert$1.isBufferLength(signature, 64, messages$2.ECDSA_SIGNATURE_LENGTH_INVALID);

	      assert$1.isNumber(recovery, messages$2.RECOVERY_ID_TYPE_INVALID);
	      assert$1.isNumberInInterval(recovery, -1, 4, messages$2.RECOVERY_ID_VALUE_INVALID);

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.recover(message, signature, recovery, compressed)
	    },

	    ecdh: function (publicKey, privateKey) {
	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      return secp256k1.ecdh(publicKey, privateKey)
	    },

	    ecdhUnsafe: function (publicKey, privateKey, compressed) {
	      assert$1.isBuffer(publicKey, messages$2.EC_PUBLIC_KEY_TYPE_INVALID);
	      assert$1.isBufferLength2(publicKey, 33, 65, messages$2.EC_PUBLIC_KEY_LENGTH_INVALID);

	      assert$1.isBuffer(privateKey, messages$2.EC_PRIVATE_KEY_TYPE_INVALID);
	      assert$1.isBufferLength(privateKey, 32, messages$2.EC_PRIVATE_KEY_LENGTH_INVALID);

	      compressed = initCompressedValue(compressed, true);

	      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)
	    }
	  }
	};

	var bn = createCommonjsModule(function (module) {
	(function (module, exports) {

	  // Utils
	  function assert$$1 (val, msg) {
	    if (!val) throw new Error(msg || 'Assertion failed');
	  }

	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  }

	  // BN

	  function BN (number, base, endian) {
	    if (BN.isBN(number)) {
	      return number;
	    }

	    this.negative = 0;
	    this.words = null;
	    this.length = 0;

	    // Reduction context
	    this.red = null;

	    if (number !== null) {
	      if (base === 'le' || base === 'be') {
	        endian = base;
	        base = 10;
	      }

	      this._init(number || 0, base || 10, endian || 'be');
	    }
	  }
	  if (typeof module === 'object') {
	    module.exports = BN;
	  } else {
	    exports.BN = BN;
	  }

	  BN.BN = BN;
	  BN.wordSize = 26;

	  var Buffer;
	  try {
	    Buffer = buffer.Buffer;
	  } catch (e) {
	  }

	  BN.isBN = function isBN (num) {
	    if (num instanceof BN) {
	      return true;
	    }

	    return num !== null && typeof num === 'object' &&
	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };

	  BN.max = function max (left, right) {
	    if (left.cmp(right) > 0) return left;
	    return right;
	  };

	  BN.min = function min (left, right) {
	    if (left.cmp(right) < 0) return left;
	    return right;
	  };

	  BN.prototype._init = function init (number, base, endian) {
	    if (typeof number === 'number') {
	      return this._initNumber(number, base, endian);
	    }

	    if (typeof number === 'object') {
	      return this._initArray(number, base, endian);
	    }

	    if (base === 'hex') {
	      base = 16;
	    }
	    assert$$1(base === (base | 0) && base >= 2 && base <= 36);

	    number = number.toString().replace(/\s+/g, '');
	    var start = 0;
	    if (number[0] === '-') {
	      start++;
	    }

	    if (base === 16) {
	      this._parseHex(number, start);
	    } else {
	      this._parseBase(number, base, start);
	    }

	    if (number[0] === '-') {
	      this.negative = 1;
	    }

	    this.strip();

	    if (endian !== 'le') return;

	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
	    if (number < 0) {
	      this.negative = 1;
	      number = -number;
	    }
	    if (number < 0x4000000) {
	      this.words = [ number & 0x3ffffff ];
	      this.length = 1;
	    } else if (number < 0x10000000000000) {
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff
	      ];
	      this.length = 2;
	    } else {
	      assert$$1(number < 0x20000000000000); // 2 ^ 53 (unsafe)
	      this.words = [
	        number & 0x3ffffff,
	        (number / 0x4000000) & 0x3ffffff,
	        1
	      ];
	      this.length = 3;
	    }

	    if (endian !== 'le') return;

	    // Reverse the bytes
	    this._initArray(this.toArray(), base, endian);
	  };

	  BN.prototype._initArray = function _initArray (number, base, endian) {
	    // Perhaps a Uint8Array
	    assert$$1(typeof number.length === 'number');
	    if (number.length <= 0) {
	      this.words = [ 0 ];
	      this.length = 1;
	      return this;
	    }

	    this.length = Math.ceil(number.length / 3);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    var off = 0;
	    if (endian === 'be') {
	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    } else if (endian === 'le') {
	      for (i = 0, j = 0; i < number.length; i += 3) {
	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
	        this.words[j] |= (w << off) & 0x3ffffff;
	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
	        off += 24;
	        if (off >= 26) {
	          off -= 26;
	          j++;
	        }
	      }
	    }
	    return this.strip();
	  };

	  function parseHex (str, start, end) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r <<= 4;

	      // 'a' - 'f'
	      if (c >= 49 && c <= 54) {
	        r |= c - 49 + 0xa;

	      // 'A' - 'F'
	      } else if (c >= 17 && c <= 22) {
	        r |= c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r |= c & 0xf;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseHex = function _parseHex (number, start) {
	    // Create possibly bigger array to ensure that it fits the number
	    this.length = Math.ceil((number.length - start) / 6);
	    this.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      this.words[i] = 0;
	    }

	    var j, w;
	    // Scan 24-bit chunks and add them to the number
	    var off = 0;
	    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
	      w = parseHex(number, i, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	      off += 24;
	      if (off >= 26) {
	        off -= 26;
	        j++;
	      }
	    }
	    if (i + 6 !== start) {
	      w = parseHex(number, start, i + 6);
	      this.words[j] |= (w << off) & 0x3ffffff;
	      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
	    }
	    this.strip();
	  };

	  function parseBase (str, start, end, mul) {
	    var r = 0;
	    var len = Math.min(str.length, end);
	    for (var i = start; i < len; i++) {
	      var c = str.charCodeAt(i) - 48;

	      r *= mul;

	      // 'a'
	      if (c >= 49) {
	        r += c - 49 + 0xa;

	      // 'A'
	      } else if (c >= 17) {
	        r += c - 17 + 0xa;

	      // '0' - '9'
	      } else {
	        r += c;
	      }
	    }
	    return r;
	  }

	  BN.prototype._parseBase = function _parseBase (number, base, start) {
	    // Initialize as zero
	    this.words = [ 0 ];
	    this.length = 1;

	    // Find length of limb in base
	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
	      limbLen++;
	    }
	    limbLen--;
	    limbPow = (limbPow / base) | 0;

	    var total = number.length - start;
	    var mod = total % limbLen;
	    var end = Math.min(total, total - mod) + start;

	    var word = 0;
	    for (var i = start; i < end; i += limbLen) {
	      word = parseBase(number, i, i + limbLen, base);

	      this.imuln(limbPow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }

	    if (mod !== 0) {
	      var pow = 1;
	      word = parseBase(number, i, number.length, base);

	      for (i = 0; i < mod; i++) {
	        pow *= base;
	      }

	      this.imuln(pow);
	      if (this.words[0] + word < 0x4000000) {
	        this.words[0] += word;
	      } else {
	        this._iaddn(word);
	      }
	    }
	  };

	  BN.prototype.copy = function copy (dest) {
	    dest.words = new Array(this.length);
	    for (var i = 0; i < this.length; i++) {
	      dest.words[i] = this.words[i];
	    }
	    dest.length = this.length;
	    dest.negative = this.negative;
	    dest.red = this.red;
	  };

	  BN.prototype.clone = function clone () {
	    var r = new BN(null);
	    this.copy(r);
	    return r;
	  };

	  BN.prototype._expand = function _expand (size) {
	    while (this.length < size) {
	      this.words[this.length++] = 0;
	    }
	    return this;
	  };

	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
	    while (this.length > 1 && this.words[this.length - 1] === 0) {
	      this.length--;
	    }
	    return this._normSign();
	  };

	  BN.prototype._normSign = function _normSign () {
	    // -0 = 0
	    if (this.length === 1 && this.words[0] === 0) {
	      this.negative = 0;
	    }
	    return this;
	  };

	  BN.prototype.inspect = function inspect () {
	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };

	  /*

	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];

	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
	    zeros[i] = s;
	    s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
	    var groupSize = 0;
	    var groupBase = 1;
	    while (groupBase < (1 << BN.wordSize) / base) {
	      groupBase *= base;
	      groupSize += 1;
	    }
	    groupSizes[base] = groupSize;
	    groupBases[base] = groupBase;
	  }

	  */

	  var zeros = [
	    '',
	    '0',
	    '00',
	    '000',
	    '0000',
	    '00000',
	    '000000',
	    '0000000',
	    '00000000',
	    '000000000',
	    '0000000000',
	    '00000000000',
	    '000000000000',
	    '0000000000000',
	    '00000000000000',
	    '000000000000000',
	    '0000000000000000',
	    '00000000000000000',
	    '000000000000000000',
	    '0000000000000000000',
	    '00000000000000000000',
	    '000000000000000000000',
	    '0000000000000000000000',
	    '00000000000000000000000',
	    '000000000000000000000000',
	    '0000000000000000000000000'
	  ];

	  var groupSizes = [
	    0, 0,
	    25, 16, 12, 11, 10, 9, 8,
	    8, 7, 7, 7, 7, 6, 6,
	    6, 6, 6, 6, 6, 5, 5,
	    5, 5, 5, 5, 5, 5, 5,
	    5, 5, 5, 5, 5, 5, 5
	  ];

	  var groupBases = [
	    0, 0,
	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];

	  BN.prototype.toString = function toString (base, padding) {
	    base = base || 10;
	    padding = padding | 0 || 1;

	    var out;
	    if (base === 16 || base === 'hex') {
	      out = '';
	      var off = 0;
	      var carry = 0;
	      for (var i = 0; i < this.length; i++) {
	        var w = this.words[i];
	        var word = (((w << off) | carry) & 0xffffff).toString(16);
	        carry = (w >>> (24 - off)) & 0xffffff;
	        if (carry !== 0 || i !== this.length - 1) {
	          out = zeros[6 - word.length] + word + out;
	        } else {
	          out = word + out;
	        }
	        off += 2;
	        if (off >= 26) {
	          off -= 26;
	          i--;
	        }
	      }
	      if (carry !== 0) {
	        out = carry.toString(16) + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    if (base === (base | 0) && base >= 2 && base <= 36) {
	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
	      var groupSize = groupSizes[base];
	      // var groupBase = Math.pow(base, groupSize);
	      var groupBase = groupBases[base];
	      out = '';
	      var c = this.clone();
	      c.negative = 0;
	      while (!c.isZero()) {
	        var r = c.modn(groupBase).toString(base);
	        c = c.idivn(groupBase);

	        if (!c.isZero()) {
	          out = zeros[groupSize - r.length] + r + out;
	        } else {
	          out = r + out;
	        }
	      }
	      if (this.isZero()) {
	        out = '0' + out;
	      }
	      while (out.length % padding !== 0) {
	        out = '0' + out;
	      }
	      if (this.negative !== 0) {
	        out = '-' + out;
	      }
	      return out;
	    }

	    assert$$1(false, 'Base should be between 2 and 36');
	  };

	  BN.prototype.toNumber = function toNumber () {
	    var ret = this.words[0];
	    if (this.length === 2) {
	      ret += this.words[1] * 0x4000000;
	    } else if (this.length === 3 && this.words[2] === 0x01) {
	      // NOTE: at this stage it is known that the top bit is set
	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
	    } else if (this.length > 2) {
	      assert$$1(false, 'Number can only safely store up to 53 bits');
	    }
	    return (this.negative !== 0) ? -ret : ret;
	  };

	  BN.prototype.toJSON = function toJSON () {
	    return this.toString(16);
	  };

	  BN.prototype.toBuffer = function toBuffer (endian, length) {
	    assert$$1(typeof Buffer !== 'undefined');
	    return this.toArrayLike(Buffer, endian, length);
	  };

	  BN.prototype.toArray = function toArray (endian, length) {
	    return this.toArrayLike(Array, endian, length);
	  };

	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
	    var byteLength = this.byteLength();
	    var reqLength = length || Math.max(1, byteLength);
	    assert$$1(byteLength <= reqLength, 'byte array longer than desired length');
	    assert$$1(reqLength > 0, 'Requested array length <= 0');

	    this.strip();
	    var littleEndian = endian === 'le';
	    var res = new ArrayType(reqLength);

	    var b, i;
	    var q = this.clone();
	    if (!littleEndian) {
	      // Assume big-endian
	      for (i = 0; i < reqLength - byteLength; i++) {
	        res[i] = 0;
	      }

	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[reqLength - i - 1] = b;
	      }
	    } else {
	      for (i = 0; !q.isZero(); i++) {
	        b = q.andln(0xff);
	        q.iushrn(8);

	        res[i] = b;
	      }

	      for (; i < reqLength; i++) {
	        res[i] = 0;
	      }
	    }

	    return res;
	  };

	  if (Math.clz32) {
	    BN.prototype._countBits = function _countBits (w) {
	      return 32 - Math.clz32(w);
	    };
	  } else {
	    BN.prototype._countBits = function _countBits (w) {
	      var t = w;
	      var r = 0;
	      if (t >= 0x1000) {
	        r += 13;
	        t >>>= 13;
	      }
	      if (t >= 0x40) {
	        r += 7;
	        t >>>= 7;
	      }
	      if (t >= 0x8) {
	        r += 4;
	        t >>>= 4;
	      }
	      if (t >= 0x02) {
	        r += 2;
	        t >>>= 2;
	      }
	      return r + t;
	    };
	  }

	  BN.prototype._zeroBits = function _zeroBits (w) {
	    // Short-cut
	    if (w === 0) return 26;

	    var t = w;
	    var r = 0;
	    if ((t & 0x1fff) === 0) {
	      r += 13;
	      t >>>= 13;
	    }
	    if ((t & 0x7f) === 0) {
	      r += 7;
	      t >>>= 7;
	    }
	    if ((t & 0xf) === 0) {
	      r += 4;
	      t >>>= 4;
	    }
	    if ((t & 0x3) === 0) {
	      r += 2;
	      t >>>= 2;
	    }
	    if ((t & 0x1) === 0) {
	      r++;
	    }
	    return r;
	  };

	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
	    var w = this.words[this.length - 1];
	    var hi = this._countBits(w);
	    return (this.length - 1) * 26 + hi;
	  };

	  function toBitArray (num) {
	    var w = new Array(num.bitLength());

	    for (var bit = 0; bit < w.length; bit++) {
	      var off = (bit / 26) | 0;
	      var wbit = bit % 26;

	      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
	    }

	    return w;
	  }

	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
	    if (this.isZero()) return 0;

	    var r = 0;
	    for (var i = 0; i < this.length; i++) {
	      var b = this._zeroBits(this.words[i]);
	      r += b;
	      if (b !== 26) break;
	    }
	    return r;
	  };

	  BN.prototype.byteLength = function byteLength () {
	    return Math.ceil(this.bitLength() / 8);
	  };

	  BN.prototype.toTwos = function toTwos (width) {
	    if (this.negative !== 0) {
	      return this.abs().inotn(width).iaddn(1);
	    }
	    return this.clone();
	  };

	  BN.prototype.fromTwos = function fromTwos (width) {
	    if (this.testn(width - 1)) {
	      return this.notn(width).iaddn(1).ineg();
	    }
	    return this.clone();
	  };

	  BN.prototype.isNeg = function isNeg () {
	    return this.negative !== 0;
	  };

	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
	    return this.clone().ineg();
	  };

	  BN.prototype.ineg = function ineg () {
	    if (!this.isZero()) {
	      this.negative ^= 1;
	    }

	    return this;
	  };

	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
	    while (this.length < num.length) {
	      this.words[this.length++] = 0;
	    }

	    for (var i = 0; i < num.length; i++) {
	      this.words[i] = this.words[i] | num.words[i];
	    }

	    return this.strip();
	  };

	  BN.prototype.ior = function ior (num) {
	    assert$$1((this.negative | num.negative) === 0);
	    return this.iuor(num);
	  };

	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
	    if (this.length > num.length) return this.clone().ior(num);
	    return num.clone().ior(this);
	  };

	  BN.prototype.uor = function uor (num) {
	    if (this.length > num.length) return this.clone().iuor(num);
	    return num.clone().iuor(this);
	  };

	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
	    // b = min-length(num, this)
	    var b;
	    if (this.length > num.length) {
	      b = num;
	    } else {
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = this.words[i] & num.words[i];
	    }

	    this.length = b.length;

	    return this.strip();
	  };

	  BN.prototype.iand = function iand (num) {
	    assert$$1((this.negative | num.negative) === 0);
	    return this.iuand(num);
	  };

	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
	    if (this.length > num.length) return this.clone().iand(num);
	    return num.clone().iand(this);
	  };

	  BN.prototype.uand = function uand (num) {
	    if (this.length > num.length) return this.clone().iuand(num);
	    return num.clone().iuand(this);
	  };

	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
	    // a.length > b.length
	    var a;
	    var b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    for (var i = 0; i < b.length; i++) {
	      this.words[i] = a.words[i] ^ b.words[i];
	    }

	    if (this !== a) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = a.length;

	    return this.strip();
	  };

	  BN.prototype.ixor = function ixor (num) {
	    assert$$1((this.negative | num.negative) === 0);
	    return this.iuxor(num);
	  };

	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
	    if (this.length > num.length) return this.clone().ixor(num);
	    return num.clone().ixor(this);
	  };

	  BN.prototype.uxor = function uxor (num) {
	    if (this.length > num.length) return this.clone().iuxor(num);
	    return num.clone().iuxor(this);
	  };

	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
	    assert$$1(typeof width === 'number' && width >= 0);

	    var bytesNeeded = Math.ceil(width / 26) | 0;
	    var bitsLeft = width % 26;

	    // Extend the buffer with leading zeroes
	    this._expand(bytesNeeded);

	    if (bitsLeft > 0) {
	      bytesNeeded--;
	    }

	    // Handle complete words
	    for (var i = 0; i < bytesNeeded; i++) {
	      this.words[i] = ~this.words[i] & 0x3ffffff;
	    }

	    // Handle the residue
	    if (bitsLeft > 0) {
	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
	    }

	    // And remove leading zeroes
	    return this.strip();
	  };

	  BN.prototype.notn = function notn (width) {
	    return this.clone().inotn(width);
	  };

	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
	    assert$$1(typeof bit === 'number' && bit >= 0);

	    var off = (bit / 26) | 0;
	    var wbit = bit % 26;

	    this._expand(off + 1);

	    if (val) {
	      this.words[off] = this.words[off] | (1 << wbit);
	    } else {
	      this.words[off] = this.words[off] & ~(1 << wbit);
	    }

	    return this.strip();
	  };

	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
	    var r;

	    // negative + positive
	    if (this.negative !== 0 && num.negative === 0) {
	      this.negative = 0;
	      r = this.isub(num);
	      this.negative ^= 1;
	      return this._normSign();

	    // positive + negative
	    } else if (this.negative === 0 && num.negative !== 0) {
	      num.negative = 0;
	      r = this.isub(num);
	      num.negative = 1;
	      return r._normSign();
	    }

	    // a.length > b.length
	    var a, b;
	    if (this.length > num.length) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      this.words[i] = r & 0x3ffffff;
	      carry = r >>> 26;
	    }

	    this.length = a.length;
	    if (carry !== 0) {
	      this.words[this.length] = carry;
	      this.length++;
	    // Copy the rest of the words
	    } else if (a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    return this;
	  };

	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
	    var res;
	    if (num.negative !== 0 && this.negative === 0) {
	      num.negative = 0;
	      res = this.sub(num);
	      num.negative ^= 1;
	      return res;
	    } else if (num.negative === 0 && this.negative !== 0) {
	      this.negative = 0;
	      res = num.sub(this);
	      this.negative = 1;
	      return res;
	    }

	    if (this.length > num.length) return this.clone().iadd(num);

	    return num.clone().iadd(this);
	  };

	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
	    // this - (-num) = this + num
	    if (num.negative !== 0) {
	      num.negative = 0;
	      var r = this.iadd(num);
	      num.negative = 1;
	      return r._normSign();

	    // -this - num = -(this + num)
	    } else if (this.negative !== 0) {
	      this.negative = 0;
	      this.iadd(num);
	      this.negative = 1;
	      return this._normSign();
	    }

	    // At this point both numbers are positive
	    var cmp = this.cmp(num);

	    // Optimization - zeroify
	    if (cmp === 0) {
	      this.negative = 0;
	      this.length = 1;
	      this.words[0] = 0;
	      return this;
	    }

	    // a > b
	    var a, b;
	    if (cmp > 0) {
	      a = this;
	      b = num;
	    } else {
	      a = num;
	      b = this;
	    }

	    var carry = 0;
	    for (var i = 0; i < b.length; i++) {
	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }
	    for (; carry !== 0 && i < a.length; i++) {
	      r = (a.words[i] | 0) + carry;
	      carry = r >> 26;
	      this.words[i] = r & 0x3ffffff;
	    }

	    // Copy rest of the words
	    if (carry === 0 && i < a.length && a !== this) {
	      for (; i < a.length; i++) {
	        this.words[i] = a.words[i];
	      }
	    }

	    this.length = Math.max(this.length, i);

	    if (a !== this) {
	      this.negative = 1;
	    }

	    return this.strip();
	  };

	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
	    return this.clone().isub(num);
	  };

	  function smallMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    var len = (self.length + num.length) | 0;
	    out.length = len;
	    len = (len - 1) | 0;

	    // Peel one iteration (compiler can't do it, because of code complexity)
	    var a = self.words[0] | 0;
	    var b = num.words[0] | 0;
	    var r = a * b;

	    var lo = r & 0x3ffffff;
	    var carry = (r / 0x4000000) | 0;
	    out.words[0] = lo;

	    for (var k = 1; k < len; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = carry >>> 26;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = (k - j) | 0;
	        a = self.words[i] | 0;
	        b = num.words[j] | 0;
	        r = a * b + rword;
	        ncarry += (r / 0x4000000) | 0;
	        rword = r & 0x3ffffff;
	      }
	      out.words[k] = rword | 0;
	      carry = ncarry | 0;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry | 0;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
	    var a = self.words;
	    var b = num.words;
	    var o = out.words;
	    var c = 0;
	    var lo;
	    var mid;
	    var hi;
	    var a0 = a[0] | 0;
	    var al0 = a0 & 0x1fff;
	    var ah0 = a0 >>> 13;
	    var a1 = a[1] | 0;
	    var al1 = a1 & 0x1fff;
	    var ah1 = a1 >>> 13;
	    var a2 = a[2] | 0;
	    var al2 = a2 & 0x1fff;
	    var ah2 = a2 >>> 13;
	    var a3 = a[3] | 0;
	    var al3 = a3 & 0x1fff;
	    var ah3 = a3 >>> 13;
	    var a4 = a[4] | 0;
	    var al4 = a4 & 0x1fff;
	    var ah4 = a4 >>> 13;
	    var a5 = a[5] | 0;
	    var al5 = a5 & 0x1fff;
	    var ah5 = a5 >>> 13;
	    var a6 = a[6] | 0;
	    var al6 = a6 & 0x1fff;
	    var ah6 = a6 >>> 13;
	    var a7 = a[7] | 0;
	    var al7 = a7 & 0x1fff;
	    var ah7 = a7 >>> 13;
	    var a8 = a[8] | 0;
	    var al8 = a8 & 0x1fff;
	    var ah8 = a8 >>> 13;
	    var a9 = a[9] | 0;
	    var al9 = a9 & 0x1fff;
	    var ah9 = a9 >>> 13;
	    var b0 = b[0] | 0;
	    var bl0 = b0 & 0x1fff;
	    var bh0 = b0 >>> 13;
	    var b1 = b[1] | 0;
	    var bl1 = b1 & 0x1fff;
	    var bh1 = b1 >>> 13;
	    var b2 = b[2] | 0;
	    var bl2 = b2 & 0x1fff;
	    var bh2 = b2 >>> 13;
	    var b3 = b[3] | 0;
	    var bl3 = b3 & 0x1fff;
	    var bh3 = b3 >>> 13;
	    var b4 = b[4] | 0;
	    var bl4 = b4 & 0x1fff;
	    var bh4 = b4 >>> 13;
	    var b5 = b[5] | 0;
	    var bl5 = b5 & 0x1fff;
	    var bh5 = b5 >>> 13;
	    var b6 = b[6] | 0;
	    var bl6 = b6 & 0x1fff;
	    var bh6 = b6 >>> 13;
	    var b7 = b[7] | 0;
	    var bl7 = b7 & 0x1fff;
	    var bh7 = b7 >>> 13;
	    var b8 = b[8] | 0;
	    var bl8 = b8 & 0x1fff;
	    var bh8 = b8 >>> 13;
	    var b9 = b[9] | 0;
	    var bl9 = b9 & 0x1fff;
	    var bh9 = b9 >>> 13;

	    out.negative = self.negative ^ num.negative;
	    out.length = 19;
	    /* k = 0 */
	    lo = Math.imul(al0, bl0);
	    mid = Math.imul(al0, bh0);
	    mid = (mid + Math.imul(ah0, bl0)) | 0;
	    hi = Math.imul(ah0, bh0);
	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
	    w0 &= 0x3ffffff;
	    /* k = 1 */
	    lo = Math.imul(al1, bl0);
	    mid = Math.imul(al1, bh0);
	    mid = (mid + Math.imul(ah1, bl0)) | 0;
	    hi = Math.imul(ah1, bh0);
	    lo = (lo + Math.imul(al0, bl1)) | 0;
	    mid = (mid + Math.imul(al0, bh1)) | 0;
	    mid = (mid + Math.imul(ah0, bl1)) | 0;
	    hi = (hi + Math.imul(ah0, bh1)) | 0;
	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
	    w1 &= 0x3ffffff;
	    /* k = 2 */
	    lo = Math.imul(al2, bl0);
	    mid = Math.imul(al2, bh0);
	    mid = (mid + Math.imul(ah2, bl0)) | 0;
	    hi = Math.imul(ah2, bh0);
	    lo = (lo + Math.imul(al1, bl1)) | 0;
	    mid = (mid + Math.imul(al1, bh1)) | 0;
	    mid = (mid + Math.imul(ah1, bl1)) | 0;
	    hi = (hi + Math.imul(ah1, bh1)) | 0;
	    lo = (lo + Math.imul(al0, bl2)) | 0;
	    mid = (mid + Math.imul(al0, bh2)) | 0;
	    mid = (mid + Math.imul(ah0, bl2)) | 0;
	    hi = (hi + Math.imul(ah0, bh2)) | 0;
	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
	    w2 &= 0x3ffffff;
	    /* k = 3 */
	    lo = Math.imul(al3, bl0);
	    mid = Math.imul(al3, bh0);
	    mid = (mid + Math.imul(ah3, bl0)) | 0;
	    hi = Math.imul(ah3, bh0);
	    lo = (lo + Math.imul(al2, bl1)) | 0;
	    mid = (mid + Math.imul(al2, bh1)) | 0;
	    mid = (mid + Math.imul(ah2, bl1)) | 0;
	    hi = (hi + Math.imul(ah2, bh1)) | 0;
	    lo = (lo + Math.imul(al1, bl2)) | 0;
	    mid = (mid + Math.imul(al1, bh2)) | 0;
	    mid = (mid + Math.imul(ah1, bl2)) | 0;
	    hi = (hi + Math.imul(ah1, bh2)) | 0;
	    lo = (lo + Math.imul(al0, bl3)) | 0;
	    mid = (mid + Math.imul(al0, bh3)) | 0;
	    mid = (mid + Math.imul(ah0, bl3)) | 0;
	    hi = (hi + Math.imul(ah0, bh3)) | 0;
	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
	    w3 &= 0x3ffffff;
	    /* k = 4 */
	    lo = Math.imul(al4, bl0);
	    mid = Math.imul(al4, bh0);
	    mid = (mid + Math.imul(ah4, bl0)) | 0;
	    hi = Math.imul(ah4, bh0);
	    lo = (lo + Math.imul(al3, bl1)) | 0;
	    mid = (mid + Math.imul(al3, bh1)) | 0;
	    mid = (mid + Math.imul(ah3, bl1)) | 0;
	    hi = (hi + Math.imul(ah3, bh1)) | 0;
	    lo = (lo + Math.imul(al2, bl2)) | 0;
	    mid = (mid + Math.imul(al2, bh2)) | 0;
	    mid = (mid + Math.imul(ah2, bl2)) | 0;
	    hi = (hi + Math.imul(ah2, bh2)) | 0;
	    lo = (lo + Math.imul(al1, bl3)) | 0;
	    mid = (mid + Math.imul(al1, bh3)) | 0;
	    mid = (mid + Math.imul(ah1, bl3)) | 0;
	    hi = (hi + Math.imul(ah1, bh3)) | 0;
	    lo = (lo + Math.imul(al0, bl4)) | 0;
	    mid = (mid + Math.imul(al0, bh4)) | 0;
	    mid = (mid + Math.imul(ah0, bl4)) | 0;
	    hi = (hi + Math.imul(ah0, bh4)) | 0;
	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
	    w4 &= 0x3ffffff;
	    /* k = 5 */
	    lo = Math.imul(al5, bl0);
	    mid = Math.imul(al5, bh0);
	    mid = (mid + Math.imul(ah5, bl0)) | 0;
	    hi = Math.imul(ah5, bh0);
	    lo = (lo + Math.imul(al4, bl1)) | 0;
	    mid = (mid + Math.imul(al4, bh1)) | 0;
	    mid = (mid + Math.imul(ah4, bl1)) | 0;
	    hi = (hi + Math.imul(ah4, bh1)) | 0;
	    lo = (lo + Math.imul(al3, bl2)) | 0;
	    mid = (mid + Math.imul(al3, bh2)) | 0;
	    mid = (mid + Math.imul(ah3, bl2)) | 0;
	    hi = (hi + Math.imul(ah3, bh2)) | 0;
	    lo = (lo + Math.imul(al2, bl3)) | 0;
	    mid = (mid + Math.imul(al2, bh3)) | 0;
	    mid = (mid + Math.imul(ah2, bl3)) | 0;
	    hi = (hi + Math.imul(ah2, bh3)) | 0;
	    lo = (lo + Math.imul(al1, bl4)) | 0;
	    mid = (mid + Math.imul(al1, bh4)) | 0;
	    mid = (mid + Math.imul(ah1, bl4)) | 0;
	    hi = (hi + Math.imul(ah1, bh4)) | 0;
	    lo = (lo + Math.imul(al0, bl5)) | 0;
	    mid = (mid + Math.imul(al0, bh5)) | 0;
	    mid = (mid + Math.imul(ah0, bl5)) | 0;
	    hi = (hi + Math.imul(ah0, bh5)) | 0;
	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
	    w5 &= 0x3ffffff;
	    /* k = 6 */
	    lo = Math.imul(al6, bl0);
	    mid = Math.imul(al6, bh0);
	    mid = (mid + Math.imul(ah6, bl0)) | 0;
	    hi = Math.imul(ah6, bh0);
	    lo = (lo + Math.imul(al5, bl1)) | 0;
	    mid = (mid + Math.imul(al5, bh1)) | 0;
	    mid = (mid + Math.imul(ah5, bl1)) | 0;
	    hi = (hi + Math.imul(ah5, bh1)) | 0;
	    lo = (lo + Math.imul(al4, bl2)) | 0;
	    mid = (mid + Math.imul(al4, bh2)) | 0;
	    mid = (mid + Math.imul(ah4, bl2)) | 0;
	    hi = (hi + Math.imul(ah4, bh2)) | 0;
	    lo = (lo + Math.imul(al3, bl3)) | 0;
	    mid = (mid + Math.imul(al3, bh3)) | 0;
	    mid = (mid + Math.imul(ah3, bl3)) | 0;
	    hi = (hi + Math.imul(ah3, bh3)) | 0;
	    lo = (lo + Math.imul(al2, bl4)) | 0;
	    mid = (mid + Math.imul(al2, bh4)) | 0;
	    mid = (mid + Math.imul(ah2, bl4)) | 0;
	    hi = (hi + Math.imul(ah2, bh4)) | 0;
	    lo = (lo + Math.imul(al1, bl5)) | 0;
	    mid = (mid + Math.imul(al1, bh5)) | 0;
	    mid = (mid + Math.imul(ah1, bl5)) | 0;
	    hi = (hi + Math.imul(ah1, bh5)) | 0;
	    lo = (lo + Math.imul(al0, bl6)) | 0;
	    mid = (mid + Math.imul(al0, bh6)) | 0;
	    mid = (mid + Math.imul(ah0, bl6)) | 0;
	    hi = (hi + Math.imul(ah0, bh6)) | 0;
	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
	    w6 &= 0x3ffffff;
	    /* k = 7 */
	    lo = Math.imul(al7, bl0);
	    mid = Math.imul(al7, bh0);
	    mid = (mid + Math.imul(ah7, bl0)) | 0;
	    hi = Math.imul(ah7, bh0);
	    lo = (lo + Math.imul(al6, bl1)) | 0;
	    mid = (mid + Math.imul(al6, bh1)) | 0;
	    mid = (mid + Math.imul(ah6, bl1)) | 0;
	    hi = (hi + Math.imul(ah6, bh1)) | 0;
	    lo = (lo + Math.imul(al5, bl2)) | 0;
	    mid = (mid + Math.imul(al5, bh2)) | 0;
	    mid = (mid + Math.imul(ah5, bl2)) | 0;
	    hi = (hi + Math.imul(ah5, bh2)) | 0;
	    lo = (lo + Math.imul(al4, bl3)) | 0;
	    mid = (mid + Math.imul(al4, bh3)) | 0;
	    mid = (mid + Math.imul(ah4, bl3)) | 0;
	    hi = (hi + Math.imul(ah4, bh3)) | 0;
	    lo = (lo + Math.imul(al3, bl4)) | 0;
	    mid = (mid + Math.imul(al3, bh4)) | 0;
	    mid = (mid + Math.imul(ah3, bl4)) | 0;
	    hi = (hi + Math.imul(ah3, bh4)) | 0;
	    lo = (lo + Math.imul(al2, bl5)) | 0;
	    mid = (mid + Math.imul(al2, bh5)) | 0;
	    mid = (mid + Math.imul(ah2, bl5)) | 0;
	    hi = (hi + Math.imul(ah2, bh5)) | 0;
	    lo = (lo + Math.imul(al1, bl6)) | 0;
	    mid = (mid + Math.imul(al1, bh6)) | 0;
	    mid = (mid + Math.imul(ah1, bl6)) | 0;
	    hi = (hi + Math.imul(ah1, bh6)) | 0;
	    lo = (lo + Math.imul(al0, bl7)) | 0;
	    mid = (mid + Math.imul(al0, bh7)) | 0;
	    mid = (mid + Math.imul(ah0, bl7)) | 0;
	    hi = (hi + Math.imul(ah0, bh7)) | 0;
	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
	    w7 &= 0x3ffffff;
	    /* k = 8 */
	    lo = Math.imul(al8, bl0);
	    mid = Math.imul(al8, bh0);
	    mid = (mid + Math.imul(ah8, bl0)) | 0;
	    hi = Math.imul(ah8, bh0);
	    lo = (lo + Math.imul(al7, bl1)) | 0;
	    mid = (mid + Math.imul(al7, bh1)) | 0;
	    mid = (mid + Math.imul(ah7, bl1)) | 0;
	    hi = (hi + Math.imul(ah7, bh1)) | 0;
	    lo = (lo + Math.imul(al6, bl2)) | 0;
	    mid = (mid + Math.imul(al6, bh2)) | 0;
	    mid = (mid + Math.imul(ah6, bl2)) | 0;
	    hi = (hi + Math.imul(ah6, bh2)) | 0;
	    lo = (lo + Math.imul(al5, bl3)) | 0;
	    mid = (mid + Math.imul(al5, bh3)) | 0;
	    mid = (mid + Math.imul(ah5, bl3)) | 0;
	    hi = (hi + Math.imul(ah5, bh3)) | 0;
	    lo = (lo + Math.imul(al4, bl4)) | 0;
	    mid = (mid + Math.imul(al4, bh4)) | 0;
	    mid = (mid + Math.imul(ah4, bl4)) | 0;
	    hi = (hi + Math.imul(ah4, bh4)) | 0;
	    lo = (lo + Math.imul(al3, bl5)) | 0;
	    mid = (mid + Math.imul(al3, bh5)) | 0;
	    mid = (mid + Math.imul(ah3, bl5)) | 0;
	    hi = (hi + Math.imul(ah3, bh5)) | 0;
	    lo = (lo + Math.imul(al2, bl6)) | 0;
	    mid = (mid + Math.imul(al2, bh6)) | 0;
	    mid = (mid + Math.imul(ah2, bl6)) | 0;
	    hi = (hi + Math.imul(ah2, bh6)) | 0;
	    lo = (lo + Math.imul(al1, bl7)) | 0;
	    mid = (mid + Math.imul(al1, bh7)) | 0;
	    mid = (mid + Math.imul(ah1, bl7)) | 0;
	    hi = (hi + Math.imul(ah1, bh7)) | 0;
	    lo = (lo + Math.imul(al0, bl8)) | 0;
	    mid = (mid + Math.imul(al0, bh8)) | 0;
	    mid = (mid + Math.imul(ah0, bl8)) | 0;
	    hi = (hi + Math.imul(ah0, bh8)) | 0;
	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
	    w8 &= 0x3ffffff;
	    /* k = 9 */
	    lo = Math.imul(al9, bl0);
	    mid = Math.imul(al9, bh0);
	    mid = (mid + Math.imul(ah9, bl0)) | 0;
	    hi = Math.imul(ah9, bh0);
	    lo = (lo + Math.imul(al8, bl1)) | 0;
	    mid = (mid + Math.imul(al8, bh1)) | 0;
	    mid = (mid + Math.imul(ah8, bl1)) | 0;
	    hi = (hi + Math.imul(ah8, bh1)) | 0;
	    lo = (lo + Math.imul(al7, bl2)) | 0;
	    mid = (mid + Math.imul(al7, bh2)) | 0;
	    mid = (mid + Math.imul(ah7, bl2)) | 0;
	    hi = (hi + Math.imul(ah7, bh2)) | 0;
	    lo = (lo + Math.imul(al6, bl3)) | 0;
	    mid = (mid + Math.imul(al6, bh3)) | 0;
	    mid = (mid + Math.imul(ah6, bl3)) | 0;
	    hi = (hi + Math.imul(ah6, bh3)) | 0;
	    lo = (lo + Math.imul(al5, bl4)) | 0;
	    mid = (mid + Math.imul(al5, bh4)) | 0;
	    mid = (mid + Math.imul(ah5, bl4)) | 0;
	    hi = (hi + Math.imul(ah5, bh4)) | 0;
	    lo = (lo + Math.imul(al4, bl5)) | 0;
	    mid = (mid + Math.imul(al4, bh5)) | 0;
	    mid = (mid + Math.imul(ah4, bl5)) | 0;
	    hi = (hi + Math.imul(ah4, bh5)) | 0;
	    lo = (lo + Math.imul(al3, bl6)) | 0;
	    mid = (mid + Math.imul(al3, bh6)) | 0;
	    mid = (mid + Math.imul(ah3, bl6)) | 0;
	    hi = (hi + Math.imul(ah3, bh6)) | 0;
	    lo = (lo + Math.imul(al2, bl7)) | 0;
	    mid = (mid + Math.imul(al2, bh7)) | 0;
	    mid = (mid + Math.imul(ah2, bl7)) | 0;
	    hi = (hi + Math.imul(ah2, bh7)) | 0;
	    lo = (lo + Math.imul(al1, bl8)) | 0;
	    mid = (mid + Math.imul(al1, bh8)) | 0;
	    mid = (mid + Math.imul(ah1, bl8)) | 0;
	    hi = (hi + Math.imul(ah1, bh8)) | 0;
	    lo = (lo + Math.imul(al0, bl9)) | 0;
	    mid = (mid + Math.imul(al0, bh9)) | 0;
	    mid = (mid + Math.imul(ah0, bl9)) | 0;
	    hi = (hi + Math.imul(ah0, bh9)) | 0;
	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
	    w9 &= 0x3ffffff;
	    /* k = 10 */
	    lo = Math.imul(al9, bl1);
	    mid = Math.imul(al9, bh1);
	    mid = (mid + Math.imul(ah9, bl1)) | 0;
	    hi = Math.imul(ah9, bh1);
	    lo = (lo + Math.imul(al8, bl2)) | 0;
	    mid = (mid + Math.imul(al8, bh2)) | 0;
	    mid = (mid + Math.imul(ah8, bl2)) | 0;
	    hi = (hi + Math.imul(ah8, bh2)) | 0;
	    lo = (lo + Math.imul(al7, bl3)) | 0;
	    mid = (mid + Math.imul(al7, bh3)) | 0;
	    mid = (mid + Math.imul(ah7, bl3)) | 0;
	    hi = (hi + Math.imul(ah7, bh3)) | 0;
	    lo = (lo + Math.imul(al6, bl4)) | 0;
	    mid = (mid + Math.imul(al6, bh4)) | 0;
	    mid = (mid + Math.imul(ah6, bl4)) | 0;
	    hi = (hi + Math.imul(ah6, bh4)) | 0;
	    lo = (lo + Math.imul(al5, bl5)) | 0;
	    mid = (mid + Math.imul(al5, bh5)) | 0;
	    mid = (mid + Math.imul(ah5, bl5)) | 0;
	    hi = (hi + Math.imul(ah5, bh5)) | 0;
	    lo = (lo + Math.imul(al4, bl6)) | 0;
	    mid = (mid + Math.imul(al4, bh6)) | 0;
	    mid = (mid + Math.imul(ah4, bl6)) | 0;
	    hi = (hi + Math.imul(ah4, bh6)) | 0;
	    lo = (lo + Math.imul(al3, bl7)) | 0;
	    mid = (mid + Math.imul(al3, bh7)) | 0;
	    mid = (mid + Math.imul(ah3, bl7)) | 0;
	    hi = (hi + Math.imul(ah3, bh7)) | 0;
	    lo = (lo + Math.imul(al2, bl8)) | 0;
	    mid = (mid + Math.imul(al2, bh8)) | 0;
	    mid = (mid + Math.imul(ah2, bl8)) | 0;
	    hi = (hi + Math.imul(ah2, bh8)) | 0;
	    lo = (lo + Math.imul(al1, bl9)) | 0;
	    mid = (mid + Math.imul(al1, bh9)) | 0;
	    mid = (mid + Math.imul(ah1, bl9)) | 0;
	    hi = (hi + Math.imul(ah1, bh9)) | 0;
	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
	    w10 &= 0x3ffffff;
	    /* k = 11 */
	    lo = Math.imul(al9, bl2);
	    mid = Math.imul(al9, bh2);
	    mid = (mid + Math.imul(ah9, bl2)) | 0;
	    hi = Math.imul(ah9, bh2);
	    lo = (lo + Math.imul(al8, bl3)) | 0;
	    mid = (mid + Math.imul(al8, bh3)) | 0;
	    mid = (mid + Math.imul(ah8, bl3)) | 0;
	    hi = (hi + Math.imul(ah8, bh3)) | 0;
	    lo = (lo + Math.imul(al7, bl4)) | 0;
	    mid = (mid + Math.imul(al7, bh4)) | 0;
	    mid = (mid + Math.imul(ah7, bl4)) | 0;
	    hi = (hi + Math.imul(ah7, bh4)) | 0;
	    lo = (lo + Math.imul(al6, bl5)) | 0;
	    mid = (mid + Math.imul(al6, bh5)) | 0;
	    mid = (mid + Math.imul(ah6, bl5)) | 0;
	    hi = (hi + Math.imul(ah6, bh5)) | 0;
	    lo = (lo + Math.imul(al5, bl6)) | 0;
	    mid = (mid + Math.imul(al5, bh6)) | 0;
	    mid = (mid + Math.imul(ah5, bl6)) | 0;
	    hi = (hi + Math.imul(ah5, bh6)) | 0;
	    lo = (lo + Math.imul(al4, bl7)) | 0;
	    mid = (mid + Math.imul(al4, bh7)) | 0;
	    mid = (mid + Math.imul(ah4, bl7)) | 0;
	    hi = (hi + Math.imul(ah4, bh7)) | 0;
	    lo = (lo + Math.imul(al3, bl8)) | 0;
	    mid = (mid + Math.imul(al3, bh8)) | 0;
	    mid = (mid + Math.imul(ah3, bl8)) | 0;
	    hi = (hi + Math.imul(ah3, bh8)) | 0;
	    lo = (lo + Math.imul(al2, bl9)) | 0;
	    mid = (mid + Math.imul(al2, bh9)) | 0;
	    mid = (mid + Math.imul(ah2, bl9)) | 0;
	    hi = (hi + Math.imul(ah2, bh9)) | 0;
	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
	    w11 &= 0x3ffffff;
	    /* k = 12 */
	    lo = Math.imul(al9, bl3);
	    mid = Math.imul(al9, bh3);
	    mid = (mid + Math.imul(ah9, bl3)) | 0;
	    hi = Math.imul(ah9, bh3);
	    lo = (lo + Math.imul(al8, bl4)) | 0;
	    mid = (mid + Math.imul(al8, bh4)) | 0;
	    mid = (mid + Math.imul(ah8, bl4)) | 0;
	    hi = (hi + Math.imul(ah8, bh4)) | 0;
	    lo = (lo + Math.imul(al7, bl5)) | 0;
	    mid = (mid + Math.imul(al7, bh5)) | 0;
	    mid = (mid + Math.imul(ah7, bl5)) | 0;
	    hi = (hi + Math.imul(ah7, bh5)) | 0;
	    lo = (lo + Math.imul(al6, bl6)) | 0;
	    mid = (mid + Math.imul(al6, bh6)) | 0;
	    mid = (mid + Math.imul(ah6, bl6)) | 0;
	    hi = (hi + Math.imul(ah6, bh6)) | 0;
	    lo = (lo + Math.imul(al5, bl7)) | 0;
	    mid = (mid + Math.imul(al5, bh7)) | 0;
	    mid = (mid + Math.imul(ah5, bl7)) | 0;
	    hi = (hi + Math.imul(ah5, bh7)) | 0;
	    lo = (lo + Math.imul(al4, bl8)) | 0;
	    mid = (mid + Math.imul(al4, bh8)) | 0;
	    mid = (mid + Math.imul(ah4, bl8)) | 0;
	    hi = (hi + Math.imul(ah4, bh8)) | 0;
	    lo = (lo + Math.imul(al3, bl9)) | 0;
	    mid = (mid + Math.imul(al3, bh9)) | 0;
	    mid = (mid + Math.imul(ah3, bl9)) | 0;
	    hi = (hi + Math.imul(ah3, bh9)) | 0;
	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
	    w12 &= 0x3ffffff;
	    /* k = 13 */
	    lo = Math.imul(al9, bl4);
	    mid = Math.imul(al9, bh4);
	    mid = (mid + Math.imul(ah9, bl4)) | 0;
	    hi = Math.imul(ah9, bh4);
	    lo = (lo + Math.imul(al8, bl5)) | 0;
	    mid = (mid + Math.imul(al8, bh5)) | 0;
	    mid = (mid + Math.imul(ah8, bl5)) | 0;
	    hi = (hi + Math.imul(ah8, bh5)) | 0;
	    lo = (lo + Math.imul(al7, bl6)) | 0;
	    mid = (mid + Math.imul(al7, bh6)) | 0;
	    mid = (mid + Math.imul(ah7, bl6)) | 0;
	    hi = (hi + Math.imul(ah7, bh6)) | 0;
	    lo = (lo + Math.imul(al6, bl7)) | 0;
	    mid = (mid + Math.imul(al6, bh7)) | 0;
	    mid = (mid + Math.imul(ah6, bl7)) | 0;
	    hi = (hi + Math.imul(ah6, bh7)) | 0;
	    lo = (lo + Math.imul(al5, bl8)) | 0;
	    mid = (mid + Math.imul(al5, bh8)) | 0;
	    mid = (mid + Math.imul(ah5, bl8)) | 0;
	    hi = (hi + Math.imul(ah5, bh8)) | 0;
	    lo = (lo + Math.imul(al4, bl9)) | 0;
	    mid = (mid + Math.imul(al4, bh9)) | 0;
	    mid = (mid + Math.imul(ah4, bl9)) | 0;
	    hi = (hi + Math.imul(ah4, bh9)) | 0;
	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
	    w13 &= 0x3ffffff;
	    /* k = 14 */
	    lo = Math.imul(al9, bl5);
	    mid = Math.imul(al9, bh5);
	    mid = (mid + Math.imul(ah9, bl5)) | 0;
	    hi = Math.imul(ah9, bh5);
	    lo = (lo + Math.imul(al8, bl6)) | 0;
	    mid = (mid + Math.imul(al8, bh6)) | 0;
	    mid = (mid + Math.imul(ah8, bl6)) | 0;
	    hi = (hi + Math.imul(ah8, bh6)) | 0;
	    lo = (lo + Math.imul(al7, bl7)) | 0;
	    mid = (mid + Math.imul(al7, bh7)) | 0;
	    mid = (mid + Math.imul(ah7, bl7)) | 0;
	    hi = (hi + Math.imul(ah7, bh7)) | 0;
	    lo = (lo + Math.imul(al6, bl8)) | 0;
	    mid = (mid + Math.imul(al6, bh8)) | 0;
	    mid = (mid + Math.imul(ah6, bl8)) | 0;
	    hi = (hi + Math.imul(ah6, bh8)) | 0;
	    lo = (lo + Math.imul(al5, bl9)) | 0;
	    mid = (mid + Math.imul(al5, bh9)) | 0;
	    mid = (mid + Math.imul(ah5, bl9)) | 0;
	    hi = (hi + Math.imul(ah5, bh9)) | 0;
	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
	    w14 &= 0x3ffffff;
	    /* k = 15 */
	    lo = Math.imul(al9, bl6);
	    mid = Math.imul(al9, bh6);
	    mid = (mid + Math.imul(ah9, bl6)) | 0;
	    hi = Math.imul(ah9, bh6);
	    lo = (lo + Math.imul(al8, bl7)) | 0;
	    mid = (mid + Math.imul(al8, bh7)) | 0;
	    mid = (mid + Math.imul(ah8, bl7)) | 0;
	    hi = (hi + Math.imul(ah8, bh7)) | 0;
	    lo = (lo + Math.imul(al7, bl8)) | 0;
	    mid = (mid + Math.imul(al7, bh8)) | 0;
	    mid = (mid + Math.imul(ah7, bl8)) | 0;
	    hi = (hi + Math.imul(ah7, bh8)) | 0;
	    lo = (lo + Math.imul(al6, bl9)) | 0;
	    mid = (mid + Math.imul(al6, bh9)) | 0;
	    mid = (mid + Math.imul(ah6, bl9)) | 0;
	    hi = (hi + Math.imul(ah6, bh9)) | 0;
	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
	    w15 &= 0x3ffffff;
	    /* k = 16 */
	    lo = Math.imul(al9, bl7);
	    mid = Math.imul(al9, bh7);
	    mid = (mid + Math.imul(ah9, bl7)) | 0;
	    hi = Math.imul(ah9, bh7);
	    lo = (lo + Math.imul(al8, bl8)) | 0;
	    mid = (mid + Math.imul(al8, bh8)) | 0;
	    mid = (mid + Math.imul(ah8, bl8)) | 0;
	    hi = (hi + Math.imul(ah8, bh8)) | 0;
	    lo = (lo + Math.imul(al7, bl9)) | 0;
	    mid = (mid + Math.imul(al7, bh9)) | 0;
	    mid = (mid + Math.imul(ah7, bl9)) | 0;
	    hi = (hi + Math.imul(ah7, bh9)) | 0;
	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
	    w16 &= 0x3ffffff;
	    /* k = 17 */
	    lo = Math.imul(al9, bl8);
	    mid = Math.imul(al9, bh8);
	    mid = (mid + Math.imul(ah9, bl8)) | 0;
	    hi = Math.imul(ah9, bh8);
	    lo = (lo + Math.imul(al8, bl9)) | 0;
	    mid = (mid + Math.imul(al8, bh9)) | 0;
	    mid = (mid + Math.imul(ah8, bl9)) | 0;
	    hi = (hi + Math.imul(ah8, bh9)) | 0;
	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
	    w17 &= 0x3ffffff;
	    /* k = 18 */
	    lo = Math.imul(al9, bl9);
	    mid = Math.imul(al9, bh9);
	    mid = (mid + Math.imul(ah9, bl9)) | 0;
	    hi = Math.imul(ah9, bh9);
	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
	    w18 &= 0x3ffffff;
	    o[0] = w0;
	    o[1] = w1;
	    o[2] = w2;
	    o[3] = w3;
	    o[4] = w4;
	    o[5] = w5;
	    o[6] = w6;
	    o[7] = w7;
	    o[8] = w8;
	    o[9] = w9;
	    o[10] = w10;
	    o[11] = w11;
	    o[12] = w12;
	    o[13] = w13;
	    o[14] = w14;
	    o[15] = w15;
	    o[16] = w16;
	    o[17] = w17;
	    o[18] = w18;
	    if (c !== 0) {
	      o[19] = c;
	      out.length++;
	    }
	    return out;
	  };

	  // Polyfill comb
	  if (!Math.imul) {
	    comb10MulTo = smallMulTo;
	  }

	  function bigMulTo (self, num, out) {
	    out.negative = num.negative ^ self.negative;
	    out.length = self.length + num.length;

	    var carry = 0;
	    var hncarry = 0;
	    for (var k = 0; k < out.length - 1; k++) {
	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
	      // note that ncarry could be >= 0x3ffffff
	      var ncarry = hncarry;
	      hncarry = 0;
	      var rword = carry & 0x3ffffff;
	      var maxJ = Math.min(k, num.length - 1);
	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
	        var i = k - j;
	        var a = self.words[i] | 0;
	        var b = num.words[j] | 0;
	        var r = a * b;

	        var lo = r & 0x3ffffff;
	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
	        lo = (lo + rword) | 0;
	        rword = lo & 0x3ffffff;
	        ncarry = (ncarry + (lo >>> 26)) | 0;

	        hncarry += ncarry >>> 26;
	        ncarry &= 0x3ffffff;
	      }
	      out.words[k] = rword;
	      carry = ncarry;
	      ncarry = hncarry;
	    }
	    if (carry !== 0) {
	      out.words[k] = carry;
	    } else {
	      out.length--;
	    }

	    return out.strip();
	  }

	  function jumboMulTo (self, num, out) {
	    var fftm = new FFTM();
	    return fftm.mulp(self, num, out);
	  }

	  BN.prototype.mulTo = function mulTo (num, out) {
	    var res;
	    var len = this.length + num.length;
	    if (this.length === 10 && num.length === 10) {
	      res = comb10MulTo(this, num, out);
	    } else if (len < 63) {
	      res = smallMulTo(this, num, out);
	    } else if (len < 1024) {
	      res = bigMulTo(this, num, out);
	    } else {
	      res = jumboMulTo(this, num, out);
	    }

	    return res;
	  };

	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion

	  function FFTM (x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  FFTM.prototype.makeRBT = function makeRBT (N) {
	    var t = new Array(N);
	    var l = BN.prototype._countBits(N) - 1;
	    for (var i = 0; i < N; i++) {
	      t[i] = this.revBin(i, l, N);
	    }

	    return t;
	  };

	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
	    if (x === 0 || x === N - 1) return x;

	    var rb = 0;
	    for (var i = 0; i < l; i++) {
	      rb |= (x & 1) << (l - i - 1);
	      x >>= 1;
	    }

	    return rb;
	  };

	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
	    for (var i = 0; i < N; i++) {
	      rtws[i] = rws[rbt[i]];
	      itws[i] = iws[rbt[i]];
	    }
	  };

	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
	    this.permute(rbt, rws, iws, rtws, itws, N);

	    for (var s = 1; s < N; s <<= 1) {
	      var l = s << 1;

	      var rtwdf = Math.cos(2 * Math.PI / l);
	      var itwdf = Math.sin(2 * Math.PI / l);

	      for (var p = 0; p < N; p += l) {
	        var rtwdf_ = rtwdf;
	        var itwdf_ = itwdf;

	        for (var j = 0; j < s; j++) {
	          var re = rtws[p + j];
	          var ie = itws[p + j];

	          var ro = rtws[p + j + s];
	          var io = itws[p + j + s];

	          var rx = rtwdf_ * ro - itwdf_ * io;

	          io = rtwdf_ * io + itwdf_ * ro;
	          ro = rx;

	          rtws[p + j] = re + ro;
	          itws[p + j] = ie + io;

	          rtws[p + j + s] = re - ro;
	          itws[p + j + s] = ie - io;

	          /* jshint maxdepth : false */
	          if (j !== l) {
	            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

	            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
	            rtwdf_ = rx;
	          }
	        }
	      }
	    }
	  };

	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
	    var N = Math.max(m, n) | 1;
	    var odd = N & 1;
	    var i = 0;
	    for (N = N / 2 | 0; N; N = N >>> 1) {
	      i++;
	    }

	    return 1 << i + 1 + odd;
	  };

	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
	    if (N <= 1) return;

	    for (var i = 0; i < N / 2; i++) {
	      var t = rws[i];

	      rws[i] = rws[N - i - 1];
	      rws[N - i - 1] = t;

	      t = iws[i];

	      iws[i] = -iws[N - i - 1];
	      iws[N - i - 1] = -t;
	    }
	  };

	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
	    var carry = 0;
	    for (var i = 0; i < N / 2; i++) {
	      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
	        Math.round(ws[2 * i] / N) +
	        carry;

	      ws[i] = w & 0x3ffffff;

	      if (w < 0x4000000) {
	        carry = 0;
	      } else {
	        carry = w / 0x4000000 | 0;
	      }
	    }

	    return ws;
	  };

	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
	    var carry = 0;
	    for (var i = 0; i < len; i++) {
	      carry = carry + (ws[i] | 0);

	      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
	      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
	    }

	    // Pad with zeroes
	    for (i = 2 * len; i < N; ++i) {
	      rws[i] = 0;
	    }

	    assert$$1(carry === 0);
	    assert$$1((carry & ~0x1fff) === 0);
	  };

	  FFTM.prototype.stub = function stub (N) {
	    var ph = new Array(N);
	    for (var i = 0; i < N; i++) {
	      ph[i] = 0;
	    }

	    return ph;
	  };

	  FFTM.prototype.mulp = function mulp (x, y, out) {
	    var N = 2 * this.guessLen13b(x.length, y.length);

	    var rbt = this.makeRBT(N);

	    var _ = this.stub(N);

	    var rws = new Array(N);
	    var rwst = new Array(N);
	    var iwst = new Array(N);

	    var nrws = new Array(N);
	    var nrwst = new Array(N);
	    var niwst = new Array(N);

	    var rmws = out.words;
	    rmws.length = N;

	    this.convert13b(x.words, x.length, rws, N);
	    this.convert13b(y.words, y.length, nrws, N);

	    this.transform(rws, _, rwst, iwst, N, rbt);
	    this.transform(nrws, _, nrwst, niwst, N, rbt);

	    for (var i = 0; i < N; i++) {
	      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
	      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
	      rwst[i] = rx;
	    }

	    this.conjugate(rwst, iwst, N);
	    this.transform(rwst, iwst, rmws, _, N, rbt);
	    this.conjugate(rmws, _, N);
	    this.normalize13b(rmws, N);

	    out.negative = x.negative ^ y.negative;
	    out.length = x.length + y.length;
	    return out.strip();
	  };

	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return this.mulTo(num, out);
	  };

	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
	    var out = new BN(null);
	    out.words = new Array(this.length + num.length);
	    return jumboMulTo(this, num, out);
	  };

	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
	    return this.clone().mulTo(num, this);
	  };

	  BN.prototype.imuln = function imuln (num) {
	    assert$$1(typeof num === 'number');
	    assert$$1(num < 0x4000000);

	    // Carry
	    var carry = 0;
	    for (var i = 0; i < this.length; i++) {
	      var w = (this.words[i] | 0) * num;
	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
	      carry >>= 26;
	      carry += (w / 0x4000000) | 0;
	      // NOTE: lo is 27bit maximum
	      carry += lo >>> 26;
	      this.words[i] = lo & 0x3ffffff;
	    }

	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }

	    return this;
	  };

	  BN.prototype.muln = function muln (num) {
	    return this.clone().imuln(num);
	  };

	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
	    return this.mul(this);
	  };

	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
	    return this.imul(this.clone());
	  };

	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
	    var w = toBitArray(num);
	    if (w.length === 0) return new BN(1);

	    // Skip leading zeroes
	    var res = this;
	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
	      if (w[i] !== 0) break;
	    }

	    if (++i < w.length) {
	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
	        if (w[i] === 0) continue;

	        res = res.mul(q);
	      }
	    }

	    return res;
	  };

	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
	    assert$$1(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;
	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
	    var i;

	    if (r !== 0) {
	      var carry = 0;

	      for (i = 0; i < this.length; i++) {
	        var newCarry = this.words[i] & carryMask;
	        var c = ((this.words[i] | 0) - newCarry) << r;
	        this.words[i] = c | carry;
	        carry = newCarry >>> (26 - r);
	      }

	      if (carry) {
	        this.words[i] = carry;
	        this.length++;
	      }
	    }

	    if (s !== 0) {
	      for (i = this.length - 1; i >= 0; i--) {
	        this.words[i + s] = this.words[i];
	      }

	      for (i = 0; i < s; i++) {
	        this.words[i] = 0;
	      }

	      this.length += s;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishln = function ishln (bits) {
	    // TODO(indutny): implement me
	    assert$$1(this.negative === 0);
	    return this.iushln(bits);
	  };

	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
	    assert$$1(typeof bits === 'number' && bits >= 0);
	    var h;
	    if (hint) {
	      h = (hint - (hint % 26)) / 26;
	    } else {
	      h = 0;
	    }

	    var r = bits % 26;
	    var s = Math.min((bits - r) / 26, this.length);
	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	    var maskedWords = extended;

	    h -= s;
	    h = Math.max(0, h);

	    // Extended mode, copy masked part
	    if (maskedWords) {
	      for (var i = 0; i < s; i++) {
	        maskedWords.words[i] = this.words[i];
	      }
	      maskedWords.length = s;
	    }

	    if (s === 0) ; else if (this.length > s) {
	      this.length -= s;
	      for (i = 0; i < this.length; i++) {
	        this.words[i] = this.words[i + s];
	      }
	    } else {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    var carry = 0;
	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
	      var word = this.words[i] | 0;
	      this.words[i] = (carry << (26 - r)) | (word >>> r);
	      carry = word & mask;
	    }

	    // Push carried bits as a mask
	    if (maskedWords && carry !== 0) {
	      maskedWords.words[maskedWords.length++] = carry;
	    }

	    if (this.length === 0) {
	      this.words[0] = 0;
	      this.length = 1;
	    }

	    return this.strip();
	  };

	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
	    // TODO(indutny): implement me
	    assert$$1(this.negative === 0);
	    return this.iushrn(bits, hint, extended);
	  };

	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
	    return this.clone().ishln(bits);
	  };

	  BN.prototype.ushln = function ushln (bits) {
	    return this.clone().iushln(bits);
	  };

	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
	    return this.clone().ishrn(bits);
	  };

	  BN.prototype.ushrn = function ushrn (bits) {
	    return this.clone().iushrn(bits);
	  };

	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
	    assert$$1(typeof bit === 'number' && bit >= 0);
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) return false;

	    // Check bit and return
	    var w = this.words[s];

	    return !!(w & q);
	  };

	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
	    assert$$1(typeof bits === 'number' && bits >= 0);
	    var r = bits % 26;
	    var s = (bits - r) / 26;

	    assert$$1(this.negative === 0, 'imaskn works only with positive numbers');

	    if (this.length <= s) {
	      return this;
	    }

	    if (r !== 0) {
	      s++;
	    }
	    this.length = Math.min(s, this.length);

	    if (r !== 0) {
	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
	      this.words[this.length - 1] &= mask;
	    }

	    return this.strip();
	  };

	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
	    return this.clone().imaskn(bits);
	  };

	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
	    assert$$1(typeof num === 'number');
	    assert$$1(num < 0x4000000);
	    if (num < 0) return this.isubn(-num);

	    // Possible sign change
	    if (this.negative !== 0) {
	      if (this.length === 1 && (this.words[0] | 0) < num) {
	        this.words[0] = num - (this.words[0] | 0);
	        this.negative = 0;
	        return this;
	      }

	      this.negative = 0;
	      this.isubn(num);
	      this.negative = 1;
	      return this;
	    }

	    // Add without checks
	    return this._iaddn(num);
	  };

	  BN.prototype._iaddn = function _iaddn (num) {
	    this.words[0] += num;

	    // Carry
	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
	      this.words[i] -= 0x4000000;
	      if (i === this.length - 1) {
	        this.words[i + 1] = 1;
	      } else {
	        this.words[i + 1]++;
	      }
	    }
	    this.length = Math.max(this.length, i + 1);

	    return this;
	  };

	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
	    assert$$1(typeof num === 'number');
	    assert$$1(num < 0x4000000);
	    if (num < 0) return this.iaddn(-num);

	    if (this.negative !== 0) {
	      this.negative = 0;
	      this.iaddn(num);
	      this.negative = 1;
	      return this;
	    }

	    this.words[0] -= num;

	    if (this.length === 1 && this.words[0] < 0) {
	      this.words[0] = -this.words[0];
	      this.negative = 1;
	    } else {
	      // Carry
	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
	        this.words[i] += 0x4000000;
	        this.words[i + 1] -= 1;
	      }
	    }

	    return this.strip();
	  };

	  BN.prototype.addn = function addn (num) {
	    return this.clone().iaddn(num);
	  };

	  BN.prototype.subn = function subn (num) {
	    return this.clone().isubn(num);
	  };

	  BN.prototype.iabs = function iabs () {
	    this.negative = 0;

	    return this;
	  };

	  BN.prototype.abs = function abs () {
	    return this.clone().iabs();
	  };

	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
	    var len = num.length + shift;
	    var i;

	    this._expand(len);

	    var w;
	    var carry = 0;
	    for (i = 0; i < num.length; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      var right = (num.words[i] | 0) * mul;
	      w -= right & 0x3ffffff;
	      carry = (w >> 26) - ((right / 0x4000000) | 0);
	      this.words[i + shift] = w & 0x3ffffff;
	    }
	    for (; i < this.length - shift; i++) {
	      w = (this.words[i + shift] | 0) + carry;
	      carry = w >> 26;
	      this.words[i + shift] = w & 0x3ffffff;
	    }

	    if (carry === 0) return this.strip();

	    // Subtraction overflow
	    assert$$1(carry === -1);
	    carry = 0;
	    for (i = 0; i < this.length; i++) {
	      w = -(this.words[i] | 0) + carry;
	      carry = w >> 26;
	      this.words[i] = w & 0x3ffffff;
	    }
	    this.negative = 1;

	    return this.strip();
	  };

	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
	    var shift = this.length - num.length;

	    var a = this.clone();
	    var b = num;

	    // Normalize
	    var bhi = b.words[b.length - 1] | 0;
	    var bhiBits = this._countBits(bhi);
	    shift = 26 - bhiBits;
	    if (shift !== 0) {
	      b = b.ushln(shift);
	      a.iushln(shift);
	      bhi = b.words[b.length - 1] | 0;
	    }

	    // Initialize quotient
	    var m = a.length - b.length;
	    var q;

	    if (mode !== 'mod') {
	      q = new BN(null);
	      q.length = m + 1;
	      q.words = new Array(q.length);
	      for (var i = 0; i < q.length; i++) {
	        q.words[i] = 0;
	      }
	    }

	    var diff = a.clone()._ishlnsubmul(b, 1, m);
	    if (diff.negative === 0) {
	      a = diff;
	      if (q) {
	        q.words[m] = 1;
	      }
	    }

	    for (var j = m - 1; j >= 0; j--) {
	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
	        (a.words[b.length + j - 1] | 0);

	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
	      // (0x7ffffff)
	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

	      a._ishlnsubmul(b, qj, j);
	      while (a.negative !== 0) {
	        qj--;
	        a.negative = 0;
	        a._ishlnsubmul(b, 1, j);
	        if (!a.isZero()) {
	          a.negative ^= 1;
	        }
	      }
	      if (q) {
	        q.words[j] = qj;
	      }
	    }
	    if (q) {
	      q.strip();
	    }
	    a.strip();

	    // Denormalize
	    if (mode !== 'div' && shift !== 0) {
	      a.iushrn(shift);
	    }

	    return {
	      div: q || null,
	      mod: a
	    };
	  };

	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
	    assert$$1(!num.isZero());

	    if (this.isZero()) {
	      return {
	        div: new BN(0),
	        mod: new BN(0)
	      };
	    }

	    var div, mod, res;
	    if (this.negative !== 0 && num.negative === 0) {
	      res = this.neg().divmod(num, mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.iadd(num);
	        }
	      }

	      return {
	        div: div,
	        mod: mod
	      };
	    }

	    if (this.negative === 0 && num.negative !== 0) {
	      res = this.divmod(num.neg(), mode);

	      if (mode !== 'mod') {
	        div = res.div.neg();
	      }

	      return {
	        div: div,
	        mod: res.mod
	      };
	    }

	    if ((this.negative & num.negative) !== 0) {
	      res = this.neg().divmod(num.neg(), mode);

	      if (mode !== 'div') {
	        mod = res.mod.neg();
	        if (positive && mod.negative !== 0) {
	          mod.isub(num);
	        }
	      }

	      return {
	        div: res.div,
	        mod: mod
	      };
	    }

	    // Both numbers are positive at this point

	    // Strip both numbers to approximate shift value
	    if (num.length > this.length || this.cmp(num) < 0) {
	      return {
	        div: new BN(0),
	        mod: this
	      };
	    }

	    // Very short reduction
	    if (num.length === 1) {
	      if (mode === 'div') {
	        return {
	          div: this.divn(num.words[0]),
	          mod: null
	        };
	      }

	      if (mode === 'mod') {
	        return {
	          div: null,
	          mod: new BN(this.modn(num.words[0]))
	        };
	      }

	      return {
	        div: this.divn(num.words[0]),
	        mod: new BN(this.modn(num.words[0]))
	      };
	    }

	    return this._wordDiv(num, mode);
	  };

	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
	    return this.divmod(num, 'div', false).div;
	  };

	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
	    return this.divmod(num, 'mod', false).mod;
	  };

	  BN.prototype.umod = function umod (num) {
	    return this.divmod(num, 'mod', true).mod;
	  };

	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
	    var dm = this.divmod(num);

	    // Fast case - exact division
	    if (dm.mod.isZero()) return dm.div;

	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

	    var half = num.ushrn(1);
	    var r2 = num.andln(1);
	    var cmp = mod.cmp(half);

	    // Round down
	    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

	    // Round up
	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };

	  BN.prototype.modn = function modn (num) {
	    assert$$1(num <= 0x3ffffff);
	    var p = (1 << 26) % num;

	    var acc = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      acc = (p * acc + (this.words[i] | 0)) % num;
	    }

	    return acc;
	  };

	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
	    assert$$1(num <= 0x3ffffff);

	    var carry = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var w = (this.words[i] | 0) + carry * 0x4000000;
	      this.words[i] = (w / num) | 0;
	      carry = w % num;
	    }

	    return this.strip();
	  };

	  BN.prototype.divn = function divn (num) {
	    return this.clone().idivn(num);
	  };

	  BN.prototype.egcd = function egcd (p) {
	    assert$$1(p.negative === 0);
	    assert$$1(!p.isZero());

	    var x = this;
	    var y = p.clone();

	    if (x.negative !== 0) {
	      x = x.umod(p);
	    } else {
	      x = x.clone();
	    }

	    // A * x + B * y = x
	    var A = new BN(1);
	    var B = new BN(0);

	    // C * x + D * y = y
	    var C = new BN(0);
	    var D = new BN(1);

	    var g = 0;

	    while (x.isEven() && y.isEven()) {
	      x.iushrn(1);
	      y.iushrn(1);
	      ++g;
	    }

	    var yp = y.clone();
	    var xp = x.clone();

	    while (!x.isZero()) {
	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        x.iushrn(i);
	        while (i-- > 0) {
	          if (A.isOdd() || B.isOdd()) {
	            A.iadd(yp);
	            B.isub(xp);
	          }

	          A.iushrn(1);
	          B.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        y.iushrn(j);
	        while (j-- > 0) {
	          if (C.isOdd() || D.isOdd()) {
	            C.iadd(yp);
	            D.isub(xp);
	          }

	          C.iushrn(1);
	          D.iushrn(1);
	        }
	      }

	      if (x.cmp(y) >= 0) {
	        x.isub(y);
	        A.isub(C);
	        B.isub(D);
	      } else {
	        y.isub(x);
	        C.isub(A);
	        D.isub(B);
	      }
	    }

	    return {
	      a: C,
	      b: D,
	      gcd: y.iushln(g)
	    };
	  };

	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
	    assert$$1(p.negative === 0);
	    assert$$1(!p.isZero());

	    var a = this;
	    var b = p.clone();

	    if (a.negative !== 0) {
	      a = a.umod(p);
	    } else {
	      a = a.clone();
	    }

	    var x1 = new BN(1);
	    var x2 = new BN(0);

	    var delta = b.clone();

	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
	      if (i > 0) {
	        a.iushrn(i);
	        while (i-- > 0) {
	          if (x1.isOdd()) {
	            x1.iadd(delta);
	          }

	          x1.iushrn(1);
	        }
	      }

	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
	      if (j > 0) {
	        b.iushrn(j);
	        while (j-- > 0) {
	          if (x2.isOdd()) {
	            x2.iadd(delta);
	          }

	          x2.iushrn(1);
	        }
	      }

	      if (a.cmp(b) >= 0) {
	        a.isub(b);
	        x1.isub(x2);
	      } else {
	        b.isub(a);
	        x2.isub(x1);
	      }
	    }

	    var res;
	    if (a.cmpn(1) === 0) {
	      res = x1;
	    } else {
	      res = x2;
	    }

	    if (res.cmpn(0) < 0) {
	      res.iadd(p);
	    }

	    return res;
	  };

	  BN.prototype.gcd = function gcd (num) {
	    if (this.isZero()) return num.abs();
	    if (num.isZero()) return this.abs();

	    var a = this.clone();
	    var b = num.clone();
	    a.negative = 0;
	    b.negative = 0;

	    // Remove common factor of two
	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
	      a.iushrn(1);
	      b.iushrn(1);
	    }

	    do {
	      while (a.isEven()) {
	        a.iushrn(1);
	      }
	      while (b.isEven()) {
	        b.iushrn(1);
	      }

	      var r = a.cmp(b);
	      if (r < 0) {
	        // Swap `a` and `b` to make `a` always bigger than `b`
	        var t = a;
	        a = b;
	        b = t;
	      } else if (r === 0 || b.cmpn(1) === 0) {
	        break;
	      }

	      a.isub(b);
	    } while (true);

	    return b.iushln(shift);
	  };

	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
	    return this.egcd(num).a.umod(num);
	  };

	  BN.prototype.isEven = function isEven () {
	    return (this.words[0] & 1) === 0;
	  };

	  BN.prototype.isOdd = function isOdd () {
	    return (this.words[0] & 1) === 1;
	  };

	  // And first word and num
	  BN.prototype.andln = function andln (num) {
	    return this.words[0] & num;
	  };

	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
	    assert$$1(typeof bit === 'number');
	    var r = bit % 26;
	    var s = (bit - r) / 26;
	    var q = 1 << r;

	    // Fast case: bit is much higher than all existing words
	    if (this.length <= s) {
	      this._expand(s + 1);
	      this.words[s] |= q;
	      return this;
	    }

	    // Add bit and propagate, if needed
	    var carry = q;
	    for (var i = s; carry !== 0 && i < this.length; i++) {
	      var w = this.words[i] | 0;
	      w += carry;
	      carry = w >>> 26;
	      w &= 0x3ffffff;
	      this.words[i] = w;
	    }
	    if (carry !== 0) {
	      this.words[i] = carry;
	      this.length++;
	    }
	    return this;
	  };

	  BN.prototype.isZero = function isZero () {
	    return this.length === 1 && this.words[0] === 0;
	  };

	  BN.prototype.cmpn = function cmpn (num) {
	    var negative = num < 0;

	    if (this.negative !== 0 && !negative) return -1;
	    if (this.negative === 0 && negative) return 1;

	    this.strip();

	    var res;
	    if (this.length > 1) {
	      res = 1;
	    } else {
	      if (negative) {
	        num = -num;
	      }

	      assert$$1(num <= 0x3ffffff, 'Number is too big');

	      var w = this.words[0] | 0;
	      res = w === num ? 0 : w < num ? -1 : 1;
	    }
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
	    if (this.negative !== 0 && num.negative === 0) return -1;
	    if (this.negative === 0 && num.negative !== 0) return 1;

	    var res = this.ucmp(num);
	    if (this.negative !== 0) return -res | 0;
	    return res;
	  };

	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
	    // At this point both numbers have the same sign
	    if (this.length > num.length) return 1;
	    if (this.length < num.length) return -1;

	    var res = 0;
	    for (var i = this.length - 1; i >= 0; i--) {
	      var a = this.words[i] | 0;
	      var b = num.words[i] | 0;

	      if (a === b) continue;
	      if (a < b) {
	        res = -1;
	      } else if (a > b) {
	        res = 1;
	      }
	      break;
	    }
	    return res;
	  };

	  BN.prototype.gtn = function gtn (num) {
	    return this.cmpn(num) === 1;
	  };

	  BN.prototype.gt = function gt (num) {
	    return this.cmp(num) === 1;
	  };

	  BN.prototype.gten = function gten (num) {
	    return this.cmpn(num) >= 0;
	  };

	  BN.prototype.gte = function gte (num) {
	    return this.cmp(num) >= 0;
	  };

	  BN.prototype.ltn = function ltn (num) {
	    return this.cmpn(num) === -1;
	  };

	  BN.prototype.lt = function lt (num) {
	    return this.cmp(num) === -1;
	  };

	  BN.prototype.lten = function lten (num) {
	    return this.cmpn(num) <= 0;
	  };

	  BN.prototype.lte = function lte (num) {
	    return this.cmp(num) <= 0;
	  };

	  BN.prototype.eqn = function eqn (num) {
	    return this.cmpn(num) === 0;
	  };

	  BN.prototype.eq = function eq (num) {
	    return this.cmp(num) === 0;
	  };

	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
	    return new Red(num);
	  };

	  BN.prototype.toRed = function toRed (ctx) {
	    assert$$1(!this.red, 'Already a number in reduction context');
	    assert$$1(this.negative === 0, 'red works only with positives');
	    return ctx.convertTo(this)._forceRed(ctx);
	  };

	  BN.prototype.fromRed = function fromRed () {
	    assert$$1(this.red, 'fromRed works only with numbers in reduction context');
	    return this.red.convertFrom(this);
	  };

	  BN.prototype._forceRed = function _forceRed (ctx) {
	    this.red = ctx;
	    return this;
	  };

	  BN.prototype.forceRed = function forceRed (ctx) {
	    assert$$1(!this.red, 'Already a number in reduction context');
	    return this._forceRed(ctx);
	  };

	  BN.prototype.redAdd = function redAdd (num) {
	    assert$$1(this.red, 'redAdd works only with red numbers');
	    return this.red.add(this, num);
	  };

	  BN.prototype.redIAdd = function redIAdd (num) {
	    assert$$1(this.red, 'redIAdd works only with red numbers');
	    return this.red.iadd(this, num);
	  };

	  BN.prototype.redSub = function redSub (num) {
	    assert$$1(this.red, 'redSub works only with red numbers');
	    return this.red.sub(this, num);
	  };

	  BN.prototype.redISub = function redISub (num) {
	    assert$$1(this.red, 'redISub works only with red numbers');
	    return this.red.isub(this, num);
	  };

	  BN.prototype.redShl = function redShl (num) {
	    assert$$1(this.red, 'redShl works only with red numbers');
	    return this.red.shl(this, num);
	  };

	  BN.prototype.redMul = function redMul (num) {
	    assert$$1(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.mul(this, num);
	  };

	  BN.prototype.redIMul = function redIMul (num) {
	    assert$$1(this.red, 'redMul works only with red numbers');
	    this.red._verify2(this, num);
	    return this.red.imul(this, num);
	  };

	  BN.prototype.redSqr = function redSqr () {
	    assert$$1(this.red, 'redSqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqr(this);
	  };

	  BN.prototype.redISqr = function redISqr () {
	    assert$$1(this.red, 'redISqr works only with red numbers');
	    this.red._verify1(this);
	    return this.red.isqr(this);
	  };

	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
	    assert$$1(this.red, 'redSqrt works only with red numbers');
	    this.red._verify1(this);
	    return this.red.sqrt(this);
	  };

	  BN.prototype.redInvm = function redInvm () {
	    assert$$1(this.red, 'redInvm works only with red numbers');
	    this.red._verify1(this);
	    return this.red.invm(this);
	  };

	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
	    assert$$1(this.red, 'redNeg works only with red numbers');
	    this.red._verify1(this);
	    return this.red.neg(this);
	  };

	  BN.prototype.redPow = function redPow (num) {
	    assert$$1(this.red && !num.red, 'redPow(normalNum)');
	    this.red._verify1(this);
	    return this.red.pow(this, num);
	  };

	  // Prime numbers with efficient reduction
	  var primes = {
	    k256: null,
	    p224: null,
	    p192: null,
	    p25519: null
	  };

	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
	    // P = 2 ^ N - K
	    this.name = name;
	    this.p = new BN(p, 16);
	    this.n = this.p.bitLength();
	    this.k = new BN(1).iushln(this.n).isub(this.p);

	    this.tmp = this._tmp();
	  }

	  MPrime.prototype._tmp = function _tmp () {
	    var tmp = new BN(null);
	    tmp.words = new Array(Math.ceil(this.n / 13));
	    return tmp;
	  };

	  MPrime.prototype.ireduce = function ireduce (num) {
	    // Assumes that `num` is less than `P^2`
	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
	    var r = num;
	    var rlen;

	    do {
	      this.split(r, this.tmp);
	      r = this.imulK(r);
	      r = r.iadd(this.tmp);
	      rlen = r.bitLength();
	    } while (rlen > this.n);

	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
	    if (cmp === 0) {
	      r.words[0] = 0;
	      r.length = 1;
	    } else if (cmp > 0) {
	      r.isub(this.p);
	    } else {
	      r.strip();
	    }

	    return r;
	  };

	  MPrime.prototype.split = function split (input, out) {
	    input.iushrn(this.n, 0, out);
	  };

	  MPrime.prototype.imulK = function imulK (num) {
	    return num.imul(this.k);
	  };

	  function K256 () {
	    MPrime.call(
	      this,
	      'k256',
	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);

	  K256.prototype.split = function split (input, output) {
	    // 256 = 9 * 26 + 22
	    var mask = 0x3fffff;

	    var outLen = Math.min(input.length, 9);
	    for (var i = 0; i < outLen; i++) {
	      output.words[i] = input.words[i];
	    }
	    output.length = outLen;

	    if (input.length <= 9) {
	      input.words[0] = 0;
	      input.length = 1;
	      return;
	    }

	    // Shift by 9 limbs
	    var prev = input.words[9];
	    output.words[output.length++] = prev & mask;

	    for (i = 10; i < input.length; i++) {
	      var next = input.words[i] | 0;
	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
	      prev = next;
	    }
	    prev >>>= 22;
	    input.words[i - 10] = prev;
	    if (prev === 0 && input.length > 10) {
	      input.length -= 10;
	    } else {
	      input.length -= 9;
	    }
	  };

	  K256.prototype.imulK = function imulK (num) {
	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
	    num.words[num.length] = 0;
	    num.words[num.length + 1] = 0;
	    num.length += 2;

	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
	    var lo = 0;
	    for (var i = 0; i < num.length; i++) {
	      var w = num.words[i] | 0;
	      lo += w * 0x3d1;
	      num.words[i] = lo & 0x3ffffff;
	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
	    }

	    // Fast length reduction
	    if (num.words[num.length - 1] === 0) {
	      num.length--;
	      if (num.words[num.length - 1] === 0) {
	        num.length--;
	      }
	    }
	    return num;
	  };

	  function P224 () {
	    MPrime.call(
	      this,
	      'p224',
	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);

	  function P192 () {
	    MPrime.call(
	      this,
	      'p192',
	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);

	  function P25519 () {
	    // 2 ^ 255 - 19
	    MPrime.call(
	      this,
	      '25519',
	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);

	  P25519.prototype.imulK = function imulK (num) {
	    // K = 0x13
	    var carry = 0;
	    for (var i = 0; i < num.length; i++) {
	      var hi = (num.words[i] | 0) * 0x13 + carry;
	      var lo = hi & 0x3ffffff;
	      hi >>>= 26;

	      num.words[i] = lo;
	      carry = hi;
	    }
	    if (carry !== 0) {
	      num.words[num.length++] = carry;
	    }
	    return num;
	  };

	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
	    // Cached version of prime
	    if (primes[name]) return primes[name];

	    var prime;
	    if (name === 'k256') {
	      prime = new K256();
	    } else if (name === 'p224') {
	      prime = new P224();
	    } else if (name === 'p192') {
	      prime = new P192();
	    } else if (name === 'p25519') {
	      prime = new P25519();
	    } else {
	      throw new Error('Unknown prime ' + name);
	    }
	    primes[name] = prime;

	    return prime;
	  };

	  //
	  // Base reduction engine
	  //
	  function Red (m) {
	    if (typeof m === 'string') {
	      var prime = BN._prime(m);
	      this.m = prime.p;
	      this.prime = prime;
	    } else {
	      assert$$1(m.gtn(1), 'modulus must be greater than 1');
	      this.m = m;
	      this.prime = null;
	    }
	  }

	  Red.prototype._verify1 = function _verify1 (a) {
	    assert$$1(a.negative === 0, 'red works only with positives');
	    assert$$1(a.red, 'red works only with red numbers');
	  };

	  Red.prototype._verify2 = function _verify2 (a, b) {
	    assert$$1((a.negative | b.negative) === 0, 'red works only with positives');
	    assert$$1(a.red && a.red === b.red,
	      'red works only with red numbers');
	  };

	  Red.prototype.imod = function imod (a) {
	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	    return a.umod(this.m)._forceRed(this);
	  };

	  Red.prototype.neg = function neg (a) {
	    if (a.isZero()) {
	      return a.clone();
	    }

	    return this.m.sub(a)._forceRed(this);
	  };

	  Red.prototype.add = function add (a, b) {
	    this._verify2(a, b);

	    var res = a.add(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.iadd = function iadd (a, b) {
	    this._verify2(a, b);

	    var res = a.iadd(b);
	    if (res.cmp(this.m) >= 0) {
	      res.isub(this.m);
	    }
	    return res;
	  };

	  Red.prototype.sub = function sub (a, b) {
	    this._verify2(a, b);

	    var res = a.sub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res._forceRed(this);
	  };

	  Red.prototype.isub = function isub (a, b) {
	    this._verify2(a, b);

	    var res = a.isub(b);
	    if (res.cmpn(0) < 0) {
	      res.iadd(this.m);
	    }
	    return res;
	  };

	  Red.prototype.shl = function shl (a, num) {
	    this._verify1(a);
	    return this.imod(a.ushln(num));
	  };

	  Red.prototype.imul = function imul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.imul(b));
	  };

	  Red.prototype.mul = function mul (a, b) {
	    this._verify2(a, b);
	    return this.imod(a.mul(b));
	  };

	  Red.prototype.isqr = function isqr (a) {
	    return this.imul(a, a.clone());
	  };

	  Red.prototype.sqr = function sqr (a) {
	    return this.mul(a, a);
	  };

	  Red.prototype.sqrt = function sqrt (a) {
	    if (a.isZero()) return a.clone();

	    var mod3 = this.m.andln(3);
	    assert$$1(mod3 % 2 === 1);

	    // Fast case
	    if (mod3 === 3) {
	      var pow = this.m.add(new BN(1)).iushrn(2);
	      return this.pow(a, pow);
	    }

	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
	    //
	    // Find Q and S, that Q * 2 ^ S = (P - 1)
	    var q = this.m.subn(1);
	    var s = 0;
	    while (!q.isZero() && q.andln(1) === 0) {
	      s++;
	      q.iushrn(1);
	    }
	    assert$$1(!q.isZero());

	    var one = new BN(1).toRed(this);
	    var nOne = one.redNeg();

	    // Find quadratic non-residue
	    // NOTE: Max is such because of generalized Riemann hypothesis.
	    var lpow = this.m.subn(1).iushrn(1);
	    var z = this.m.bitLength();
	    z = new BN(2 * z * z).toRed(this);

	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
	      z.redIAdd(nOne);
	    }

	    var c = this.pow(z, q);
	    var r = this.pow(a, q.addn(1).iushrn(1));
	    var t = this.pow(a, q);
	    var m = s;
	    while (t.cmp(one) !== 0) {
	      var tmp = t;
	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
	        tmp = tmp.redSqr();
	      }
	      assert$$1(i < m);
	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

	      r = r.redMul(b);
	      c = b.redSqr();
	      t = t.redMul(c);
	      m = i;
	    }

	    return r;
	  };

	  Red.prototype.invm = function invm (a) {
	    var inv = a._invmp(this.m);
	    if (inv.negative !== 0) {
	      inv.negative = 0;
	      return this.imod(inv).redNeg();
	    } else {
	      return this.imod(inv);
	    }
	  };

	  Red.prototype.pow = function pow (a, num) {
	    if (num.isZero()) return new BN(1).toRed(this);
	    if (num.cmpn(1) === 0) return a.clone();

	    var windowSize = 4;
	    var wnd = new Array(1 << windowSize);
	    wnd[0] = new BN(1).toRed(this);
	    wnd[1] = a;
	    for (var i = 2; i < wnd.length; i++) {
	      wnd[i] = this.mul(wnd[i - 1], a);
	    }

	    var res = wnd[0];
	    var current = 0;
	    var currentLen = 0;
	    var start = num.bitLength() % 26;
	    if (start === 0) {
	      start = 26;
	    }

	    for (i = num.length - 1; i >= 0; i--) {
	      var word = num.words[i];
	      for (var j = start - 1; j >= 0; j--) {
	        var bit = (word >> j) & 1;
	        if (res !== wnd[0]) {
	          res = this.sqr(res);
	        }

	        if (bit === 0 && current === 0) {
	          currentLen = 0;
	          continue;
	        }

	        current <<= 1;
	        current |= bit;
	        currentLen++;
	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

	        res = this.mul(res, wnd[current]);
	        currentLen = 0;
	        current = 0;
	      }
	      start = 26;
	    }

	    return res;
	  };

	  Red.prototype.convertTo = function convertTo (num) {
	    var r = num.umod(this.m);

	    return r === num ? r.clone() : r;
	  };

	  Red.prototype.convertFrom = function convertFrom (num) {
	    var res = num.clone();
	    res.red = null;
	    return res;
	  };

	  //
	  // Montgomery method engine
	  //

	  BN.mont = function mont (num) {
	    return new Mont(num);
	  };

	  function Mont (m) {
	    Red.call(this, m);

	    this.shift = this.m.bitLength();
	    if (this.shift % 26 !== 0) {
	      this.shift += 26 - (this.shift % 26);
	    }

	    this.r = new BN(1).iushln(this.shift);
	    this.r2 = this.imod(this.r.sqr());
	    this.rinv = this.r._invmp(this.m);

	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
	    this.minv = this.minv.umod(this.r);
	    this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);

	  Mont.prototype.convertTo = function convertTo (num) {
	    return this.imod(num.ushln(this.shift));
	  };

	  Mont.prototype.convertFrom = function convertFrom (num) {
	    var r = this.imod(num.mul(this.rinv));
	    r.red = null;
	    return r;
	  };

	  Mont.prototype.imul = function imul (a, b) {
	    if (a.isZero() || b.isZero()) {
	      a.words[0] = 0;
	      a.length = 1;
	      return a;
	    }

	    var t = a.imul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;

	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.mul = function mul (a, b) {
	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

	    var t = a.mul(b);
	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
	    var u = t.isub(c).iushrn(this.shift);
	    var res = u;
	    if (u.cmp(this.m) >= 0) {
	      res = u.isub(this.m);
	    } else if (u.cmpn(0) < 0) {
	      res = u.iadd(this.m);
	    }

	    return res._forceRed(this);
	  };

	  Mont.prototype.invm = function invm (a) {
	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
	    var res = this.imod(a._invmp(this.m).mul(this.r2));
	    return res._forceRed(this);
	  };
	})(module, commonjsGlobal);
	});

	var _from = "elliptic@^6.4.0";
	var _id = "elliptic@6.5.1";
	var _inBundle = false;
	var _integrity = "sha512-xvJINNLbTeWQjrl6X+7eQCrIy/YPv5XCpKW6kB5mKvtnGILoLDcySuwomfdzt0BMdLNVnuRNTuzKNHj0bva1Cg==";
	var _location = "/elliptic";
	var _phantomChildren = {};
	var _requested = {"type":"range","registry":true,"raw":"elliptic@^6.4.0","name":"elliptic","escapedName":"elliptic","rawSpec":"^6.4.0","saveSpec":null,"fetchSpec":"^6.4.0"};
	var _requiredBy = ["/@tronscan/client","/secp256k1"];
	var _resolved = "https://registry.npmjs.org/elliptic/-/elliptic-6.5.1.tgz";
	var _shasum = "c380f5f909bf1b9b4428d028cd18d3b0efd6b52b";
	var _spec = "elliptic@^6.4.0";
	var _where = "/MyGit/tron-wallet/node_modules/@tronscan/client";
	var author = {"name":"Fedor Indutny","email":"fedor@indutny.com"};
	var bugs = {"url":"https://github.com/indutny/elliptic/issues"};
	var bundleDependencies = false;
	var dependencies = {"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"};
	var deprecated = false;
	var description = "EC cryptography";
	var devDependencies = {"brfs":"^1.4.3","coveralls":"^3.0.4","grunt":"^1.0.4","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.2","jscs":"^3.0.7","jshint":"^2.6.0","mocha":"^6.1.4"};
	var files = ["lib"];
	var homepage = "https://github.com/indutny/elliptic";
	var keywords = ["EC","Elliptic","curve","Cryptography"];
	var license = "MIT";
	var main = "lib/elliptic.js";
	var name = "elliptic";
	var repository = {"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"};
	var scripts = {"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"};
	var version = "6.5.1";
	var _package = {
		_from: _from,
		_id: _id,
		_inBundle: _inBundle,
		_integrity: _integrity,
		_location: _location,
		_phantomChildren: _phantomChildren,
		_requested: _requested,
		_requiredBy: _requiredBy,
		_resolved: _resolved,
		_shasum: _shasum,
		_spec: _spec,
		_where: _where,
		author: author,
		bugs: bugs,
		bundleDependencies: bundleDependencies,
		dependencies: dependencies,
		deprecated: deprecated,
		description: description,
		devDependencies: devDependencies,
		files: files,
		homepage: homepage,
		keywords: keywords,
		license: license,
		main: main,
		name: name,
		repository: repository,
		scripts: scripts,
		version: version
	};

	var _package$1 = /*#__PURE__*/Object.freeze({
		_from: _from,
		_id: _id,
		_inBundle: _inBundle,
		_integrity: _integrity,
		_location: _location,
		_phantomChildren: _phantomChildren,
		_requested: _requested,
		_requiredBy: _requiredBy,
		_resolved: _resolved,
		_shasum: _shasum,
		_spec: _spec,
		_where: _where,
		author: author,
		bugs: bugs,
		bundleDependencies: bundleDependencies,
		dependencies: dependencies,
		deprecated: deprecated,
		description: description,
		devDependencies: devDependencies,
		files: files,
		homepage: homepage,
		keywords: keywords,
		license: license,
		main: main,
		name: name,
		repository: repository,
		scripts: scripts,
		version: version,
		default: _package
	});

	var minimalisticAssert = assert$2;

	function assert$2(val, msg) {
	  if (!val)
	    throw new Error(msg || 'Assertion failed');
	}

	assert$2.equal = function assertEqual(l, r, msg) {
	  if (l != r)
	    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};

	var utils_1 = createCommonjsModule(function (module, exports) {

	var utils = exports;

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg !== 'string') {
	    for (var i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	    return res;
	  }
	  if (enc === 'hex') {
	    msg = msg.replace(/[^a-z0-9]+/ig, '');
	    if (msg.length % 2 !== 0)
	      msg = '0' + msg;
	    for (var i = 0; i < msg.length; i += 2)
	      res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
	    for (var i = 0; i < msg.length; i++) {
	      var c = msg.charCodeAt(i);
	      var hi = c >> 8;
	      var lo = c & 0xff;
	      if (hi)
	        res.push(hi, lo);
	      else
	        res.push(lo);
	    }
	  }
	  return res;
	}
	utils.toArray = toArray;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	utils.zero2 = zero2;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;

	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
	    return toHex(arr);
	  else
	    return arr;
	};
	});

	var utils_1$1 = createCommonjsModule(function (module, exports) {

	var utils = exports;




	utils.assert = minimalisticAssert;
	utils.toArray = utils_1.toArray;
	utils.zero2 = utils_1.zero2;
	utils.toHex = utils_1.toHex;
	utils.encode = utils_1.encode;

	// Represent num in a w-NAF form
	function getNAF(num, w) {
	  var naf = [];
	  var ws = 1 << (w + 1);
	  var k = num.clone();
	  while (k.cmpn(1) >= 0) {
	    var z;
	    if (k.isOdd()) {
	      var mod = k.andln(ws - 1);
	      if (mod > (ws >> 1) - 1)
	        z = (ws >> 1) - mod;
	      else
	        z = mod;
	      k.isubn(z);
	    } else {
	      z = 0;
	    }
	    naf.push(z);

	    // Optimization, shift by word if possible
	    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
	    for (var i = 1; i < shift; i++)
	      naf.push(0);
	    k.iushrn(shift);
	  }

	  return naf;
	}
	utils.getNAF = getNAF;

	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
	    [],
	    []
	  ];

	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

	    // First phase
	    var m14 = (k1.andln(3) + d1) & 3;
	    var m24 = (k2.andln(3) + d2) & 3;
	    if (m14 === 3)
	      m14 = -1;
	    if (m24 === 3)
	      m24 = -1;
	    var u1;
	    if ((m14 & 1) === 0) {
	      u1 = 0;
	    } else {
	      var m8 = (k1.andln(7) + d1) & 7;
	      if ((m8 === 3 || m8 === 5) && m24 === 2)
	        u1 = -m14;
	      else
	        u1 = m14;
	    }
	    jsf[0].push(u1);

	    var u2;
	    if ((m24 & 1) === 0) {
	      u2 = 0;
	    } else {
	      var m8 = (k2.andln(7) + d2) & 7;
	      if ((m8 === 3 || m8 === 5) && m14 === 2)
	        u2 = -m24;
	      else
	        u2 = m24;
	    }
	    jsf[1].push(u2);

	    // Second phase
	    if (2 * d1 === u1 + 1)
	      d1 = 1 - d1;
	    if (2 * d2 === u2 + 1)
	      d2 = 1 - d2;
	    k1.iushrn(1);
	    k2.iushrn(1);
	  }

	  return jsf;
	}
	utils.getJSF = getJSF;

	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
	    return this[key] !== undefined ? this[key] :
	           this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;

	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
	                                     bytes;
	}
	utils.parseBytes = parseBytes;

	function intFromLE(bytes) {
	  return new bn(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	});

	var r;

	var brorand = function rand(len) {
	  if (!r)
	    r = new Rand(null);

	  return r.generate(len);
	};

	function Rand(rand) {
	  this.rand = rand;
	}
	var Rand_1 = Rand;

	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};

	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
	    return this.rand.getBytes(n);

	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
	    res[i] = this.rand.getByte();
	  return res;
	};

	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
	    // Modern browsers
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.crypto.getRandomValues(arr);
	      return arr;
	    };
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
	    // IE
	    Rand.prototype._rand = function _rand(n) {
	      var arr = new Uint8Array(n);
	      self.msCrypto.getRandomValues(arr);
	      return arr;
	    };

	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
	    // Old junk
	    Rand.prototype._rand = function() {
	      throw new Error('Not implemented yet');
	    };
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
	    var crypto$1 = crypto;
	    if (typeof crypto$1.randomBytes !== 'function')
	      throw new Error('Not supported');

	    Rand.prototype._rand = function _rand(n) {
	      return crypto$1.randomBytes(n);
	    };
	  } catch (e) {
	  }
	}
	brorand.Rand = Rand_1;

	var getNAF = utils_1$1.getNAF;
	var getJSF = utils_1$1.getJSF;
	var assert$3 = utils_1$1.assert;

	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new bn(conf.p, 16);

	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

	  // Useful for many curves
	  this.zero = new bn(0).toRed(this.red);
	  this.one = new bn(1).toRed(this.red);
	  this.two = new bn(2).toRed(this.red);

	  // Curve configuration, optional
	  this.n = conf.n && new bn(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);

	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
	    this.redN = null;
	  } else {
	    this._maxwellTrick = true;
	    this.redN = this.n.toRed(this.red);
	  }
	}
	var base = BaseCurve;

	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};

	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert$3(p.precomputed);
	  var doubles = p._getDoubles();

	  var naf = getNAF(k, 1);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;

	  // Translate into more windowed form
	  var repr = [];
	  for (var j = 0; j < naf.length; j += doubles.step) {
	    var nafW = 0;
	    for (var k = j + doubles.step - 1; k >= j; k--)
	      nafW = (nafW << 1) + naf[k];
	    repr.push(nafW);
	  }

	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
	    for (var j = 0; j < repr.length; j++) {
	      var nafW = repr[j];
	      if (nafW === i)
	        b = b.mixedAdd(doubles.points[j]);
	      else if (nafW === -i)
	        b = b.mixedAdd(doubles.points[j].neg());
	    }
	    a = a.add(b);
	  }
	  return a.toP();
	};

	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;

	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;

	  // Get NAF form
	  var naf = getNAF(k, w);

	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
	    // Count zeroes
	    for (var k = 0; i >= 0 && naf[i] === 0; i--)
	      k++;
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);

	    if (i < 0)
	      break;
	    var z = naf[i];
	    assert$3(z !== 0);
	    if (p.type === 'affine') {
	      // J +- P
	      if (z > 0)
	        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
	    } else {
	      // J +- J
	      if (z > 0)
	        acc = acc.add(wnd[(z - 1) >> 1]);
	      else
	        acc = acc.add(wnd[(-z - 1) >> 1].neg());
	    }
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};

	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	                                                       points,
	                                                       coeffs,
	                                                       len,
	                                                       jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;

	  // Fill all arrays
	  var max = 0;
	  for (var i = 0; i < len; i++) {
	    var p = points[i];
	    var nafPoints = p._getNAFPoints(defW);
	    wndWidth[i] = nafPoints.wnd;
	    wnd[i] = nafPoints.points;
	  }

	  // Comb small window NAFs
	  for (var i = len - 1; i >= 1; i -= 2) {
	    var a = i - 1;
	    var b = i;
	    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
	      naf[a] = getNAF(coeffs[a], wndWidth[a]);
	      naf[b] = getNAF(coeffs[b], wndWidth[b]);
	      max = Math.max(naf[a].length, max);
	      max = Math.max(naf[b].length, max);
	      continue;
	    }

	    var comb = [
	      points[a], /* 1 */
	      null, /* 3 */
	      null, /* 5 */
	      points[b] /* 7 */
	    ];

	    // Try to avoid Projective points, if possible
	    if (points[a].y.cmp(points[b].y) === 0) {
	      comb[1] = points[a].add(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].add(points[b].neg());
	    } else {
	      comb[1] = points[a].toJ().mixedAdd(points[b]);
	      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
	    }

	    var index = [
	      -3, /* -1 -1 */
	      -1, /* -1 0 */
	      -5, /* -1 1 */
	      -7, /* 0 -1 */
	      0, /* 0 0 */
	      7, /* 0 1 */
	      5, /* 1 -1 */
	      1, /* 1 0 */
	      3  /* 1 1 */
	    ];

	    var jsf = getJSF(coeffs[a], coeffs[b]);
	    max = Math.max(jsf[0].length, max);
	    naf[a] = new Array(max);
	    naf[b] = new Array(max);
	    for (var j = 0; j < max; j++) {
	      var ja = jsf[0][j] | 0;
	      var jb = jsf[1][j] | 0;

	      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
	      naf[b][j] = 0;
	      wnd[a] = comb;
	    }
	  }

	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (var i = max; i >= 0; i--) {
	    var k = 0;

	    while (i >= 0) {
	      var zero = true;
	      for (var j = 0; j < len; j++) {
	        tmp[j] = naf[j][i] | 0;
	        if (tmp[j] !== 0)
	          zero = false;
	      }
	      if (!zero)
	        break;
	      k++;
	      i--;
	    }
	    if (i >= 0)
	      k++;
	    acc = acc.dblp(k);
	    if (i < 0)
	      break;

	    for (var j = 0; j < len; j++) {
	      var z = tmp[j];
	      var p;
	      if (z === 0)
	        continue;
	      else if (z > 0)
	        p = wnd[j][(z - 1) >> 1];
	      else if (z < 0)
	        p = wnd[j][(-z - 1) >> 1].neg();

	      if (p.type === 'affine')
	        acc = acc.mixedAdd(p);
	      else
	        acc = acc.add(p);
	    }
	  }
	  // Zeroify references
	  for (var i = 0; i < len; i++)
	    wnd[i] = null;

	  if (jacobianResult)
	    return acc;
	  else
	    return acc.toP();
	};

	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;

	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};

	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};

	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils_1$1.toArray(bytes, enc);

	  var len = this.p.byteLength();

	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
	      bytes.length - 1 === 2 * len) {
	    if (bytes[0] === 0x06)
	      assert$3(bytes[bytes.length - 1] % 2 === 0);
	    else if (bytes[0] === 0x07)
	      assert$3(bytes[bytes.length - 1] % 2 === 1);

	    var res =  this.point(bytes.slice(1, 1 + len),
	                          bytes.slice(1 + len, 1 + 2 * len));

	    return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
	              bytes.length - 1 === len) {
	    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};

	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};

	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);

	  if (compact)
	    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

	  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
	};

	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils_1$1.encode(this._encode(compact), enc);
	};

	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
	    return this;

	  var precomputed = {
	    doubles: null,
	    naf: null,
	    beta: null
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;

	  return this;
	};

	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
	    return false;

	  var doubles = this.precomputed.doubles;
	  if (!doubles)
	    return false;

	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};

	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
	    return this.precomputed.doubles;

	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
	    for (var j = 0; j < step; j++)
	      acc = acc.dbl();
	    doubles.push(acc);
	  }
	  return {
	    step: step,
	    points: doubles
	  };
	};

	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
	    return this.precomputed.naf;

	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
	    res[i] = res[i - 1].add(dbl);
	  return {
	    wnd: wnd,
	    points: res
	  };
	};

	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};

	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
	    r = r.dbl();
	  return r;
	};

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});

	var inherits = createCommonjsModule(function (module) {
	try {
	  var util$$1 = util;
	  /* istanbul ignore next */
	  if (typeof util$$1.inherits !== 'function') throw '';
	  module.exports = util$$1.inherits;
	} catch (e) {
	  /* istanbul ignore next */
	  module.exports = inherits_browser;
	}
	});

	var assert$4 = utils_1$1.assert;

	function ShortCurve(conf) {
	  base.call(this, 'short', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();

	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits(ShortCurve, base);
	var short_1 = ShortCurve;

	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
	    return;

	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
	    beta = new bn(conf.beta, 16).toRed(this.red);
	  } else {
	    var betas = this._getEndoRoots(this.p);
	    // Choose the smallest beta
	    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
	    beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
	    lambda = new bn(conf.lambda, 16);
	  } else {
	    // Choose the lambda that is matching selected beta
	    var lambdas = this._getEndoRoots(this.n);
	    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
	      lambda = lambdas[0];
	    } else {
	      lambda = lambdas[1];
	      assert$4(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
	    }
	  }

	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
	    basis = conf.basis.map(function(vec) {
	      return {
	        a: new bn(vec.a, 16),
	        b: new bn(vec.b, 16)
	      };
	    });
	  } else {
	    basis = this._getEndoBasis(lambda);
	  }

	  return {
	    beta: beta,
	    lambda: lambda,
	    basis: basis
	  };
	};

	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : bn.mont(num);
	  var tinv = new bn(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();

	  var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};

	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new bn(1);
	  var y1 = new bn(0);
	  var x2 = new bn(0);
	  var y2 = new bn(1);

	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;

	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
	    var q = v.div(u);
	    r = v.sub(q.mul(u));
	    x = x2.sub(q.mul(x1));
	    var y = y2.sub(q.mul(y1));

	    if (!a1 && r.cmp(aprxSqrt) < 0) {
	      a0 = prevR.neg();
	      b0 = x1;
	      a1 = r.neg();
	      b1 = x;
	    } else if (a1 && ++i === 2) {
	      break;
	    }
	    prevR = r;

	    v = u;
	    u = r;
	    x2 = x1;
	    x1 = x;
	    y2 = y1;
	    y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;

	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
	    a2 = a0;
	    b2 = b0;
	  }

	  // Normalize signs
	  if (a1.negative) {
	    a1 = a1.neg();
	    b1 = b1.neg();
	  }
	  if (a2.negative) {
	    a2 = a2.neg();
	    b2 = b2.neg();
	  }

	  return [
	    { a: a1, b: b1 },
	    { a: a2, b: b2 }
	  ];
	};

	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];

	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);

	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);

	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};

	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
	    return true;

	  var x = point.x;
	  var y = point.y;

	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};

	ShortCurve.prototype._endoWnafMulAdd =
	    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
	  var npoints = this._endoWnafT1;
	  var ncoeffs = this._endoWnafT2;
	  for (var i = 0; i < points.length; i++) {
	    var split = this._endoSplit(coeffs[i]);
	    var p = points[i];
	    var beta = p._getBeta();

	    if (split.k1.negative) {
	      split.k1.ineg();
	      p = p.neg(true);
	    }
	    if (split.k2.negative) {
	      split.k2.ineg();
	      beta = beta.neg(true);
	    }

	    npoints[i * 2] = p;
	    npoints[i * 2 + 1] = beta;
	    ncoeffs[i * 2] = split.k1;
	    ncoeffs[i * 2 + 1] = split.k2;
	  }
	  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

	  // Clean-up references to points and coefficients
	  for (var j = 0; j < i * 2; j++) {
	    npoints[j] = null;
	    ncoeffs[j] = null;
	  }
	  return res;
	};

	function Point(curve, x, y, isRed) {
	  base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
	    this.x = null;
	    this.y = null;
	    this.inf = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    // Force redgomery representation when loading from JSON
	    if (isRed) {
	      this.x.forceRed(this.curve.red);
	      this.y.forceRed(this.curve.red);
	    }
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    this.inf = false;
	  }
	}
	inherits(Point, base.BasePoint);

	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};

	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};

	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
	    return;

	  var pre = this.precomputed;
	  if (pre && pre.beta)
	    return pre.beta;

	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
	    var curve = this.curve;
	    var endoMul = function(p) {
	      return curve.point(p.x.redMul(curve.endo.beta), p.y);
	    };
	    pre.beta = beta;
	    beta.precomputed = {
	      beta: null,
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(endoMul)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(endoMul)
	      }
	    };
	  }
	  return beta;
	};

	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
	    return [ this.x, this.y ];

	  return [ this.x, this.y, this.precomputed && {
	    doubles: this.precomputed.doubles && {
	      step: this.precomputed.doubles.step,
	      points: this.precomputed.doubles.points.slice(1)
	    },
	    naf: this.precomputed.naf && {
	      wnd: this.precomputed.naf.wnd,
	      points: this.precomputed.naf.points.slice(1)
	    }
	  } ];
	};

	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
	    obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
	    return res;

	  function obj2point(obj) {
	    return curve.point(obj[0], obj[1], red);
	  }

	  var pre = obj[2];
	  res.precomputed = {
	    beta: null,
	    doubles: pre.doubles && {
	      step: pre.doubles.step,
	      points: [ res ].concat(pre.doubles.points.map(obj2point))
	    },
	    naf: pre.naf && {
	      wnd: pre.naf.wnd,
	      points: [ res ].concat(pre.naf.points.map(obj2point))
	    }
	  };
	  return res;
	};

	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};

	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};

	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
	    return p;

	  // P + O = P
	  if (p.inf)
	    return this;

	  // P + P = 2P
	  if (this.eq(p))
	    return this.dbl();

	  // P + (-P) = O
	  if (this.neg().eq(p))
	    return this.curve.point(null, null);

	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
	    return this.curve.point(null, null);

	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
	    c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.dbl = function dbl() {
	  if (this.inf)
	    return this;

	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
	    return this.curve.point(null, null);

	  var a = this.curve.a;

	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};

	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};

	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};

	Point.prototype.mul = function mul(k) {
	  k = new bn(k, 16);
	  if (this.isInfinity())
	    return this;
	  else if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
	    return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};

	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
	    return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
	    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};

	Point.prototype.eq = function eq(p) {
	  return this === p ||
	         this.inf === p.inf &&
	             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};

	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
	    return this;

	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
	    var pre = this.precomputed;
	    var negate = function(p) {
	      return p.neg();
	    };
	    res.precomputed = {
	      naf: pre.naf && {
	        wnd: pre.naf.wnd,
	        points: pre.naf.points.map(negate)
	      },
	      doubles: pre.doubles && {
	        step: pre.doubles.step,
	        points: pre.doubles.points.map(negate)
	      }
	    };
	  }
	  return res;
	};

	Point.prototype.toJ = function toJ() {
	  if (this.inf)
	    return this.curve.jpoint(null, null, null);

	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};

	function JPoint(curve, x, y, z) {
	  base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.one;
	    this.y = this.curve.one;
	    this.z = new bn(0);
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = new bn(z, 16);
	  }
	  if (!this.x.red)
	    this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
	    this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
	    this.z = this.z.toRed(this.curve.red);

	  this.zOne = this.z === this.curve.one;
	}
	inherits(JPoint, base.BasePoint);

	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};

	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
	    return this.curve.point(null, null);

	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);

	  return this.curve.point(ax, ay);
	};

	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};

	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p;

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
	    return p.toJ();

	  // P + O = P
	  if (p.isInfinity())
	    return this;

	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);

	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
	    if (r.cmpn(0) !== 0)
	      return this.curve.jpoint(null, null, null);
	    else
	      return this.dbl();
	  }

	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);

	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
	    return this;
	  if (this.isInfinity())
	    return this;
	  if (!pow)
	    return this.dbl();

	  if (this.curve.zeroA || this.curve.threeA) {
	    var r = this;
	    for (var i = 0; i < pow; i++)
	      r = r.dbl();
	    return r;
	  }

	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;

	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (var i = 0; i < pow; i++) {
	    var jx2 = jx.redSqr();
	    var jyd2 = jyd.redSqr();
	    var jyd4 = jyd2.redSqr();
	    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	    var t1 = jx.redMul(jyd2);
	    var nx = c.redSqr().redISub(t1.redAdd(t1));
	    var t2 = t1.redISub(nx);
	    var dny = c.redMul(t2);
	    dny = dny.redIAdd(dny).redISub(jyd4);
	    var nz = jyd.redMul(jz);
	    if (i + 1 < pow)
	      jz4 = jz4.redMul(jyd4);

	    jx = nx;
	    jz = nz;
	    jyd = dny;
	  }

	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};

	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  if (this.curve.zeroA)
	    return this._zeroDbl();
	  else if (this.curve.threeA)
	    return this._threeDbl();
	  else
	    return this._dbl();
	};

	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 14A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a; a = 0
	    var m = xx.redAdd(xx).redIAdd(xx);
	    // T = M ^ 2 - 2*S
	    var t = m.redSqr().redISub(s).redISub(s);

	    // 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);

	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2*Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
	    //     #doubling-dbl-2009-l
	    // 2M + 5S + 13A

	    // A = X1^2
	    var a = this.x.redSqr();
	    // B = Y1^2
	    var b = this.y.redSqr();
	    // C = B^2
	    var c = b.redSqr();
	    // D = 2 * ((X1 + B)^2 - A - C)
	    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
	    d = d.redIAdd(d);
	    // E = 3 * A
	    var e = a.redAdd(a).redIAdd(a);
	    // F = E^2
	    var f = e.redSqr();

	    // 8 * C
	    var c8 = c.redIAdd(c);
	    c8 = c8.redIAdd(c8);
	    c8 = c8.redIAdd(c8);

	    // X3 = F - 2 * D
	    nx = f.redISub(d).redISub(d);
	    // Y3 = E * (D - X3) - 8 * C
	    ny = e.redMul(d.redISub(nx)).redISub(c8);
	    // Z3 = 2 * Y1 * Z1
	    nz = this.y.redMul(this.z);
	    nz = nz.redIAdd(nz);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
	    //     #doubling-mdbl-2007-bl
	    // 1M + 5S + 15A

	    // XX = X1^2
	    var xx = this.x.redSqr();
	    // YY = Y1^2
	    var yy = this.y.redSqr();
	    // YYYY = YY^2
	    var yyyy = yy.redSqr();
	    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
	    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	    s = s.redIAdd(s);
	    // M = 3 * XX + a
	    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
	    // T = M^2 - 2 * S
	    var t = m.redSqr().redISub(s).redISub(s);
	    // X3 = T
	    nx = t;
	    // Y3 = M * (S - T) - 8 * YYYY
	    var yyyy8 = yyyy.redIAdd(yyyy);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    yyyy8 = yyyy8.redIAdd(yyyy8);
	    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
	    // Z3 = 2 * Y1
	    nz = this.y.redAdd(this.y);
	  } else {
	    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
	    // 3M + 5S

	    // delta = Z1^2
	    var delta = this.z.redSqr();
	    // gamma = Y1^2
	    var gamma = this.y.redSqr();
	    // beta = X1 * gamma
	    var beta = this.x.redMul(gamma);
	    // alpha = 3 * (X1 - delta) * (X1 + delta)
	    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
	    alpha = alpha.redAdd(alpha).redIAdd(alpha);
	    // X3 = alpha^2 - 8 * beta
	    var beta4 = beta.redIAdd(beta);
	    beta4 = beta4.redIAdd(beta4);
	    var beta8 = beta4.redAdd(beta4);
	    nx = alpha.redSqr().redISub(beta8);
	    // Z3 = (Y1 + Z1)^2 - gamma - delta
	    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
	    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
	    var ggamma8 = gamma.redSqr();
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ggamma8 = ggamma8.redIAdd(ggamma8);
	    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;

	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();

	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();

	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);

	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
	    return this.dbl().add(this);

	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...

	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

	  return this.curve.jpoint(nx, ny, nz);
	};

	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new bn(k, kbase);

	  return this.curve._wnafMul(this, k);
	};

	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
	    return this.eq(p.toJ());

	  if (this === p)
	    return true;

	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
	    return false;

	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};

	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
	      ' y: ' + this.y.toString(16, 2) +
	      ' z: ' + this.z.toString(16, 2) + '>';
	};

	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	function MontCurve(conf) {
	  base.call(this, 'mont', conf);

	  this.a = new bn(conf.a, 16).toRed(this.red);
	  this.b = new bn(conf.b, 16).toRed(this.red);
	  this.i4 = new bn(4).toRed(this.red).redInvm();
	  this.two = new bn(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits(MontCurve, base);
	var mont = MontCurve;

	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();

	  return y.redSqr().cmp(rhs) === 0;
	};

	function Point$1(curve, x, z) {
	  base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
	    this.x = this.curve.one;
	    this.z = this.curve.zero;
	  } else {
	    this.x = new bn(x, 16);
	    this.z = new bn(z, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits(Point$1, base.BasePoint);

	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils_1$1.toArray(bytes, enc), 1);
	};

	MontCurve.prototype.point = function point(x, z) {
	  return new Point$1(this, x, z);
	};

	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$1.fromJSON(this, obj);
	};

	Point$1.prototype.precompute = function precompute() {
	  // No-op
	};

	Point$1.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};

	Point$1.fromJSON = function fromJSON(curve, obj) {
	  return new Point$1(curve, obj[0], obj[1] || curve.one);
	};

	Point$1.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$1.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};

	Point$1.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A

	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A

	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};

	Point$1.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q

	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
	    bits.push(t.andln(1));

	  for (var i = bits.length - 1; i >= 0; i--) {
	    if (bits[i] === 0) {
	      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
	      a = a.diffAdd(b, c);
	      // N * Q = 2 * ((N / 2) * Q + Q))
	      b = b.dbl();
	    } else {
	      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
	      b = a.diffAdd(b, c);
	      // N * Q + Q = 2 * ((N / 2) * Q + Q)
	      a = a.dbl();
	    }
	  }
	  return b;
	};

	Point$1.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};

	Point$1.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};

	Point$1.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};

	Point$1.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();

	  return this.x.fromRed();
	};

	var assert$5 = utils_1$1.assert;

	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;

	  base.call(this, 'edwards', conf);

	  this.a = new bn(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new bn(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new bn(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);

	  assert$5(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits(EdwardsCurve, base);
	var edwards = EdwardsCurve;

	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
	    return num.redNeg();
	  else
	    return this.a.redMul(num);
	};

	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
	    return num;
	  else
	    return this.c.redMul(num);
	};

	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};

	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new bn(x, 16);
	  if (!x.red)
	    x = x.toRed(this.red);

	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
	    y = y.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new bn(y, 16);
	  if (!y.red)
	    y = y.toRed(this.red);

	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());

	  if (x2.cmp(this.zero) === 0) {
	    if (odd)
	      throw new Error('invalid point');
	    else
	      return this.point(this.zero, y);
	  }

	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
	    throw new Error('invalid point');

	  if (x.fromRed().isOdd() !== odd)
	    x = x.redNeg();

	  return this.point(x, y);
	};

	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
	    return true;

	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();

	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

	  return lhs.cmp(rhs) === 0;
	};

	function Point$2(curve, x, y, z, t) {
	  base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
	    this.x = this.curve.zero;
	    this.y = this.curve.one;
	    this.z = this.curve.one;
	    this.t = this.curve.zero;
	    this.zOne = true;
	  } else {
	    this.x = new bn(x, 16);
	    this.y = new bn(y, 16);
	    this.z = z ? new bn(z, 16) : this.curve.one;
	    this.t = t && new bn(t, 16);
	    if (!this.x.red)
	      this.x = this.x.toRed(this.curve.red);
	    if (!this.y.red)
	      this.y = this.y.toRed(this.curve.red);
	    if (!this.z.red)
	      this.z = this.z.toRed(this.curve.red);
	    if (this.t && !this.t.red)
	      this.t = this.t.toRed(this.curve.red);
	    this.zOne = this.z === this.curve.one;

	    // Use extended coordinates
	    if (this.curve.extended && !this.t) {
	      this.t = this.x.redMul(this.y);
	      if (!this.zOne)
	        this.t = this.t.redMul(this.z.redInvm());
	    }
	  }
	}
	inherits(Point$2, base.BasePoint);

	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point$2.fromJSON(this, obj);
	};

	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point$2(this, x, y, z, t);
	};

	Point$2.fromJSON = function fromJSON(curve, obj) {
	  return new Point$2(curve, obj[0], obj[1], obj[2]);
	};

	Point$2.prototype.inspect = function inspect() {
	  if (this.isInfinity())
	    return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
	      ' y: ' + this.y.fromRed().toString(16, 2) +
	      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};

	Point$2.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
	    (this.y.cmp(this.z) === 0 ||
	    (this.zOne && this.y.cmp(this.curve.c) === 0));
	};

	Point$2.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S

	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point$2.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S

	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();

	  var nx;
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // E = a * C
	    var e = this.curve._mulA(c);
	    // F = E + D
	    var f = e.redAdd(d);
	    if (this.zOne) {
	      // X3 = (B - C - D) * (F - 2)
	      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F^2 - 2 * F
	      nz = f.redSqr().redSub(f).redSub(f);
	    } else {
	      // H = Z1^2
	      var h = this.z.redSqr();
	      // J = F - 2 * H
	      var j = f.redSub(h).redISub(h);
	      // X3 = (B-C-D)*J
	      nx = b.redSub(c).redISub(d).redMul(j);
	      // Y3 = F * (E - D)
	      ny = f.redMul(e.redSub(d));
	      // Z3 = F * J
	      nz = f.redMul(j);
	    }
	  } else {
	    // E = C + D
	    var e = c.redAdd(d);
	    // H = (c * Z1)^2
	    var h = this.curve._mulC(this.z).redSqr();
	    // J = E - 2 * H
	    var j = e.redSub(h).redSub(h);
	    // X3 = c * (B - E) * J
	    nx = this.curve._mulC(b.redISub(e)).redMul(j);
	    // Y3 = c * E * (C - D)
	    ny = this.curve._mulC(e).redMul(c.redISub(d));
	    // Z3 = E * J
	    nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point$2.prototype.dbl = function dbl() {
	  if (this.isInfinity())
	    return this;

	  // Double in extended coordinates
	  if (this.curve.extended)
	    return this._extDbl();
	  else
	    return this._projDbl();
	};

	Point$2.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M

	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};

	Point$2.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S

	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
	    // Y3 = A * G * (D - a * C)
	    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
	    // Z3 = F * G
	    nz = f.redMul(g);
	  } else {
	    // Y3 = A * G * (D - C)
	    ny = a.redMul(g).redMul(d.redSub(c));
	    // Z3 = c * F * G
	    nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};

	Point$2.prototype.add = function add(p) {
	  if (this.isInfinity())
	    return p;
	  if (p.isInfinity())
	    return this;

	  if (this.curve.extended)
	    return this._extAdd(p);
	  else
	    return this._projAdd(p);
	};

	Point$2.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
	    return this.curve._fixedNafMul(this, k);
	  else
	    return this.curve._wnafMul(this, k);
	};

	Point$2.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};

	Point$2.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};

	Point$2.prototype.normalize = function normalize() {
	  if (this.zOne)
	    return this;

	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
	    this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};

	Point$2.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
	                          this.y,
	                          this.z,
	                          this.t && this.t.redNeg());
	};

	Point$2.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};

	Point$2.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};

	Point$2.prototype.eq = function eq(other) {
	  return this === other ||
	         this.getX().cmp(other.getX()) === 0 &&
	         this.getY().cmp(other.getY()) === 0;
	};

	Point$2.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
	    return true;

	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
	    xc.iadd(this.curve.n);
	    if (xc.cmp(this.curve.p) >= 0)
	      return false;

	    rx.redIAdd(t);
	    if (this.x.cmp(rx) === 0)
	      return true;
	  }
	};

	// Compatibility with BaseCurve
	Point$2.prototype.toP = Point$2.prototype.normalize;
	Point$2.prototype.mixedAdd = Point$2.prototype.add;

	var curve_1 = createCommonjsModule(function (module, exports) {

	var curve = exports;

	curve.base = base;
	curve.short = short_1;
	curve.mont = mont;
	curve.edwards = edwards;
	});

	var inherits_1 = inherits;

	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
	    return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
	    return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}

	function toArray(msg, enc) {
	  if (Array.isArray(msg))
	    return msg.slice();
	  if (!msg)
	    return [];
	  var res = [];
	  if (typeof msg === 'string') {
	    if (!enc) {
	      // Inspired by stringToUtf8ByteArray() in closure-library by Google
	      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
	      // Apache License 2.0
	      // https://github.com/google/closure-library/blob/master/LICENSE
	      var p = 0;
	      for (var i = 0; i < msg.length; i++) {
	        var c = msg.charCodeAt(i);
	        if (c < 128) {
	          res[p++] = c;
	        } else if (c < 2048) {
	          res[p++] = (c >> 6) | 192;
	          res[p++] = (c & 63) | 128;
	        } else if (isSurrogatePair(msg, i)) {
	          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
	          res[p++] = (c >> 18) | 240;
	          res[p++] = ((c >> 12) & 63) | 128;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        } else {
	          res[p++] = (c >> 12) | 224;
	          res[p++] = ((c >> 6) & 63) | 128;
	          res[p++] = (c & 63) | 128;
	        }
	      }
	    } else if (enc === 'hex') {
	      msg = msg.replace(/[^a-z0-9]+/ig, '');
	      if (msg.length % 2 !== 0)
	        msg = '0' + msg;
	      for (i = 0; i < msg.length; i += 2)
	        res.push(parseInt(msg[i] + msg[i + 1], 16));
	    }
	  } else {
	    for (i = 0; i < msg.length; i++)
	      res[i] = msg[i] | 0;
	  }
	  return res;
	}
	var toArray_1 = toArray;

	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
	    res += zero2(msg[i].toString(16));
	  return res;
	}
	var toHex_1 = toHex;

	function htonl(w) {
	  var res = (w >>> 24) |
	            ((w >>> 8) & 0xff00) |
	            ((w << 8) & 0xff0000) |
	            ((w & 0xff) << 24);
	  return res >>> 0;
	}
	var htonl_1 = htonl;

	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
	    var w = msg[i];
	    if (endian === 'little')
	      w = htonl(w);
	    res += zero8(w.toString(16));
	  }
	  return res;
	}
	var toHex32_1 = toHex32;

	function zero2(word) {
	  if (word.length === 1)
	    return '0' + word;
	  else
	    return word;
	}
	var zero2_1 = zero2;

	function zero8(word) {
	  if (word.length === 7)
	    return '0' + word;
	  else if (word.length === 6)
	    return '00' + word;
	  else if (word.length === 5)
	    return '000' + word;
	  else if (word.length === 4)
	    return '0000' + word;
	  else if (word.length === 3)
	    return '00000' + word;
	  else if (word.length === 2)
	    return '000000' + word;
	  else if (word.length === 1)
	    return '0000000' + word;
	  else
	    return word;
	}
	var zero8_1 = zero8;

	function join32(msg, start, end, endian) {
	  var len = end - start;
	  minimalisticAssert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
	    var w;
	    if (endian === 'big')
	      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
	    else
	      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
	    res[i] = w >>> 0;
	  }
	  return res;
	}
	var join32_1 = join32;

	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
	    var m = msg[i];
	    if (endian === 'big') {
	      res[k] = m >>> 24;
	      res[k + 1] = (m >>> 16) & 0xff;
	      res[k + 2] = (m >>> 8) & 0xff;
	      res[k + 3] = m & 0xff;
	    } else {
	      res[k + 3] = m >>> 24;
	      res[k + 2] = (m >>> 16) & 0xff;
	      res[k + 1] = (m >>> 8) & 0xff;
	      res[k] = m & 0xff;
	    }
	  }
	  return res;
	}
	var split32_1 = split32;

	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	var rotr32_1 = rotr32;

	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	var rotl32_1 = rotl32;

	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	var sum32_1 = sum32;

	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	var sum32_3_1 = sum32_3;

	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	var sum32_4_1 = sum32_4;

	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	var sum32_5_1 = sum32_5;

	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];

	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	var sum64_1 = sum64;

	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	var sum64_hi_1 = sum64_hi;

	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	var sum64_lo_1 = sum64_lo;

	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;

	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	var sum64_4_hi_1 = sum64_4_hi;

	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	var sum64_4_lo_1 = sum64_4_lo;

	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;

	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	var sum64_5_hi_1 = sum64_5_hi;

	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;

	  return lo >>> 0;
	}
	var sum64_5_lo_1 = sum64_5_lo;

	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	var rotr64_hi_1 = rotr64_hi;

	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var rotr64_lo_1 = rotr64_lo;

	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	}
	var shr64_hi_1 = shr64_hi;

	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	var shr64_lo_1 = shr64_lo;

	var utils = {
		inherits: inherits_1,
		toArray: toArray_1,
		toHex: toHex_1,
		htonl: htonl_1,
		toHex32: toHex32_1,
		zero2: zero2_1,
		zero8: zero8_1,
		join32: join32_1,
		split32: split32_1,
		rotr32: rotr32_1,
		rotl32: rotl32_1,
		sum32: sum32_1,
		sum32_3: sum32_3_1,
		sum32_4: sum32_4_1,
		sum32_5: sum32_5_1,
		sum64: sum64_1,
		sum64_hi: sum64_hi_1,
		sum64_lo: sum64_lo_1,
		sum64_4_hi: sum64_4_hi_1,
		sum64_4_lo: sum64_4_lo_1,
		sum64_5_hi: sum64_5_hi_1,
		sum64_5_lo: sum64_5_lo_1,
		rotr64_hi: rotr64_hi_1,
		rotr64_lo: rotr64_lo_1,
		shr64_hi: shr64_hi_1,
		shr64_lo: shr64_lo_1
	};

	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';

	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	var BlockHash_1 = BlockHash;

	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
	    this.pending = msg;
	  else
	    this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;

	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
	    msg = this.pending;

	    // Process pending data in blocks
	    var r = msg.length % this._delta8;
	    this.pending = msg.slice(msg.length - r, msg.length);
	    if (this.pending.length === 0)
	      this.pending = null;

	    msg = utils.join32(msg, 0, msg.length - r, this.endian);
	    for (var i = 0; i < msg.length; i += this._delta32)
	      this._update(msg, i, i + this._delta32);
	  }

	  return this;
	};

	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  minimalisticAssert(this.pending === null);

	  return this._digest(enc);
	};

	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
	    res[i] = 0;

	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
	    for (var t = 8; t < this.padLength; t++)
	      res[i++] = 0;

	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = len & 0xff;
	  } else {
	    res[i++] = len & 0xff;
	    res[i++] = (len >>> 8) & 0xff;
	    res[i++] = (len >>> 16) & 0xff;
	    res[i++] = (len >>> 24) & 0xff;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;
	    res[i++] = 0;

	    for (t = 8; t < this.padLength; t++)
	      res[i++] = 0;
	  }

	  return res;
	};

	var common = {
		BlockHash: BlockHash_1
	};

	var rotr32$1 = utils.rotr32;

	function ft_1(s, x, y, z) {
	  if (s === 0)
	    return ch32(x, y, z);
	  if (s === 1 || s === 3)
	    return p32(x, y, z);
	  if (s === 2)
	    return maj32(x, y, z);
	}
	var ft_1_1 = ft_1;

	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	var ch32_1 = ch32;

	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	var maj32_1 = maj32;

	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	var p32_1 = p32;

	function s0_256(x) {
	  return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);
	}
	var s0_256_1 = s0_256;

	function s1_256(x) {
	  return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);
	}
	var s1_256_1 = s1_256;

	function g0_256(x) {
	  return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ (x >>> 3);
	}
	var g0_256_1 = g0_256;

	function g1_256(x) {
	  return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ (x >>> 10);
	}
	var g1_256_1 = g1_256;

	var common$1 = {
		ft_1: ft_1_1,
		ch32: ch32_1,
		maj32: maj32_1,
		p32: p32_1,
		s0_256: s0_256_1,
		s1_256: s1_256_1,
		g0_256: g0_256_1,
		g1_256: g1_256_1
	};

	var rotl32$1 = utils.rotl32;
	var sum32$1 = utils.sum32;
	var sum32_5$1 = utils.sum32_5;
	var ft_1$1 = common$1.ft_1;
	var BlockHash$1 = common.BlockHash;

	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];

	function SHA1() {
	  if (!(this instanceof SHA1))
	    return new SHA1();

	  BlockHash$1.call(this);
	  this.h = [
	    0x67452301, 0xefcdab89, 0x98badcfe,
	    0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}

	utils.inherits(SHA1, BlockHash$1);
	var _1 = SHA1;

	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;

	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];

	  for(; i < W.length; i++)
	    W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];

	  for (i = 0; i < W.length; i++) {
	    var s = ~~(i / 20);
	    var t = sum32_5$1(rotl32$1(a, 5), ft_1$1(s, b, c, d), e, W[i], sha1_K[s]);
	    e = d;
	    d = c;
	    c = rotl32$1(b, 30);
	    b = a;
	    a = t;
	  }

	  this.h[0] = sum32$1(this.h[0], a);
	  this.h[1] = sum32$1(this.h[1], b);
	  this.h[2] = sum32$1(this.h[2], c);
	  this.h[3] = sum32$1(this.h[3], d);
	  this.h[4] = sum32$1(this.h[4], e);
	};

	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	var sum32$2 = utils.sum32;
	var sum32_4$1 = utils.sum32_4;
	var sum32_5$2 = utils.sum32_5;
	var ch32$1 = common$1.ch32;
	var maj32$1 = common$1.maj32;
	var s0_256$1 = common$1.s0_256;
	var s1_256$1 = common$1.s1_256;
	var g0_256$1 = common$1.g0_256;
	var g1_256$1 = common$1.g1_256;

	var BlockHash$2 = common.BlockHash;

	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];

	function SHA256() {
	  if (!(this instanceof SHA256))
	    return new SHA256();

	  BlockHash$2.call(this);
	  this.h = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash$2);
	var _256 = SHA256;

	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;

	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;

	  for (var i = 0; i < 16; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i++)
	    W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);

	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];

	  minimalisticAssert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
	    var T1 = sum32_5$2(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);
	    var T2 = sum32$2(s0_256$1(a), maj32$1(a, b, c));
	    h = g;
	    g = f;
	    f = e;
	    e = sum32$2(d, T1);
	    d = c;
	    c = b;
	    b = a;
	    a = sum32$2(T1, T2);
	  }

	  this.h[0] = sum32$2(this.h[0], a);
	  this.h[1] = sum32$2(this.h[1], b);
	  this.h[2] = sum32$2(this.h[2], c);
	  this.h[3] = sum32$2(this.h[3], d);
	  this.h[4] = sum32$2(this.h[4], e);
	  this.h[5] = sum32$2(this.h[5], f);
	  this.h[6] = sum32$2(this.h[6], g);
	  this.h[7] = sum32$2(this.h[7], h);
	};

	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function SHA224() {
	  if (!(this instanceof SHA224))
	    return new SHA224();

	  _256.call(this);
	  this.h = [
	    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
	    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, _256);
	var _224 = SHA224;

	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;

	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
	    return utils.split32(this.h.slice(0, 7), 'big');
	};

	var rotr64_hi$1 = utils.rotr64_hi;
	var rotr64_lo$1 = utils.rotr64_lo;
	var shr64_hi$1 = utils.shr64_hi;
	var shr64_lo$1 = utils.shr64_lo;
	var sum64$1 = utils.sum64;
	var sum64_hi$1 = utils.sum64_hi;
	var sum64_lo$1 = utils.sum64_lo;
	var sum64_4_hi$1 = utils.sum64_4_hi;
	var sum64_4_lo$1 = utils.sum64_4_lo;
	var sum64_5_hi$1 = utils.sum64_5_hi;
	var sum64_5_lo$1 = utils.sum64_5_lo;

	var BlockHash$3 = common.BlockHash;

	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];

	function SHA512() {
	  if (!(this instanceof SHA512))
	    return new SHA512();

	  BlockHash$3.call(this);
	  this.h = [
	    0x6a09e667, 0xf3bcc908,
	    0xbb67ae85, 0x84caa73b,
	    0x3c6ef372, 0xfe94f82b,
	    0xa54ff53a, 0x5f1d36f1,
	    0x510e527f, 0xade682d1,
	    0x9b05688c, 0x2b3e6c1f,
	    0x1f83d9ab, 0xfb41bd6b,
	    0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash$3);
	var _512 = SHA512;

	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;

	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;

	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
	    W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
	    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
	    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
	    var c1_hi = W[i - 14];  // i - 7
	    var c1_lo = W[i - 13];
	    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
	    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
	    var c3_hi = W[i - 32];  // i - 16
	    var c3_lo = W[i - 31];

	    W[i] = sum64_4_hi$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	    W[i + 1] = sum64_4_lo$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo);
	  }
	};

	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);

	  var W = this.W;

	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];

	  minimalisticAssert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
	    var c0_hi = hh;
	    var c0_lo = hl;
	    var c1_hi = s1_512_hi(eh, el);
	    var c1_lo = s1_512_lo(eh, el);
	    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
	    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
	    var c3_hi = this.k[i];
	    var c3_lo = this.k[i + 1];
	    var c4_hi = W[i];
	    var c4_lo = W[i + 1];

	    var T1_hi = sum64_5_hi$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);
	    var T1_lo = sum64_5_lo$1(
	      c0_hi, c0_lo,
	      c1_hi, c1_lo,
	      c2_hi, c2_lo,
	      c3_hi, c3_lo,
	      c4_hi, c4_lo);

	    c0_hi = s0_512_hi(ah, al);
	    c0_lo = s0_512_lo(ah, al);
	    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
	    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

	    var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);
	    var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);

	    hh = gh;
	    hl = gl;

	    gh = fh;
	    gl = fl;

	    fh = eh;
	    fl = el;

	    eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);
	    el = sum64_lo$1(dl, dl, T1_hi, T1_lo);

	    dh = ch;
	    dl = cl;

	    ch = bh;
	    cl = bl;

	    bh = ah;
	    bl = al;

	    ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);
	    al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);
	  }

	  sum64$1(this.h, 0, ah, al);
	  sum64$1(this.h, 2, bh, bl);
	  sum64$1(this.h, 4, ch, cl);
	  sum64$1(this.h, 6, dh, dl);
	  sum64$1(this.h, 8, eh, el);
	  sum64$1(this.h, 10, fh, fl);
	  sum64$1(this.h, 12, gh, gl);
	  sum64$1(this.h, 14, hh, hl);
	};

	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'big');
	  else
	    return utils.split32(this.h, 'big');
	};

	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 28);
	  var c1_hi = rotr64_hi$1(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi$1(xl, xh, 7);  // 39

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 28);
	  var c1_lo = rotr64_lo$1(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo$1(xl, xh, 7);  // 39

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 14);
	  var c1_hi = rotr64_hi$1(xh, xl, 18);
	  var c2_hi = rotr64_hi$1(xl, xh, 9);  // 41

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 14);
	  var c1_lo = rotr64_lo$1(xh, xl, 18);
	  var c2_lo = rotr64_lo$1(xl, xh, 9);  // 41

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 1);
	  var c1_hi = rotr64_hi$1(xh, xl, 8);
	  var c2_hi = shr64_hi$1(xh, xl, 7);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 1);
	  var c1_lo = rotr64_lo$1(xh, xl, 8);
	  var c2_lo = shr64_lo$1(xh, xl, 7);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi$1(xh, xl, 19);
	  var c1_hi = rotr64_hi$1(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi$1(xh, xl, 6);

	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo$1(xh, xl, 19);
	  var c1_lo = rotr64_lo$1(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo$1(xh, xl, 6);

	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
	    r += 0x100000000;
	  return r;
	}

	function SHA384() {
	  if (!(this instanceof SHA384))
	    return new SHA384();

	  _512.call(this);
	  this.h = [
	    0xcbbb9d5d, 0xc1059ed8,
	    0x629a292a, 0x367cd507,
	    0x9159015a, 0x3070dd17,
	    0x152fecd8, 0xf70e5939,
	    0x67332667, 0xffc00b31,
	    0x8eb44a87, 0x68581511,
	    0xdb0c2e0d, 0x64f98fa7,
	    0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, _512);
	var _384 = SHA384;

	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;

	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
	    return utils.split32(this.h.slice(0, 12), 'big');
	};

	var sha1 = _1;
	var sha224 = _224;
	var sha256 = _256;
	var sha384 = _384;
	var sha512 = _512;

	var sha = {
		sha1: sha1,
		sha224: sha224,
		sha256: sha256,
		sha384: sha384,
		sha512: sha512
	};

	var rotl32$2 = utils.rotl32;
	var sum32$3 = utils.sum32;
	var sum32_3$1 = utils.sum32_3;
	var sum32_4$2 = utils.sum32_4;
	var BlockHash$4 = common.BlockHash;

	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
	    return new RIPEMD160();

	  BlockHash$4.call(this);

	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash$4);
	var ripemd160 = RIPEMD160;

	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;

	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
	    var T = sum32$3(
	      rotl32$2(
	        sum32_4$2(A, f(j, B, C, D), msg[r$1[j] + start], K(j)),
	        s[j]),
	      E);
	    A = E;
	    E = D;
	    D = rotl32$2(C, 10);
	    C = B;
	    B = T;
	    T = sum32$3(
	      rotl32$2(
	        sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
	        sh[j]),
	      Eh);
	    Ah = Eh;
	    Eh = Dh;
	    Dh = rotl32$2(Ch, 10);
	    Ch = Bh;
	    Bh = T;
	  }
	  T = sum32_3$1(this.h[1], C, Dh);
	  this.h[1] = sum32_3$1(this.h[2], D, Eh);
	  this.h[2] = sum32_3$1(this.h[3], E, Ah);
	  this.h[3] = sum32_3$1(this.h[4], A, Bh);
	  this.h[4] = sum32_3$1(this.h[0], B, Ch);
	  this.h[0] = T;
	};

	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
	    return utils.toHex32(this.h, 'little');
	  else
	    return utils.split32(this.h, 'little');
	};

	function f(j, x, y, z) {
	  if (j <= 15)
	    return x ^ y ^ z;
	  else if (j <= 31)
	    return (x & y) | ((~x) & z);
	  else if (j <= 47)
	    return (x | (~y)) ^ z;
	  else if (j <= 63)
	    return (x & z) | (y & (~z));
	  else
	    return x ^ (y | (~z));
	}

	function K(j) {
	  if (j <= 15)
	    return 0x00000000;
	  else if (j <= 31)
	    return 0x5a827999;
	  else if (j <= 47)
	    return 0x6ed9eba1;
	  else if (j <= 63)
	    return 0x8f1bbcdc;
	  else
	    return 0xa953fd4e;
	}

	function Kh(j) {
	  if (j <= 15)
	    return 0x50a28be6;
	  else if (j <= 31)
	    return 0x5c4dd124;
	  else if (j <= 47)
	    return 0x6d703ef3;
	  else if (j <= 63)
	    return 0x7a6d76e9;
	  else
	    return 0x00000000;
	}

	var r$1 = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];

	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];

	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];

	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];

	var ripemd = {
		ripemd160: ripemd160
	};

	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
	    return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;

	  this._init(utils.toArray(key, enc));
	}
	var hmac = Hmac;

	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
	    key = new this.Hash().update(key).digest();
	  minimalisticAssert(key.length <= this.blockSize);

	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
	    key.push(0);

	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);

	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
	    key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};

	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};

	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};

	var hash_1 = createCommonjsModule(function (module, exports) {
	var hash = exports;

	hash.utils = utils;
	hash.common = common;
	hash.sha = sha;
	hash.ripemd = ripemd;
	hash.hmac = hmac;

	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	});

	var secp256k1 = {
	  doubles: {
	    step: 4,
	    points: [
	      [
	        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
	        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
	      ],
	      [
	        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
	        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
	      ],
	      [
	        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
	        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
	      ],
	      [
	        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
	        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
	      ],
	      [
	        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
	        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
	      ],
	      [
	        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
	        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
	      ],
	      [
	        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
	        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
	      ],
	      [
	        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
	        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
	      ],
	      [
	        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
	        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
	      ],
	      [
	        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
	        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
	      ],
	      [
	        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
	        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
	      ],
	      [
	        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
	        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
	      ],
	      [
	        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
	        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
	      ],
	      [
	        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
	        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
	      ],
	      [
	        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
	        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
	      ],
	      [
	        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
	        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
	      ],
	      [
	        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
	        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
	      ],
	      [
	        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
	        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
	      ],
	      [
	        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
	        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
	      ],
	      [
	        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
	        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
	      ],
	      [
	        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
	        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
	      ],
	      [
	        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
	        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
	      ],
	      [
	        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
	        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
	      ],
	      [
	        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
	        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
	      ],
	      [
	        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
	        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
	      ],
	      [
	        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
	        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
	      ],
	      [
	        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
	        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
	      ],
	      [
	        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
	        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
	      ],
	      [
	        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
	        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
	      ],
	      [
	        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
	        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
	      ],
	      [
	        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
	        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
	      ],
	      [
	        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
	        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
	      ],
	      [
	        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
	        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
	      ],
	      [
	        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
	        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
	      ],
	      [
	        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
	        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
	      ],
	      [
	        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
	        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
	      ],
	      [
	        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
	        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
	      ],
	      [
	        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
	        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
	      ],
	      [
	        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
	        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
	      ],
	      [
	        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
	        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
	      ],
	      [
	        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
	        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
	      ],
	      [
	        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
	        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
	      ],
	      [
	        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
	        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
	      ],
	      [
	        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
	        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
	      ],
	      [
	        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
	        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
	      ],
	      [
	        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
	        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
	      ],
	      [
	        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
	        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
	      ],
	      [
	        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
	        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
	      ],
	      [
	        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
	        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
	      ],
	      [
	        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
	        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
	      ],
	      [
	        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
	        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
	      ],
	      [
	        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
	        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
	      ],
	      [
	        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
	        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
	      ],
	      [
	        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
	        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
	      ],
	      [
	        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
	        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
	      ],
	      [
	        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
	        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
	      ],
	      [
	        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
	        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
	      ],
	      [
	        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
	        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
	      ],
	      [
	        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
	        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
	      ],
	      [
	        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
	        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
	      ],
	      [
	        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
	        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
	      ],
	      [
	        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
	        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
	      ],
	      [
	        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
	        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
	      ],
	      [
	        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
	        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
	      ],
	      [
	        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
	        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
	      ]
	    ]
	  },
	  naf: {
	    wnd: 7,
	    points: [
	      [
	        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
	        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
	      ],
	      [
	        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
	        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
	      ],
	      [
	        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
	        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
	      ],
	      [
	        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
	        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
	      ],
	      [
	        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
	        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
	      ],
	      [
	        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
	        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
	      ],
	      [
	        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
	        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
	      ],
	      [
	        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
	        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
	      ],
	      [
	        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
	        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
	      ],
	      [
	        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
	        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
	      ],
	      [
	        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
	        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
	      ],
	      [
	        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
	        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
	      ],
	      [
	        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
	        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
	      ],
	      [
	        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
	        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
	      ],
	      [
	        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
	        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
	      ],
	      [
	        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
	        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
	      ],
	      [
	        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
	        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
	      ],
	      [
	        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
	        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
	      ],
	      [
	        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
	        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
	      ],
	      [
	        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
	        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
	      ],
	      [
	        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
	        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
	      ],
	      [
	        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
	        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
	      ],
	      [
	        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
	        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
	      ],
	      [
	        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
	        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
	      ],
	      [
	        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
	        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
	      ],
	      [
	        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
	        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
	      ],
	      [
	        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
	        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
	      ],
	      [
	        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
	        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
	      ],
	      [
	        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
	        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
	      ],
	      [
	        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
	        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
	      ],
	      [
	        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
	        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
	      ],
	      [
	        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
	        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
	      ],
	      [
	        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
	        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
	      ],
	      [
	        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
	        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
	      ],
	      [
	        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
	        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
	      ],
	      [
	        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
	        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
	      ],
	      [
	        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
	        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
	      ],
	      [
	        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
	        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
	      ],
	      [
	        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
	        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
	      ],
	      [
	        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
	        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
	      ],
	      [
	        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
	        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
	      ],
	      [
	        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
	        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
	      ],
	      [
	        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
	        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
	      ],
	      [
	        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
	        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
	      ],
	      [
	        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
	        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
	      ],
	      [
	        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
	        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
	      ],
	      [
	        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
	        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
	      ],
	      [
	        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
	        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
	      ],
	      [
	        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
	        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
	      ],
	      [
	        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
	        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
	      ],
	      [
	        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
	        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
	      ],
	      [
	        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
	        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
	      ],
	      [
	        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
	        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
	      ],
	      [
	        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
	        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
	      ],
	      [
	        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
	        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
	      ],
	      [
	        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
	        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
	      ],
	      [
	        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
	        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
	      ],
	      [
	        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
	        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
	      ],
	      [
	        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
	        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
	      ],
	      [
	        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
	        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
	      ],
	      [
	        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
	        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
	      ],
	      [
	        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
	        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
	      ],
	      [
	        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
	        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
	      ],
	      [
	        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
	        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
	      ],
	      [
	        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
	        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
	      ],
	      [
	        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
	        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
	      ],
	      [
	        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
	        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
	      ],
	      [
	        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
	        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
	      ],
	      [
	        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
	        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
	      ],
	      [
	        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
	        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
	      ],
	      [
	        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
	        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
	      ],
	      [
	        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
	        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
	      ],
	      [
	        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
	        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
	      ],
	      [
	        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
	        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
	      ],
	      [
	        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
	        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
	      ],
	      [
	        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
	        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
	      ],
	      [
	        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
	        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
	      ],
	      [
	        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
	        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
	      ],
	      [
	        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
	        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
	      ],
	      [
	        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
	        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
	      ],
	      [
	        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
	        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
	      ],
	      [
	        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
	        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
	      ],
	      [
	        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
	        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
	      ],
	      [
	        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
	        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
	      ],
	      [
	        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
	        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
	      ],
	      [
	        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
	        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
	      ],
	      [
	        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
	        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
	      ],
	      [
	        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
	        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
	      ],
	      [
	        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
	        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
	      ],
	      [
	        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
	        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
	      ],
	      [
	        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
	        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
	      ],
	      [
	        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
	        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
	      ],
	      [
	        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
	        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
	      ],
	      [
	        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
	        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
	      ],
	      [
	        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
	        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
	      ],
	      [
	        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
	        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
	      ],
	      [
	        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
	        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
	      ],
	      [
	        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
	        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
	      ],
	      [
	        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
	        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
	      ],
	      [
	        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
	        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
	      ],
	      [
	        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
	        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
	      ],
	      [
	        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
	        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
	      ],
	      [
	        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
	        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
	      ],
	      [
	        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
	        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
	      ],
	      [
	        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
	        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
	      ],
	      [
	        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
	        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
	      ],
	      [
	        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
	        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
	      ],
	      [
	        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
	        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
	      ],
	      [
	        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
	        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
	      ],
	      [
	        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
	        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
	      ],
	      [
	        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
	        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
	      ],
	      [
	        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
	        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
	      ],
	      [
	        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
	        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
	      ],
	      [
	        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
	        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
	      ],
	      [
	        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
	        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
	      ],
	      [
	        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
	        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
	      ],
	      [
	        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
	        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
	      ],
	      [
	        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
	        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
	      ],
	      [
	        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
	        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
	      ],
	      [
	        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
	        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
	      ],
	      [
	        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
	        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
	      ],
	      [
	        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
	        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
	      ],
	      [
	        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
	        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
	      ],
	      [
	        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
	        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
	      ],
	      [
	        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
	        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
	      ],
	      [
	        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
	        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
	      ],
	      [
	        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
	        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
	      ]
	    ]
	  }
	};

	var curves_1 = createCommonjsModule(function (module, exports) {

	var curves = exports;





	var assert$$1 = utils_1$1.assert;

	function PresetCurve(options) {
	  if (options.type === 'short')
	    this.curve = new curve_1.short(options);
	  else if (options.type === 'edwards')
	    this.curve = new curve_1.edwards(options);
	  else
	    this.curve = new curve_1.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;

	  assert$$1(this.g.validate(), 'Invalid curve');
	  assert$$1(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;

	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
	    configurable: true,
	    enumerable: true,
	    get: function() {
	      var curve = new PresetCurve(options);
	      Object.defineProperty(curves, name, {
	        configurable: true,
	        enumerable: true,
	        value: curve
	      });
	      return curve;
	    }
	  });
	}

	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
	    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
	  ]
	});

	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
	    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
	  ]
	});

	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
	    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
	  ]
	});

	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
	     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
	     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash_1.sha384,
	  gRed: false,
	  g: [
	    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
	    '5502f25d bf55296c 3a545e38 72760ab7',
	    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
	    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
	  ]
	});

	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
	     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
	     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
	     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
	     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash_1.sha512,
	  gRed: false,
	  g: [
	    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
	    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
	    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
	    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
	    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
	    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
	  ]
	});

	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '9'
	  ]
	});

	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash_1.sha256,
	  gRed: false,
	  g: [
	    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

	    // 4/5
	    '6666666666666666666666666666666666666666666666666666666666666658'
	  ]
	});

	var pre;
	try {
	  pre = secp256k1;
	} catch (e) {
	  pre = undefined;
	}

	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash_1.sha256,

	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
	    {
	      a: '3086d221a7d46bcde86c90e49284eb15',
	      b: '-e4437ed6010e88286f547fa90abfe4c3'
	    },
	    {
	      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
	      b: '3086d221a7d46bcde86c90e49284eb15'
	    }
	  ],

	  gRed: false,
	  g: [
	    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
	    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
	    pre
	  ]
	});
	});

	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
	    return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;

	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;

	  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	var hmacDrbg = HmacDRBG;

	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);

	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
	    this.K[i] = 0x00;
	    this.V[i] = 0x01;
	  }

	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};

	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash_1.hmac(this.hash, this.K);
	};

	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
	                 .update(this.V)
	                 .update([ 0x00 ]);
	  if (seed)
	    kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
	    return;

	  this.K = this._hmac()
	               .update(this.V)
	               .update([ 0x01 ])
	               .update(seed)
	               .digest();
	  this.V = this._hmac().update(this.V).digest();
	};

	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
	    addEnc = add;
	    add = entropyEnc;
	    entropyEnc = null;
	  }

	  entropy = utils_1.toArray(entropy, entropyEnc);
	  add = utils_1.toArray(add, addEnc);

	  minimalisticAssert(entropy.length >= (this.minEntropy / 8),
	         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};

	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
	    throw new Error('Reseed is required');

	  // Optional encoding
	  if (typeof enc !== 'string') {
	    addEnc = add;
	    add = enc;
	    enc = null;
	  }

	  // Optional additional data
	  if (add) {
	    add = utils_1.toArray(add, addEnc || 'hex');
	    this._update(add);
	  }

	  var temp = [];
	  while (temp.length < len) {
	    this.V = this._hmac().update(this.V).digest();
	    temp = temp.concat(this.V);
	  }

	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils_1.encode(res, enc);
	};

	var assert$6 = utils_1$1.assert;

	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;

	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
	    this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
	    this._importPublic(options.pub, options.pubEnc);
	}
	var key = KeyPair;

	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
	    return pub;

	  return new KeyPair(ec, {
	    pub: pub,
	    pubEnc: enc
	  });
	};

	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
	    return priv;

	  return new KeyPair(ec, {
	    priv: priv,
	    privEnc: enc
	  });
	};

	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();

	  if (pub.isInfinity())
	    return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
	    return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
	    return { result: false, reason: 'Public key * N != O' };

	  return { result: true, reason: null };
	};

	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
	    enc = compact;
	    compact = null;
	  }

	  if (!this.pub)
	    this.pub = this.ec.g.mul(this.priv);

	  if (!enc)
	    return this.pub;

	  return this.pub.encode(enc, compact);
	};

	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
	    return this.priv.toString(16, 2);
	  else
	    return this.priv;
	};

	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new bn(key, enc || 16);

	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};

	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
	    // Montgomery points only have an `x` coordinate.
	    // Weierstrass/Edwards points on the other hand have both `x` and
	    // `y` coordinates.
	    if (this.ec.curve.type === 'mont') {
	      assert$6(key.x, 'Need x coordinate');
	    } else if (this.ec.curve.type === 'short' ||
	               this.ec.curve.type === 'edwards') {
	      assert$6(key.x && key.y, 'Need both x and y coordinate');
	    }
	    this.pub = this.ec.curve.point(key.x, key.y);
	    return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};

	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  return pub.mul(this.priv).getX();
	};

	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};

	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};

	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
	         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};

	var assert$7 = utils_1$1.assert;

	function Signature(options, enc) {
	  if (options instanceof Signature)
	    return options;

	  if (this._importDER(options, enc))
	    return;

	  assert$7(options.r && options.s, 'Signature without r or s');
	  this.r = new bn(options.r, 16);
	  this.s = new bn(options.s, 16);
	  if (options.recoveryParam === undefined)
	    this.recoveryParam = null;
	  else
	    this.recoveryParam = options.recoveryParam;
	}
	var signature = Signature;

	function Position() {
	  this.place = 0;
	}

	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
	    return initial;
	  }
	  var octetLen = initial & 0xf;
	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
	    val <<= 8;
	    val |= buf[off];
	  }
	  p.place = off;
	  return val;
	}

	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
	    i++;
	  }
	  if (i === 0) {
	    return buf;
	  }
	  return buf.slice(i);
	}

	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils_1$1.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
	    return false;
	  }
	  var len = getLength(data, p);
	  if ((len + p.place) !== data.length) {
	    return false;
	  }
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var rlen = getLength(data, p);
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
	    return false;
	  }
	  var slen = getLength(data, p);
	  if (data.length !== slen + p.place) {
	    return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0 && (r[1] & 0x80)) {
	    r = r.slice(1);
	  }
	  if (s[0] === 0 && (s[1] & 0x80)) {
	    s = s.slice(1);
	  }

	  this.r = new bn(r);
	  this.s = new bn(s);
	  this.recoveryParam = null;

	  return true;
	};

	function constructLength(arr, len) {
	  if (len < 0x80) {
	    arr.push(len);
	    return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
	    arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}

	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();

	  // Pad values
	  if (r[0] & 0x80)
	    r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
	    s = [ 0 ].concat(s);

	  r = rmPadding(r);
	  s = rmPadding(s);

	  while (!s[0] && !(s[1] & 0x80)) {
	    s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils_1$1.encode(res, enc);
	};

	var assert$8 = utils_1$1.assert;




	function EC(options) {
	  if (!(this instanceof EC))
	    return new EC(options);

	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
	    assert$8(curves_1.hasOwnProperty(options), 'Unknown curve ' + options);

	    options = curves_1[options];
	  }

	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves_1.PresetCurve)
	    options = { curve: options };

	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;

	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);

	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	var ec = EC;

	EC.prototype.keyPair = function keyPair(options) {
	  return new key(this, options);
	};

	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return key.fromPrivate(this, priv, enc);
	};

	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return key.fromPublic(this, pub, enc);
	};

	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
	    options = {};

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8',
	    entropy: options.entropy || brorand(this.hash.hmacStrength),
	    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
	    nonce: this.n.toArray()
	  });

	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new bn(2));
	  do {
	    var priv = new bn(drbg.generate(bytes));
	    if (priv.cmp(ns2) > 0)
	      continue;

	    priv.iaddn(1);
	    return this.keyFromPrivate(priv);
	  } while (true);
	};

	EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
	    msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
	    return msg.sub(this.n);
	  else
	    return msg;
	};

	EC.prototype.sign = function sign(msg, key$$1, enc, options) {
	  if (typeof enc === 'object') {
	    options = enc;
	    enc = null;
	  }
	  if (!options)
	    options = {};

	  key$$1 = this.keyFromPrivate(key$$1, enc);
	  msg = this._truncateToN(new bn(msg, 16));

	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key$$1.getPrivate().toArray('be', bytes);

	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);

	  // Instantiate Hmac_DRBG
	  var drbg = new hmacDrbg({
	    hash: this.hash,
	    entropy: bkey,
	    nonce: nonce,
	    pers: options.pers,
	    persEnc: options.persEnc || 'utf8'
	  });

	  // Number of bytes to generate
	  var ns1 = this.n.sub(new bn(1));

	  for (var iter = 0; true; iter++) {
	    var k = options.k ?
	        options.k(iter) :
	        new bn(drbg.generate(this.n.byteLength()));
	    k = this._truncateToN(k, true);
	    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
	      continue;

	    var kp = this.g.mul(k);
	    if (kp.isInfinity())
	      continue;

	    var kpX = kp.getX();
	    var r = kpX.umod(this.n);
	    if (r.cmpn(0) === 0)
	      continue;

	    var s = k.invm(this.n).mul(r.mul(key$$1.getPrivate()).iadd(msg));
	    s = s.umod(this.n);
	    if (s.cmpn(0) === 0)
	      continue;

	    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
	                        (kpX.cmp(r) !== 0 ? 2 : 0);

	    // Use complement of `s`, if it is > `n / 2`
	    if (options.canonical && s.cmp(this.nh) > 0) {
	      s = this.n.sub(s);
	      recoveryParam ^= 1;
	    }

	    return new signature({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};

	EC.prototype.verify = function verify(msg, signature$$1, key$$1, enc) {
	  msg = this._truncateToN(new bn(msg, 16));
	  key$$1 = this.keyFromPublic(key$$1, enc);
	  signature$$1 = new signature(signature$$1, 'hex');

	  // Perform primitive values validation
	  var r = signature$$1.r;
	  var s = signature$$1.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
	    return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
	    return false;

	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);

	  if (!this.curve._maxwellTrick) {
	    var p = this.g.mulAdd(u1, key$$1.getPublic(), u2);
	    if (p.isInfinity())
	      return false;

	    return p.getX().umod(this.n).cmp(r) === 0;
	  }

	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K

	  var p = this.g.jmulAdd(u1, key$$1.getPublic(), u2);
	  if (p.isInfinity())
	    return false;

	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};

	EC.prototype.recoverPubKey = function(msg, signature$$1, j, enc) {
	  assert$8((3 & j) === j, 'The recovery param is more than two bits');
	  signature$$1 = new signature(signature$$1, enc);

	  var n = this.n;
	  var e = new bn(msg);
	  var r = signature$$1.r;
	  var s = signature$$1.s;

	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
	    throw new Error('Unable to find sencond key candinate');

	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
	    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
	    r = this.curve.pointFromX(r, isYOdd);

	  var rInv = signature$$1.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);

	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};

	EC.prototype.getKeyRecoveryParam = function(e, signature$$1, Q, enc) {
	  signature$$1 = new signature(signature$$1, enc);
	  if (signature$$1.recoveryParam !== null)
	    return signature$$1.recoveryParam;

	  for (var i = 0; i < 4; i++) {
	    var Qprime;
	    try {
	      Qprime = this.recoverPubKey(e, signature$$1, i);
	    } catch (e) {
	      continue;
	    }

	    if (Qprime.eq(Q))
	      return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};

	var assert$9 = utils_1$1.assert;
	var parseBytes = utils_1$1.parseBytes;
	var cachedProperty = utils_1$1.cachedProperty;

	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair$1(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes(params.secret);
	  if (eddsa.isPoint(params.pub))
	    this._pub = params.pub;
	  else
	    this._pubBytes = parseBytes(params.pub);
	}

	KeyPair$1.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair$1)
	    return pub;
	  return new KeyPair$1(eddsa, { pub: pub });
	};

	KeyPair$1.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair$1)
	    return secret;
	  return new KeyPair$1(eddsa, { secret: secret });
	};

	KeyPair$1.prototype.secret = function secret() {
	  return this._secret;
	};

	cachedProperty(KeyPair$1, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});

	cachedProperty(KeyPair$1, 'pub', function pub() {
	  if (this._pubBytes)
	    return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});

	cachedProperty(KeyPair$1, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;

	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;

	  return a;
	});

	cachedProperty(KeyPair$1, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});

	cachedProperty(KeyPair$1, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});

	cachedProperty(KeyPair$1, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});

	KeyPair$1.prototype.sign = function sign(message) {
	  assert$9(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};

	KeyPair$1.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};

	KeyPair$1.prototype.getSecret = function getSecret(enc) {
	  assert$9(this._secret, 'KeyPair is public only');
	  return utils_1$1.encode(this.secret(), enc);
	};

	KeyPair$1.prototype.getPublic = function getPublic(enc) {
	  return utils_1$1.encode(this.pubBytes(), enc);
	};

	var key$1 = KeyPair$1;

	var assert$10 = utils_1$1.assert;
	var cachedProperty$1 = utils_1$1.cachedProperty;
	var parseBytes$1 = utils_1$1.parseBytes;

	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature$1(eddsa, sig) {
	  this.eddsa = eddsa;

	  if (typeof sig !== 'object')
	    sig = parseBytes$1(sig);

	  if (Array.isArray(sig)) {
	    sig = {
	      R: sig.slice(0, eddsa.encodingLength),
	      S: sig.slice(eddsa.encodingLength)
	    };
	  }

	  assert$10(sig.R && sig.S, 'Signature without R or S');

	  if (eddsa.isPoint(sig.R))
	    this._R = sig.R;
	  if (sig.S instanceof bn)
	    this._S = sig.S;

	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}

	cachedProperty$1(Signature$1, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});

	cachedProperty$1(Signature$1, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});

	cachedProperty$1(Signature$1, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});

	cachedProperty$1(Signature$1, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});

	Signature$1.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};

	Signature$1.prototype.toHex = function toHex() {
	  return utils_1$1.encode(this.toBytes(), 'hex').toUpperCase();
	};

	var signature$1 = Signature$1;

	var assert$11 = utils_1$1.assert;
	var parseBytes$2 = utils_1$1.parseBytes;



	function EDDSA(curve) {
	  assert$11(curve === 'ed25519', 'only tested with ed25519 so far');

	  if (!(this instanceof EDDSA))
	    return new EDDSA(curve);

	  var curve = curves_1[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);

	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash_1.sha512;
	}

	var eddsa = EDDSA;

	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes$2(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
	               .mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};

	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes$2(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};

	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
	    hash.update(arguments[i]);
	  return utils_1$1.intFromLE(hash.digest()).umod(this.curve.n);
	};

	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return key$1.fromPublic(this, pub);
	};

	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return key$1.fromSecret(this, secret);
	};

	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof signature$1)
	    return sig;
	  return new signature$1(this, sig);
	};

	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};

	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils_1$1.parseBytes(bytes);

	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

	  var y = utils_1$1.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};

	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};

	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils_1$1.intFromLE(bytes);
	};

	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};

	var require$$0 = getCjsExportFromNamespace(_package$1)

	var elliptic_1 = createCommonjsModule(function (module, exports) {

	var elliptic = exports;

	elliptic.version = require$$0.version;
	elliptic.utils = utils_1$1;
	elliptic.rand = brorand;
	elliptic.curve = curve_1;
	elliptic.curves = curves_1;

	// Protocols
	elliptic.ec = ec;
	elliptic.eddsa = eddsa;
	});

	var elliptic = createCommonjsModule(function (module, exports) {
	var Buffer = safeBuffer.Buffer;


	var EC = elliptic_1.ec;



	var ec = new EC('secp256k1');
	var ecparams = ec.curve;

	function loadCompressedPublicKey (first, xBuffer) {
	  var x = new bn(xBuffer);

	  // overflow
	  if (x.cmp(ecparams.p) >= 0) return null
	  x = x.toRed(ecparams.red);

	  // compute corresponding Y
	  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
	  if ((first === 0x03) !== y.isOdd()) y = y.redNeg();

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadUncompressedPublicKey (first, xBuffer, yBuffer) {
	  var x = new bn(xBuffer);
	  var y = new bn(yBuffer);

	  // overflow
	  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null

	  x = x.toRed(ecparams.red);
	  y = y.toRed(ecparams.red);

	  // is odd flag
	  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null

	  // x*x*x + b = y*y
	  var x3 = x.redSqr().redIMul(x);
	  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null

	  return ec.keyPair({ pub: { x: x, y: y } })
	}

	function loadPublicKey (publicKey) {
	  var first = publicKey[0];
	  switch (first) {
	    case 0x02:
	    case 0x03:
	      if (publicKey.length !== 33) return null
	      return loadCompressedPublicKey(first, publicKey.slice(1, 33))
	    case 0x04:
	    case 0x06:
	    case 0x07:
	      if (publicKey.length !== 65) return null
	      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))
	    default:
	      return null
	  }
	}

	exports.privateKeyVerify = function (privateKey) {
	  var bn$$1 = new bn(privateKey);
	  return bn$$1.cmp(ecparams.n) < 0 && !bn$$1.isZero()
	};

	exports.privateKeyExport = function (privateKey, compressed) {
	  var d = new bn(privateKey);
	  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_EXPORT_DER_FAIL)

	  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
	};

	exports.privateKeyNegate = function (privateKey) {
	  var bn$$1 = new bn(privateKey);
	  return bn$$1.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn$$1).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)
	};

	exports.privateKeyModInverse = function (privateKey) {
	  var bn$$1 = new bn(privateKey);
	  if (bn$$1.cmp(ecparams.n) >= 0 || bn$$1.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_RANGE_INVALID)

	  return bn$$1.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)
	};

	exports.privateKeyTweakAdd = function (privateKey, tweak) {
	  var bn$$1 = new bn(tweak);
	  if (bn$$1.cmp(ecparams.n) >= 0) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

	  bn$$1.iadd(new bn(privateKey));
	  if (bn$$1.cmp(ecparams.n) >= 0) bn$$1.isub(ecparams.n);
	  if (bn$$1.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)

	  return bn$$1.toArrayLike(Buffer, 'be', 32)
	};

	exports.privateKeyTweakMul = function (privateKey, tweak) {
	  var bn$$1 = new bn(tweak);
	  if (bn$$1.cmp(ecparams.n) >= 0 || bn$$1.isZero()) throw new Error(messages$2.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)

	  bn$$1.imul(new bn(privateKey));
	  if (bn$$1.cmp(ecparams.n)) bn$$1 = bn$$1.umod(ecparams.n);

	  return bn$$1.toArrayLike(Buffer, 'be', 32)
	};

	exports.publicKeyCreate = function (privateKey, compressed) {
	  var d = new bn(privateKey);
	  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.EC_PUBLIC_KEY_CREATE_FAIL)

	  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))
	};

	exports.publicKeyConvert = function (publicKey, compressed) {
	  var pair = loadPublicKey(publicKey);
	  if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

	  return Buffer.from(pair.getPublic(compressed, true))
	};

	exports.publicKeyVerify = function (publicKey) {
	  return loadPublicKey(publicKey) !== null
	};

	exports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {
	  var pair = loadPublicKey(publicKey);
	  if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

	  tweak = new bn(tweak);
	  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

	  var point = ecparams.g.mul(tweak).add(pair.pub);
	  if (point.isInfinity()) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)

	  return Buffer.from(point.encode(true, compressed))
	};

	exports.publicKeyTweakMul = function (publicKey, tweak, compressed) {
	  var pair = loadPublicKey(publicKey);
	  if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

	  tweak = new bn(tweak);
	  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages$2.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)

	  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))
	};

	exports.publicKeyCombine = function (publicKeys, compressed) {
	  var pairs = new Array(publicKeys.length);
	  for (var i = 0; i < publicKeys.length; ++i) {
	    pairs[i] = loadPublicKey(publicKeys[i]);
	    if (pairs[i] === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)
	  }

	  var point = pairs[0].pub;
	  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub);
	  if (point.isInfinity()) throw new Error(messages$2.EC_PUBLIC_KEY_COMBINE_FAIL)

	  return Buffer.from(point.encode(true, compressed))
	};

	exports.signatureNormalize = function (signature) {
	  var r = new bn(signature.slice(0, 32));
	  var s = new bn(signature.slice(32, 64));
	  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)

	  var result = Buffer.from(signature);
	  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);

	  return result
	};

	exports.signatureExport = function (signature) {
	  var r = signature.slice(0, 32);
	  var s = signature.slice(32, 64);
	  if (new bn(r).cmp(ecparams.n) >= 0 || new bn(s).cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)

	  return { r: r, s: s }
	};

	exports.signatureImport = function (sigObj) {
	  var r = new bn(sigObj.r);
	  if (r.cmp(ecparams.n) >= 0) r = new bn(0);

	  var s = new bn(sigObj.s);
	  if (s.cmp(ecparams.n) >= 0) s = new bn(0);

	  return Buffer.concat([
	    r.toArrayLike(Buffer, 'be', 32),
	    s.toArrayLike(Buffer, 'be', 32)
	  ])
	};

	exports.sign = function (message, privateKey, noncefn, data) {
	  if (typeof noncefn === 'function') {
	    var getNonce = noncefn;
	    noncefn = function (counter) {
	      var nonce = getNonce(message, privateKey, null, data, counter);
	      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages$2.ECDSA_SIGN_FAIL)

	      return new bn(nonce)
	    };
	  }

	  var d = new bn(privateKey);
	  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages$2.ECDSA_SIGN_FAIL)

	  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data });
	  return {
	    signature: Buffer.concat([
	      result.r.toArrayLike(Buffer, 'be', 32),
	      result.s.toArrayLike(Buffer, 'be', 32)
	    ]),
	    recovery: result.recoveryParam
	  }
	};

	exports.verify = function (message, signature, publicKey) {
	  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

	  var sigr = new bn(sigObj.r);
	  var sigs = new bn(sigObj.s);
	  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)
	  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false

	  var pair = loadPublicKey(publicKey);
	  if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

	  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })
	};

	exports.recover = function (message, signature, recovery, compressed) {
	  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) };

	  var sigr = new bn(sigObj.r);
	  var sigs = new bn(sigObj.s);
	  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages$2.ECDSA_SIGNATURE_PARSE_FAIL)

	  try {
	    if (sigr.isZero() || sigs.isZero()) throw new Error()

	    var point = ec.recoverPubKey(message, sigObj, recovery);
	    return Buffer.from(point.encode(true, compressed))
	  } catch (err) {
	    throw new Error(messages$2.ECDSA_RECOVER_FAIL)
	  }
	};

	exports.ecdh = function (publicKey, privateKey) {
	  var shared = exports.ecdhUnsafe(publicKey, privateKey, true);
	  return createHash('sha256').update(shared).digest()
	};

	exports.ecdhUnsafe = function (publicKey, privateKey, compressed) {
	  var pair = loadPublicKey(publicKey);
	  if (pair === null) throw new Error(messages$2.EC_PUBLIC_KEY_PARSE_FAIL)

	  var scalar = new bn(privateKey);
	  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages$2.ECDH_FAIL)

	  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))
	};
	});
	var elliptic_1$1 = elliptic.privateKeyVerify;
	var elliptic_2 = elliptic.privateKeyExport;
	var elliptic_3 = elliptic.privateKeyNegate;
	var elliptic_4 = elliptic.privateKeyModInverse;
	var elliptic_5 = elliptic.privateKeyTweakAdd;
	var elliptic_6 = elliptic.privateKeyTweakMul;
	var elliptic_7 = elliptic.publicKeyCreate;
	var elliptic_8 = elliptic.publicKeyConvert;
	var elliptic_9 = elliptic.publicKeyVerify;
	var elliptic_10 = elliptic.publicKeyTweakAdd;
	var elliptic_11 = elliptic.publicKeyTweakMul;
	var elliptic_12 = elliptic.publicKeyCombine;
	var elliptic_13 = elliptic.signatureNormalize;
	var elliptic_14 = elliptic.signatureExport;
	var elliptic_15 = elliptic.signatureImport;
	var elliptic_16 = elliptic.sign;
	var elliptic_17 = elliptic.verify;
	var elliptic_18 = elliptic.recover;
	var elliptic_19 = elliptic.ecdh;
	var elliptic_20 = elliptic.ecdhUnsafe;

	var elliptic$1 = lib(elliptic);

	var secp256k1$1 = createCommonjsModule(function (module) {
	try {
	  module.exports = bindings;
	} catch (err) {
	  if (process.env.DEBUG) {
	    console.error('Secp256k1 bindings are not compiled. Pure JS implementation will be used.');
	  }

	  module.exports = elliptic$1;
	}
	});

	var Buffer$6 = safeBuffer.Buffer;




	var MASTER_SECRET = Buffer$6.from('Bitcoin seed', 'utf8');
	var HARDENED_OFFSET = 0x80000000;
	var LEN = 78;

	// Bitcoin hardcoded by default, can use package `coininfo` for others
	var BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E};

	function HDKey (versions) {
	  this.versions = versions || BITCOIN_VERSIONS;
	  this.depth = 0;
	  this.index = 0;
	  this._privateKey = null;
	  this._publicKey = null;
	  this.chainCode = null;
	  this._fingerprint = 0;
	  this.parentFingerprint = 0;
	}

	Object.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } });
	Object.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } });
	Object.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } });

	Object.defineProperty(HDKey.prototype, 'privateKey', {
	  get: function () {
	    return this._privateKey
	  },
	  set: function (value) {
	    assert.equal(value.length, 32, 'Private key must be 32 bytes.');
	    assert(secp256k1$1.privateKeyVerify(value) === true, 'Invalid private key');

	    this._privateKey = value;
	    this._publicKey = secp256k1$1.publicKeyCreate(value, true);
	    this._identifier = hash160(this.publicKey);
	    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
	  }
	});

	Object.defineProperty(HDKey.prototype, 'publicKey', {
	  get: function () {
	    return this._publicKey
	  },
	  set: function (value) {
	    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');
	    assert(secp256k1$1.publicKeyVerify(value) === true, 'Invalid public key');

	    this._publicKey = secp256k1$1.publicKeyConvert(value, true); // force compressed point
	    this._identifier = hash160(this.publicKey);
	    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
	    this._privateKey = null;
	  }
	});

	Object.defineProperty(HDKey.prototype, 'privateExtendedKey', {
	  get: function () {
	    if (this._privateKey) return coinstring.encode(serialize(this, this.versions.private, Buffer$6.concat([Buffer$6.alloc(1, 0), this.privateKey])))
	    else return null
	  }
	});

	Object.defineProperty(HDKey.prototype, 'publicExtendedKey', {
	  get: function () {
	    return coinstring.encode(serialize(this, this.versions.public, this.publicKey))
	  }
	});

	HDKey.prototype.derive = function (path$$1) {
	  if (path$$1 === 'm' || path$$1 === 'M' || path$$1 === "m'" || path$$1 === "M'") {
	    return this
	  }

	  var entries = path$$1.split('/');
	  var hdkey = this;
	  entries.forEach(function (c, i) {
	    if (i === 0) {
	      assert(c, 'm', 'Invalid path');
	      return
	    }

	    var hardened = (c.length > 1) && (c[c.length - 1] === "'");
	    var childIndex = parseInt(c, 10); // & (HARDENED_OFFSET - 1)
	    assert(childIndex < HARDENED_OFFSET, 'Invalid index');
	    if (hardened) childIndex += HARDENED_OFFSET;

	    hdkey = hdkey.deriveChild(childIndex);
	  });

	  return hdkey
	};

	HDKey.prototype.deriveChild = function (index) {
	  var isHardened = index >= HARDENED_OFFSET;
	  var indexBuffer = Buffer$6.allocUnsafe(4);
	  indexBuffer.writeUInt32BE(index, 0);

	  var data;

	  if (isHardened) { // Hardened child
	    assert(this.privateKey, 'Could not derive hardened child key');

	    var pk = this.privateKey;
	    var zb = Buffer$6.alloc(1, 0);
	    pk = Buffer$6.concat([zb, pk]);

	    // data = 0x00 || ser256(kpar) || ser32(index)
	    data = Buffer$6.concat([pk, indexBuffer]);
	  } else { // Normal child
	    // data = serP(point(kpar)) || ser32(index)
	    //      = serP(Kpar) || ser32(index)
	    data = Buffer$6.concat([this.publicKey, indexBuffer]);
	  }

	  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();
	  var IL = I.slice(0, 32);
	  var IR = I.slice(32);

	  var hd = new HDKey(this.versions);

	  // Private parent key -> private child key
	  if (this.privateKey) {
	    // ki = parse256(IL) + kpar (mod n)
	    try {
	      hd.privateKey = secp256k1$1.privateKeyTweakAdd(this.privateKey, IL);
	      // throw if IL >= n || (privateKey + IL) === 0
	    } catch (err) {
	      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i
	      return this.derive(index + 1)
	    }
	  // Public parent key -> public child key
	  } else {
	    // Ki = point(parse256(IL)) + Kpar
	    //    = G*IL + Kpar
	    try {
	      hd.publicKey = secp256k1$1.publicKeyTweakAdd(this.publicKey, IL, true);
	      // throw if IL >= n || (g**IL + publicKey) is infinity
	    } catch (err) {
	      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i
	      return this.derive(index + 1, isHardened)
	    }
	  }

	  hd.chainCode = IR;
	  hd.depth = this.depth + 1;
	  hd.parentFingerprint = this.fingerprint;// .readUInt32BE(0)
	  hd.index = index;

	  return hd
	};

	HDKey.prototype.sign = function (hash) {
	  return secp256k1$1.sign(hash, this.privateKey).signature
	};

	HDKey.prototype.verify = function (hash, signature) {
	  return secp256k1$1.verify(hash, signature, this.publicKey)
	};

	HDKey.prototype.toJSON = function () {
	  return {
	    xpriv: this.privateExtendedKey,
	    xpub: this.publicExtendedKey
	  }
	};

	HDKey.fromMasterSeed = function (seedBuffer, versions) {
	  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();
	  var IL = I.slice(0, 32);
	  var IR = I.slice(32);

	  var hdkey = new HDKey(versions);
	  hdkey.chainCode = IR;
	  hdkey.privateKey = IL;

	  return hdkey
	};

	HDKey.fromExtendedKey = function (base58key, versions) {
	  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
	  versions = versions || BITCOIN_VERSIONS;
	  var hdkey = new HDKey(versions);

	  var keyBuffer = coinstring.decode(base58key);

	  var version = keyBuffer.readUInt32BE(0);
	  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');

	  hdkey.depth = keyBuffer.readUInt8(4);
	  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);
	  hdkey.index = keyBuffer.readUInt32BE(9);
	  hdkey.chainCode = keyBuffer.slice(13, 45);

	  var key = keyBuffer.slice(45);
	  if (key.readUInt8(0) === 0) { // private
	    assert(version === versions.private, 'Version mismatch: version does not match private');
	    hdkey.privateKey = key.slice(1); // cut off first 0x0 byte
	  } else {
	    assert(version === versions.public, 'Version mismatch: version does not match public');
	    hdkey.publicKey = key;
	  }

	  return hdkey
	};

	HDKey.fromJSON = function (obj) {
	  return HDKey.fromExtendedKey(obj.xpriv)
	};

	function serialize (hdkey, version, key) {
	  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
	  var buffer$$1 = Buffer$6.allocUnsafe(LEN);

	  buffer$$1.writeUInt32BE(version, 0);
	  buffer$$1.writeUInt8(hdkey.depth, 4);

	  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;
	  buffer$$1.writeUInt32BE(fingerprint, 5);
	  buffer$$1.writeUInt32BE(hdkey.index, 9);

	  hdkey.chainCode.copy(buffer$$1, 13);
	  key.copy(buffer$$1, 45);

	  return buffer$$1
	}

	function hash160 (buf) {
	  var sha = crypto.createHash('sha256').update(buf).digest();
	  return crypto.createHash('rmd160').update(sha).digest()
	}

	HDKey.HARDENED_OFFSET = HARDENED_OFFSET;
	var hdkey = HDKey;

	const ADDRESS_SIZE = 34;
	const ADDRESS_PREFIX = "41";
	const ADDRESS_PREFIX_BYTE = 0x41;

	var address = {
	  ADDRESS_SIZE,
	  ADDRESS_PREFIX,
	  ADDRESS_PREFIX_BYTE,
	};

	var btoa$1 = createCommonjsModule(function (module) {
	(function () {

	  function btoa(str) {
	    var buffer$$1;

	    if (str instanceof Buffer) {
	      buffer$$1 = str;
	    } else {
	      buffer$$1 = Buffer.from(str.toString(), 'binary');
	    }

	    return buffer$$1.toString('base64');
	  }

	  module.exports = btoa;
	}());
	});

	//字符串转byteArray数据格式
	function stringToBytes(str) {
	  var bytes = new Array();
	  var len, c;
	  len = str.length;
	  for (var i = 0; i < len; i++) {
	    c = str.charCodeAt(i);
	    if (c >= 0x010000 && c <= 0x10FFFF) {
	      bytes.push(((c >> 18) & 0x07) | 0xF0);
	      bytes.push(((c >> 12) & 0x3F) | 0x80);
	      bytes.push(((c >> 6) & 0x3F) | 0x80);
	      bytes.push((c & 0x3F) | 0x80);
	    } else if (c >= 0x000800 && c <= 0x00FFFF) {
	      bytes.push(((c >> 12) & 0x0F) | 0xE0);
	      bytes.push(((c >> 6) & 0x3F) | 0x80);
	      bytes.push((c & 0x3F) | 0x80);
	    } else if (c >= 0x000080 && c <= 0x0007FF) {
	      bytes.push(((c >> 6) & 0x1F) | 0xC0);
	      bytes.push((c & 0x3F) | 0x80);
	    } else {
	      bytes.push(c & 0xFF);
	    }
	  }
	  return bytes;

	}

	/* Convert a hex char to value */
	function hexChar2byte(c) {
	  var d = 0;
	  if (c >= 'A' && c <= 'F') {
	    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;
	  }
	  else if (c >= 'a' && c <= 'f') {
	    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;
	  }
	  else if (c >= '0' && c <= '9') {
	    d = c.charCodeAt(0) - '0'.charCodeAt(0);
	  }
	  return d;
	}

	/* Check if a char is hex char */
	function isHexChar(c) {
	  if ((c >= 'A' && c <= 'F') ||
	      (c >= 'a' && c <= 'f') ||
	      (c >= '0' && c <= '9')) {
	    return 1;
	  }
	  return 0;
	}

	/* Convert HEX string to byte array */

	//16进制的ASCII字符串转为byteArray格式。
	function hexStr2byteArray(str) {
	  var byteArray = Array();
	  var d = 0;
	  var j = 0;
	  var k = 0;

	  for (let i = 0; i < str.length; i++) {
	    var c = str.charAt(i);
	    if (isHexChar(c)) {
	      d <<= 4;
	      d += hexChar2byte(c);
	      j++;
	      if (0 === (j % 2)) {
	        byteArray[k++] = d;
	        d = 0;
	      }
	    }
	  }
	  return byteArray;
	}

	//从base64字符串中解码出原文，格式为byteArray格式
	function base64DecodeFromString(string64) {
	  var b = new Base64();
	  var decodeBytes = b.decodeToByteArray(string64);
	  return decodeBytes;
	}

	//return baset64 String
	//将byteArray格式数据编码为base64字符串
	function base64EncodeToString(bytes) {
	  // var string = bytesToString(bytes);
	  var b = new Base64();
	  var string64 = b.encodeIgnoreUtf8(bytes);
	  return string64
	}

	function Base64() {

	  // private property
	  let _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

	  // public method for encoding
	  this.encode = function (input) {
	    var output = "";
	    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	    var i = 0;
	//    input = _utf8_encode(input);
	    while (i < input.length) {
	      chr1 = input.charCodeAt(i++);
	      chr2 = input.charCodeAt(i++);
	      chr3 = input.charCodeAt(i++);
	      enc1 = chr1 >> 2;
	      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	      enc4 = chr3 & 63;
	      if (isNaN(chr2)) {
	        enc3 = enc4 = 64;
	      } else if (isNaN(chr3)) {
	        enc4 = 64;
	      }
	      output = output +
	          _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
	          _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
	    }
	    return output;
	  };

	  // public method for encoding
	  this.encodeIgnoreUtf8 = function (inputBytes) {
	    var output = "";
	    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	    var i = 0;
	//    input = _utf8_encode(input);
	    while (i < inputBytes.length) {
	      chr1 = inputBytes[i++];
	      chr2 = inputBytes[i++];
	      chr3 = inputBytes[i++];
	      enc1 = chr1 >> 2;
	      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	      enc4 = chr3 & 63;
	      if (isNaN(chr2)) {
	        enc3 = enc4 = 64;
	      } else if (isNaN(chr3)) {
	        enc4 = 64;
	      }
	      output = output +
	          _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
	          _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
	    }
	    return output;
	  };

	  // public method for decoding
	  this.decode = function (input) {
	    var output = "";
	    var chr1, chr2, chr3;
	    var enc1, enc2, enc3, enc4;
	    var i = 0;
	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	    while (i < input.length) {
	      enc1 = _keyStr.indexOf(input.charAt(i++));
	      enc2 = _keyStr.indexOf(input.charAt(i++));
	      enc3 = _keyStr.indexOf(input.charAt(i++));
	      enc4 = _keyStr.indexOf(input.charAt(i++));
	      chr1 = (enc1 << 2) | (enc2 >> 4);
	      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	      chr3 = ((enc3 & 3) << 6) | enc4;
	      output = output + String.fromCharCode(chr1);
	      if (enc3 != 64) {
	        output = output + String.fromCharCode(chr2);
	      }
	      if (enc4 != 64) {
	        output = output + String.fromCharCode(chr3);
	      }
	    }
	    output = this._utf8_decode(output);
	    return output;
	  };

	  // public method for decoding
	  this.decodeToByteArray = function (input) {
	    var output = "";
	    var chr1, chr2, chr3;
	    var enc1, enc2, enc3, enc4;
	    var i = 0;
	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	    while (i < input.length) {
	      enc1 = _keyStr.indexOf(input.charAt(i++));
	      enc2 = _keyStr.indexOf(input.charAt(i++));
	      enc3 = _keyStr.indexOf(input.charAt(i++));
	      enc4 = _keyStr.indexOf(input.charAt(i++));
	      chr1 = (enc1 << 2) | (enc2 >> 4);
	      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	      chr3 = ((enc3 & 3) << 6) | enc4;
	      output = output + String.fromCharCode(chr1);
	      if (enc3 != 64) {
	        output = output + String.fromCharCode(chr2);
	      }
	      if (enc4 != 64) {
	        output = output + String.fromCharCode(chr3);
	      }
	    }
	    var outBytes = this._out2ByteArray(output);
	    return outBytes;
	  };

	  // private method for UTF-8 decoding
	  this._out2ByteArray = function (utftext) {
	    let byteArray = new Array(utftext.length);
	    let i = 0;
	    let c = 0;
	    while (i < utftext.length) {
	      c = utftext.charCodeAt(i);
	      byteArray[i] = c;
	      i++;
	    }
	    return byteArray;
	  };

	  // private method for UTF-8 encoding
	  this._utf8_encode = function (string) {
	    string = string.replace(/\r\n/g, "\n");
	    var utftext = "";
	    for (var n = 0; n < string.length; n++) {
	      var c = string.charCodeAt(n);
	      if (c < 128) {
	        utftext += String.fromCharCode(c);
	      } else if ((c > 127) && (c < 2048)) {
	        utftext += String.fromCharCode((c >> 6) | 192);
	        utftext += String.fromCharCode((c & 63) | 128);
	      } else {
	        utftext += String.fromCharCode((c >> 12) | 224);
	        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
	        utftext += String.fromCharCode((c & 63) | 128);
	      }

	    }
	    return utftext;
	  };

	  // private method for UTF-8 decoding
	  this._utf8_decode = function (utftext) {
	    var string = "";
	    var i = 0;
	    var c = c1 = c2 = 0;
	    while (i < utftext.length) {
	      c = utftext.charCodeAt(i);
	      if (c < 128) {
	        string += String.fromCharCode(c);
	        i++;
	      } else if ((c > 191) && (c < 224)) {
	        c2 = utftext.charCodeAt(i + 1);
	        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
	        i += 2;
	      } else {
	        c2 = utftext.charCodeAt(i + 1);
	        c3 = utftext.charCodeAt(i + 2);
	        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3
	            & 63));
	        i += 3;
	      }
	    }
	    return string;
	  };
	}

	function encodeString(str) {
	  return Uint8Array.from(base64DecodeFromString(btoa$1(str)));
	}

	var code = {
	  base64EncodeToString,
	  base64DecodeFromString,
	  hexStr2byteArray,
	  stringToBytes,
	  encodeString,
	};

	var ALPHABET$1 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
	var ALPHABET_MAP$1 = {};
	for(var i$1 = 0; i$1 < ALPHABET$1.length; i$1++) {
	  ALPHABET_MAP$1[ALPHABET$1.charAt(i$1)] = i$1;
	}
	var BASE$1 = 58;

	/**
	 *
	 * @param buffer
	 * @returns {string}
	 */
	function encode58(buffer$$1) {
	  if (buffer$$1.length === 0) return '';

	  var i, j, digits = [0];
	  for (i = 0; i < buffer$$1.length; i++) {
	    for (j = 0; j < digits.length; j++) digits[j] <<= 8;

	    digits[0] += buffer$$1[i];

	    var carry = 0;
	    for (j = 0; j < digits.length; ++j) {
	      digits[j] += carry;

	      carry = (digits[j] / BASE$1) | 0;
	      digits[j] %= BASE$1;
	    }

	    while (carry) {
	      digits.push(carry % BASE$1);

	      carry = (carry / BASE$1) | 0;
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; buffer$$1[i] === 0 && i < buffer$$1.length - 1; i++) digits.push(0);

	  return digits.reverse().map(function(digit) { return ALPHABET$1[digit] }).join('');
	}

	/**
	 * @param string
	 * @returns number[]
	 */
	function decode58(string) {
	  if (string.length === 0) return []

	  var i, j, bytes = [0];
	  for (i = 0; i < string.length; i++) {
	    var c = string[i];
	    if (!(c in ALPHABET_MAP$1)) throw new Error('Non-base58 character')

	    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE$1;
	    bytes[0] += ALPHABET_MAP$1[c];

	    var carry = 0;
	    for (j = 0; j < bytes.length; ++j) {
	      bytes[j] += carry;

	      carry = bytes[j] >> 8;
	      bytes[j] &= 0xff;
	    }

	    while (carry) {
	      bytes.push(carry & 0xff);

	      carry >>= 8;
	    }
	  }

	  // deal with leading zeros
	  for (i = 0; string[i] === '1' && i < string.length - 1; i++) {
	    bytes.push(0);
	  }

	  return bytes.reverse();
	}

	var base58 = {
	  encode58,
	  decode58,
	};

	var sha3 = createCommonjsModule(function (module) {
	/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.7.0
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2017
	 * @license MIT
	 */
	/*jslint bitwise: true */
	(function () {

	  var ERROR = 'input is invalid type';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
	    WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
	    root = commonjsGlobal;
	  } else if (WEB_WORKER) {
	    root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
	  var AMD = typeof undefined === 'function' && undefined.amd;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
	    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
	    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
	    '128': 168,
	    '256': 136
	  };

	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
	    Array.isArray = function (obj) {
	      return Object.prototype.toString.call(obj) === '[object Array]';
	    };
	  }

	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
	    ArrayBuffer.isView = function (obj) {
	      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
	    };
	  }

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    };
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    };
	  };

	  var createCshakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits, n, s) {
	      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
	    };
	  };

	  var createKmacOutputMethod = function (bits, padding, outputType) {
	    return function (key, message, outputBits, s) {
	      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
	    };
	  };

	  var createOutputMethods = function (method, createMethod, bits, padding) {
	    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    return createOutputMethods(method, createOutputMethod, bits, padding);
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };

	  var createCshakeMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createCshakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits, n, s) {
	      if (!n && !s) {
	        return methods['shake' + bits].create(outputBits);
	      } else {
	        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
	      }
	    };
	    method.update = function (message, outputBits, n, s) {
	      return method.create(outputBits, n, s).update(message);
	    };
	    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };

	  var createKmacMethod = function (bits, padding) {
	    var w = CSHAKE_BYTEPAD[bits];
	    var method = createKmacOutputMethod(bits, padding, 'hex');
	    method.create = function (key, outputBits, s) {
	      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
	    };
	    method.update = function (key, message, outputBits, s) {
	      return method.create(key, outputBits, s).update(message);
	    };
	    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };

	  var algorithms = [
	    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
	    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
	    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
	    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
	  ];

	  var methods = {}, methodNames = [];

	  for (var i = 0; i < algorithms.length; ++i) {
	    var algorithm = algorithms[i];
	    var bits = algorithm.bits;
	    for (var j = 0; j < bits.length; ++j) {
	      var methodName = algorithm.name + '_' + bits[j];
	      methodNames.push(methodName);
	      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
	      if (algorithm.name !== 'sha3') {
	        var newMethodName = algorithm.name + bits[j];
	        methodNames.push(newMethodName);
	        methods[newMethodName] = methods[methodName];
	      }
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.finalized = false;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0; i < 50; ++i) {
	      this.s[i] = 0;
	    }
	  }

	  Keccak.prototype.update = function (message) {
	    if (this.finalized) {
	      return;
	    }
	    var notString, type = typeof message;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (message === null) {
	          throw ERROR;
	        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
	          message = new Uint8Array(message);
	        } else if (!Array.isArray(message)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
	            throw ERROR;
	          }
	        }
	      } else {
	        throw ERROR;
	      }
	      notString = true;
	    }
	    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
	      blockCount = this.blockCount, index = 0, s = this.s, i, code;

	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1; i < blockCount + 1; ++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start; index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0; i < blockCount; ++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.encode = function (x, right) {
	    var o = x & 255, n = 1;
	    var bytes = [o];
	    x = x >> 8;
	    o = x & 255;
	    while (o > 0) {
	      bytes.unshift(o);
	      x = x >> 8;
	      o = x & 255;
	      ++n;
	    }
	    if (right) {
	      bytes.push(n);
	    } else {
	      bytes.unshift(n);
	    }
	    this.update(bytes);
	    return bytes.length;
	  };

	  Keccak.prototype.encodeString = function (str) {
	    var notString, type = typeof str;
	    if (type !== 'string') {
	      if (type === 'object') {
	        if (str === null) {
	          throw ERROR;
	        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
	          str = new Uint8Array(str);
	        } else if (!Array.isArray(str)) {
	          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
	            throw ERROR;
	          }
	        }
	      } else {
	        throw ERROR;
	      }
	      notString = true;
	    }
	    var bytes = 0, length = str.length;
	    if (notString) {
	      bytes = length;
	    } else {
	      for (var i = 0; i < str.length; ++i) {
	        var code = str.charCodeAt(i);
	        if (code < 0x80) {
	          bytes += 1;
	        } else if (code < 0x800) {
	          bytes += 2;
	        } else if (code < 0xd800 || code >= 0xe000) {
	          bytes += 3;
	        } else {
	          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
	          bytes += 4;
	        }
	      }
	    }
	    bytes += this.encode(bytes * 8);
	    this.update(str);
	    return bytes;
	  };

	  Keccak.prototype.bytepad = function (strs, w) {
	    var bytes = this.encode(w);
	    for (var i = 0; i < strs.length; ++i) {
	      bytes += this.encodeString(strs[i]);
	    }
	    var paddingBytes = w - bytes % w;
	    var zeros = [];
	    zeros.length = paddingBytes;
	    this.update(zeros);
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    if (this.finalized) {
	      return;
	    }
	    this.finalized = true;
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex === this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1; i < blockCount + 1; ++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0; i < blockCount; ++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.arrayBuffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer$$1;
	    if (extraBytes) {
	      buffer$$1 = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer$$1 = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer$$1);
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer$$1 = buffer$$1.slice(0, bytes);
	    }
	    return buffer$$1;
	  };

	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
	      extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount === 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      array[offset] = block & 0xFF;
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  function Kmac(bits, padding, outputBits) {
	    Keccak.call(this, bits, padding, outputBits);
	  }

	  Kmac.prototype = new Keccak();

	  Kmac.prototype.finalize = function () {
	    this.encode(this.outputBits, true);
	    return Keccak.prototype.finalize.call(this);
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
	      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
	      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
	      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  };

	  if (COMMON_JS) {
	    module.exports = methods;
	  } else {
	    for (i = 0; i < methodNames.length; ++i) {
	      root[methodNames[i]] = methods[methodNames[i]];
	    }
	    if (AMD) {
	      undefined(function () {
	        return methods;
	      });
	    }
	  }
	})();
	});

	var sha256$1 = createCommonjsModule(function (module, exports) {
	(function (I) {
	  function w(c, a, d) {
	    var l = 0, b = [], g = 0, f, n, k, e, h, q, y, p, m = !1, t = [], r = [], u,
	        z = !1;
	    d = d || {};
	    f = d.encoding || "UTF8";
	    u = d.numRounds || 1;
	    if (u !== parseInt(u, 10) || 1 > u) {
	      throw Error(
	          "numRounds must a integer >= 1");
	    }
	    if (0 === c.lastIndexOf("SHA-", 0)) {
	      if (q = function (b, a) {
	            return A(b, a, c)
	          }, y = function (b, a, l, f) {
	            var g, e;
	            if ("SHA-224" === c || "SHA-256" === c) {
	              g = (a + 65 >>> 9 << 4)
	                  + 15, e = 16;
	            } else {
	              throw Error(
	                  "Unexpected error in SHA-2 implementation");
	            }
	            for (; b.length <= g;) {
	              b.push(0);
	            }
	            b[a >>> 5] |= 128 << 24 - a % 32;
	            a = a + l;
	            b[g] = a & 4294967295;
	            b[g - 1] = a / 4294967296 | 0;
	            l = b.length;
	            for (a = 0; a < l; a += e) {
	              f = A(b.slice(a, a + e), f, c);
	            }
	            if ("SHA-224" === c) {
	              b = [f[0], f[1], f[2], f[3], f[4], f[5],
	                f[6]];
	            } else if ("SHA-256" === c) {
	              b = f;
	            } else {
	              throw Error(
	                  "Unexpected error in SHA-2 implementation");
	            }
	            return b
	          }, p = function (b) {
	            return b.slice()
	          }, "SHA-224" === c) {
	        h = 512, e = 224;
	      } else if ("SHA-256"
	          === c) {
	        h = 512, e = 256;
	      } else {
	        throw Error(
	            "Chosen SHA variant is not supported");
	      }
	    } else {
	      throw Error(
	          "Chosen SHA variant is not supported");
	    }
	    k = B(a, f);
	    n = x(c);
	    this.setHMACKey = function (b, a, g) {
	      var e;
	      if (!0 === m) {
	        throw Error("HMAC key already set");
	      }
	      if (!0 === z) {
	        throw Error("Cannot set HMAC key after calling update");
	      }
	      f = (g || {}).encoding || "UTF8";
	      a = B(a, f)(b);
	      b = a.binLen;
	      a = a.value;
	      e = h >>> 3;
	      g = e / 4 - 1;
	      if (e < b / 8) {
	        for (a = y(a, b, 0, x(c)); a.length <= g;) {
	          a.push(0);
	        }
	        a[g] &= 4294967040;
	      } else if (e > b / 8) {
	        for (; a.length <= g;) {
	          a.push(0);
	        }
	        a[g] &= 4294967040;
	      }
	      for (b = 0; b <= g; b += 1) {
	        t[b] = a[b] ^ 909522486, r[b] = a[b]
	            ^ 1549556828;
	      }
	      n = q(t, n);
	      l = h;
	      m = !0;
	    };
	    this.update = function (a) {
	      var c, f, e, d = 0, p = h >>> 5;
	      c = k(a, b, g);
	      a = c.binLen;
	      f = c.value;
	      c = a >>> 5;
	      for (e = 0; e < c; e += p) {
	        d + h <= a && (n = q(f.slice(e, e + p),
	            n), d += h);
	      }
	      l += d;
	      b = f.slice(d >>>
	          5);
	      g = a % h;
	      z = !0;
	    };
	    this.getHash = function (a, f) {
	      var d, h, k, q;
	      if (!0 === m) {
	        throw Error("Cannot call getHash after setting HMAC key");
	      }
	      k = C(f);
	      switch (a) {
	        case "HEX":
	          d = function (a) {
	            return D(a, e, k)
	          };
	          break;
	        case "B64":
	          d = function (a) {
	            return E(a, e, k)
	          };
	          break;
	        case "BYTES":
	          d = function (a) {
	            return F(a, e)
	          };
	          break;
	        case "ARRAYBUFFER":
	          try {
	            h = new ArrayBuffer(0);
	          } catch (v) {
	            throw Error("ARRAYBUFFER not supported by this environment");
	          }
	          d = function (a) {
	            return G(a, e)
	          };
	          break;
	        default:
	          throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER");
	      }
	      q = y(b.slice(), g, l, p(n));
	      for (h = 1; h < u; h += 1) {
	        q = y(q, e, 0, x(c));
	      }
	      return d(q)
	    };
	    this.getHMAC = function (a, f) {
	      var d, k, t, u;
	      if (!1 === m) {
	        throw Error(
	            "Cannot call getHMAC without first setting HMAC key");
	      }
	      t = C(f);
	      switch (a) {
	        case "HEX":
	          d = function (a) {
	            return D(a, e, t)
	          };
	          break;
	        case "B64":
	          d = function (a) {
	            return E(a, e, t)
	          };
	          break;
	        case "BYTES":
	          d = function (a) {
	            return F(a, e)
	          };
	          break;
	        case "ARRAYBUFFER":
	          try {
	            d = new ArrayBuffer(0);
	          } catch (v) {
	            throw Error("ARRAYBUFFER not supported by this environment");
	          }
	          d = function (a) {
	            return G(a, e)
	          };
	          break;
	        default:
	          throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");
	      }
	      k = y(b.slice(), g, l, p(n));
	      u = q(r, x(c));
	      u = y(k, e, h, u);
	      return d(u)
	    };
	  }

	  function m() {
	  }

	  function D(c, a, d) {
	    var l = "";
	    a /= 8;
	    var b, g;
	    for (b = 0; b < a; b += 1) {
	      g = c[b >>> 2] >>> 8 * (3 + b % 4
	          * -1), l += "0123456789abcdef".charAt(g >>> 4 & 15)
	          + "0123456789abcdef".charAt(g & 15);
	    }
	    return d.outputUpper ? l.toUpperCase() : l
	  }

	  function E(c, a, d) {
	    var l = "", b = a / 8, g, f, n;
	    for (g = 0; g < b; g += 3) {
	      for (f = g + 1 < b ? c[g + 1 >>> 2] : 0, n = g
	      + 2 < b ? c[g + 2 >>> 2] : 0, n = (c[g >>> 2] >>> 8 * (3 + g % 4 * -1)
	          & 255) << 16 | (f >>> 8 * (3 + (g + 1) % 4 * -1) & 255) << 8 | n >>> 8
	          * (3 + (g + 2) % 4 * -1) & 255, f = 0; 4 > f; f += 1) {
	        8 * g + 6 * f <= a
	            ? l += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(n
	            >>>
	            6 * (3 - f) & 63) : l += d.b64Pad;
	      }
	    }
	    return l
	  }

	  function F(c, a) {
	    var d = "", l = a / 8, b, g;
	    for (b = 0; b < l; b += 1) {
	      g = c[b >>> 2] >>> 8 * (3 + b % 4 * -1)
	          & 255, d += String.fromCharCode(g);
	    }
	    return d
	  }

	  function G(c, a) {
	    var d = a / 8, l, b = new ArrayBuffer(d), g;
	    g = new Uint8Array(b);
	    for (l = 0; l < d; l += 1) {
	      g[l] = c[l >>> 2] >>> 8 * (3 + l % 4 * -1) & 255;
	    }
	    return b
	  }

	  function C(c) {
	    var a = {outputUpper: !1, b64Pad: "=", shakeLen: -1};
	    c = c || {};
	    a.outputUpper = c.outputUpper || !1;
	    !0 === c.hasOwnProperty("b64Pad") && (a.b64Pad = c.b64Pad);
	    if ("boolean" !== typeof a.outputUpper) {
	      throw Error(
	          "Invalid outputUpper formatting option");
	    }
	    if ("string" !== typeof a.b64Pad) {
	      throw Error(
	          "Invalid b64Pad formatting option");
	    }
	    return a
	  }

	  function B(c, a) {
	    var d;
	    switch (a) {
	      case "UTF8":
	      case "UTF16BE":
	      case "UTF16LE":
	        break;
	      default:
	        throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");
	    }
	    switch (c) {
	      case "HEX":
	        d = function (a, b, c) {
	          var f = a.length, d, k, e, h, q;
	          if (0 !== f % 2) {
	            throw Error(
	                "String of HEX type must be in byte increments");
	          }
	          b = b || [0];
	          c = c || 0;
	          q = c >>> 3;
	          for (d = 0; d < f; d += 2) {
	            k = parseInt(a.substr(d, 2), 16);
	            if (isNaN(k)) {
	              throw Error(
	                  "String of HEX type contains invalid characters");
	            }
	            h = (d >>> 1) + q;
	            for (e = h >>> 2; b.length <= e;) {
	              b.push(0);
	            }
	            b[e] |= k << 8 * (3 + h % 4 * -1);
	          }
	          return {value: b, binLen: 4 * f + c}
	        };
	        break;
	      case "TEXT":
	        d = function (c, b, d) {
	          var f, n, k = 0, e, h, q, m, p, r;
	          b = b || [0];
	          d = d || 0;
	          q = d >>> 3;
	          if ("UTF8" === a) {
	            for (r = 3, e = 0; e < c.length;
	                e += 1) {
	              for (f = c.charCodeAt(e), n = [], 128 > f ? n.push(f)
	                  : 2048 > f ? (n.push(192 | f >>> 6), n.push(128 | f & 63))
	                      : 55296 > f || 57344 <= f ? n.push(224 | f >>> 12, 128 | f
	                          >>> 6 & 63, 128 | f & 63) : (e += 1, f = 65536 + ((f
	                          & 1023) << 10 | c.charCodeAt(e) & 1023), n.push(240
	                          | f
	                          >>> 18, 128 | f >>> 12 & 63, 128 | f >>> 6 & 63, 128
	                          | f
	                          & 63)), h = 0; h < n.length; h += 1) {
	                p = k +
	                    q;
	                for (m = p >>> 2; b.length <= m;) {
	                  b.push(0);
	                }
	                b[m] |= n[h] << 8 * (r + p % 4 * -1);
	                k += 1;
	              }
	            }
	          } else if ("UTF16BE" === a || "UTF16LE"
	              === a) {
	            for (r = 2, n = "UTF16LE" === a && !0 || "UTF16LE" !== a
	                && !1, e = 0; e < c.length; e += 1) {
	              f = c.charCodeAt(e);
	              !0 === n && (h = f & 255, f = h << 8 | f >>> 8);
	              p = k + q;
	              for (m = p >>> 2; b.length <= m;) {
	                b.push(0);
	              }
	              b[m] |= f << 8 * (r + p % 4 * -1);
	              k += 2;
	            }
	          }
	          return {value: b, binLen: 8 * k + d}
	        };
	        break;
	      case "B64":
	        d = function (a, b, c) {
	          var f = 0, d, k, e, h, q, m, p;
	          if (-1 === a.search(/^[a-zA-Z0-9=+\/]+$/)) {
	            throw Error(
	                "Invalid character in base-64 string");
	          }
	          k = a.indexOf("=");
	          a = a.replace(/\=/g,
	              "");
	          if (-1 !== k && k < a.length) {
	            throw Error(
	                "Invalid '=' found in base-64 string");
	          }
	          b = b || [0];
	          c = c || 0;
	          m = c >>> 3;
	          for (k = 0; k < a.length; k += 4) {
	            q = a.substr(k, 4);
	            for (e = h = 0; e < q.length;
	                e += 1) {
	              d = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(
	                  q[e]), h |= d << 18 - 6 * e;
	            }
	            for (e = 0; e < q.length - 1; e += 1) {
	              p = f + m;
	              for (d = p >>> 2; b.length <= d;) {
	                b.push(0);
	              }
	              b[d] |= (h >>> 16 - 8 * e & 255) << 8 * (3 + p % 4 * -1);
	              f += 1;
	            }
	          }
	          return {value: b, binLen: 8 * f + c}
	        };
	        break;
	      case "BYTES":
	        d = function (a, b, c) {
	          var d, n, k, e, h;
	          b = b || [0];
	          c = c || 0;
	          k = c >>> 3;
	          for (n = 0; n < a.length; n +=
	              1) {
	            d = a.charCodeAt(n), h = n + k, e = h >>> 2, b.length <= e
	            && b.push(0), b[e] |= d << 8 * (3 + h % 4 * -1);
	          }
	          return {value: b, binLen: 8 * a.length + c}
	        };
	        break;
	      case "ARRAYBUFFER":
	        try {
	          d = new ArrayBuffer(0);
	        } catch (l) {
	          throw Error("ARRAYBUFFER not supported by this environment");
	        }
	        d = function (a, b, c) {
	          var d, n, k, e, h;
	          b = b || [0];
	          c = c || 0;
	          n = c >>> 3;
	          h = new Uint8Array(a);
	          for (d = 0; d < a.byteLength; d += 1) {
	            e = d + n, k = e >>> 2, b.length
	            <= k && b.push(0), b[k] |= h[d] << 8 * (3 + e % 4 * -1);
	          }
	          return {value: b, binLen: 8 * a.byteLength + c}
	        };
	        break;
	      default:
	        throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");
	    }
	    return d
	  }

	  function r(c, a) {
	    return c >>> a | c << 32 - a
	  }

	  function J(c, a, d) {
	    return c & a ^ ~c & d
	  }

	  function K(c, a, d) {
	    return c & a ^ c & d ^ a & d
	  }

	  function L(c) {
	    return r(c, 2) ^ r(c, 13) ^ r(c, 22)
	  }

	  function M(c) {
	    return r(c, 6) ^ r(c, 11) ^ r(c, 25)
	  }

	  function N(c) {
	    return r(c, 7) ^ r(c, 18) ^ c >>> 3
	  }

	  function O(c) {
	    return r(c, 17) ^ r(c, 19) ^ c >>> 10
	  }

	  function P(c, a) {
	    var d = (c & 65535) + (a & 65535);
	    return ((c >>> 16) + (a >>> 16) + (d >>> 16) & 65535) << 16 | d & 65535
	  }

	  function Q(c, a, d, l) {
	    var b = (c & 65535) + (a & 65535) + (d & 65535) + (l & 65535);
	    return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (l >>> 16) + (b >>>
	        16) & 65535) << 16 | b & 65535
	  }

	  function R(c, a, d, l, b) {
	    var g = (c & 65535) + (a & 65535) + (d & 65535) + (l & 65535) + (b & 65535);
	    return ((c >>> 16) + (a >>> 16) + (d >>> 16) + (l >>> 16) + (b >>> 16) + (g
	        >>> 16) & 65535) << 16 | g & 65535
	  }

	  function x(c) {
	    var a = [], d;
	    if (0 === c.lastIndexOf("SHA-", 0)) {
	      switch (a = [3238371032, 914150663,
	        812702999, 4144912697, 4290775857, 1750603025, 1694076839,
	        3204075428], d = [1779033703, 3144134277, 1013904242, 2773480762,
	        1359893119, 2600822924, 528734635, 1541459225], c) {
	        case "SHA-224":
	          break;
	        case "SHA-256":
	          a = d;
	          break;
	        case "SHA-384":
	          a = [new m, new m,
	            new m, new m, new m, new m, new m, new m];
	          break;
	        case "SHA-512":
	          a = [new m, new m, new m, new m, new m, new m, new m, new m];
	          break;
	        default:
	          throw Error("Unknown SHA variant");
	      }
	    } else {
	      throw Error("No SHA variants supported");
	    }
	    return a
	  }

	  function A(c, a, d) {
	    var l, b, g, f, n, k, e, h, m, r, p, w, t, x, u, z, A, B, C, D, E, F,
	        v = [], G;
	    if ("SHA-224" === d || "SHA-256"
	        === d) {
	      r = 64, w = 1, F = Number, t = P, x = Q, u = R, z = N, A = O, B = L, C = M, E = K, D = J, G = H;
	    } else {
	      throw Error(
	          "Unexpected error in SHA-2 implementation");
	    }
	    d = a[0];
	    l = a[1];
	    b = a[2];
	    g = a[3];
	    f = a[4];
	    n = a[5];
	    k = a[6];
	    e = a[7];
	    for (p =
	        0; p < r; p += 1) {
	      16 > p ? (m = p * w, h = c.length <= m ? 0
	          : c[m], m = c.length <= m + 1 ? 0 : c[m + 1], v[p] = new F(h, m))
	          : v[p] = x(A(v[p - 2]), v[p - 7], z(v[p - 15]), v[p - 16]), h = u(e,
	          C(f), D(f, n, k), G[p], v[p]), m = t(B(d),
	          E(d, l, b)), e = k, k = n, n = f, f = t(g,
	          h), g = b, b = l, l = d, d = t(h, m);
	    }
	    a[0] = t(d, a[0]);
	    a[1] = t(l, a[1]);
	    a[2] = t(b, a[2]);
	    a[3] = t(g, a[3]);
	    a[4] = t(f, a[4]);
	    a[5] = t(n, a[5]);
	    a[6] = t(k, a[6]);
	    a[7] = t(e, a[7]);
	    return a
	  }

	  var H;
	  H = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993,
	    2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987,
	    1925078388, 2162078206,
	    2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628,
	    770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349,
	    2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895,
	    666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051,
	    2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771,
	    3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616,
	    659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779,
	    1955562222, 2024104815, 2227730452, 2361852424, 2428436474,
	    2756734187, 3204031479, 3329325298];
	  "function" === typeof undefined && undefined.amd ? undefined(function () {
	    return w
	  }) : (module.exports && (module.exports = w), exports = w);
	})(commonjsGlobal);
	});

	var Base64$1 = function() {

	  // private property
	  var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

	  // public method for encoding
	  this.encode = function (input) {
	    var output = "";
	    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	    var i = 0;
	//    input = _utf8_encode(input);
	    while (i < input.length) {
	      chr1 = input.charCodeAt(i++);
	      chr2 = input.charCodeAt(i++);
	      chr3 = input.charCodeAt(i++);
	      enc1 = chr1 >> 2;
	      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	      enc4 = chr3 & 63;
	      if (isNaN(chr2)) {
	        enc3 = enc4 = 64;
	      } else if (isNaN(chr3)) {
	        enc4 = 64;
	      }
	      output = output +
	        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
	        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
	    }
	    return output;
	  };

	  // public method for encoding
	  this.encodeIgnoreUtf8 = function (inputBytes) {
	    var output = "";
	    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	    var i = 0;
	//    input = _utf8_encode(input);
	    while (i < inputBytes.length) {
	      chr1 = inputBytes[i++];
	      chr2 = inputBytes[i++];
	      chr3 = inputBytes[i++];
	      enc1 = chr1 >> 2;
	      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
	      enc4 = chr3 & 63;
	      if (isNaN(chr2)) {
	        enc3 = enc4 = 64;
	      } else if (isNaN(chr3)) {
	        enc4 = 64;
	      }
	      output = output +
	        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
	        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
	    }
	    return output;
	  };

	  // public method for decoding
	  this.decode = function (input) {
	    var output = "";
	    var chr1, chr2, chr3;
	    var enc1, enc2, enc3, enc4;
	    var i = 0;
	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	    while (i < input.length) {
	      enc1 = _keyStr.indexOf(input.charAt(i++));
	      enc2 = _keyStr.indexOf(input.charAt(i++));
	      enc3 = _keyStr.indexOf(input.charAt(i++));
	      enc4 = _keyStr.indexOf(input.charAt(i++));
	      chr1 = (enc1 << 2) | (enc2 >> 4);
	      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	      chr3 = ((enc3 & 3) << 6) | enc4;
	      output = output + String.fromCharCode(chr1);
	      if (enc3 != 64) {
	        output = output + String.fromCharCode(chr2);
	      }
	      if (enc4 != 64) {
	        output = output + String.fromCharCode(chr3);
	      }
	    }
	    output = _utf8_decode(output);
	    return output;
	  };

	  // public method for decoding
	  this.decodeToByteArray = function (input) {
	    var output = "";
	    var chr1, chr2, chr3;
	    var enc1, enc2, enc3, enc4;
	    var i = 0;
	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	    while (i < input.length) {
	      enc1 = _keyStr.indexOf(input.charAt(i++));
	      enc2 = _keyStr.indexOf(input.charAt(i++));
	      enc3 = _keyStr.indexOf(input.charAt(i++));
	      enc4 = _keyStr.indexOf(input.charAt(i++));
	      chr1 = (enc1 << 2) | (enc2 >> 4);
	      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	      chr3 = ((enc3 & 3) << 6) | enc4;
	      output = output + String.fromCharCode(chr1);
	      if (enc3 != 64) {
	        output = output + String.fromCharCode(chr2);
	      }
	      if (enc4 != 64) {
	        output = output + String.fromCharCode(chr3);
	      }
	    }
	    var outBytes = _out2ByteArray(output);
	    return outBytes;
	  };

	  // private method for UTF-8 decoding
	  var _out2ByteArray = function (utftext) {
	    var byteArray = new Array(utftext.length);
	    var i = 0;
	    var c = c1 = c2 = 0;
	    while (i < utftext.length) {
	      c = utftext.charCodeAt(i);
	      byteArray[i] = c;
	      i++;
	    }
	    return byteArray;
	  };

	  // private method for UTF-8 decoding
	  var _utf8_decode = function (utftext) {
	    var string = "";
	    var i = 0;
	    var c = c1 = c2 = 0;
	    while (i < utftext.length) {
	      c = utftext.charCodeAt(i);
	      if (c < 128) {
	        string += String.fromCharCode(c);
	        i++;
	      } else if ((c > 191) && (c < 224)) {
	        c2 = utftext.charCodeAt(i + 1);
	        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
	        i += 2;
	      } else {
	        c2 = utftext.charCodeAt(i + 1);
	        c3 = utftext.charCodeAt(i + 2);
	        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3
	          & 63));
	        i += 3;
	      }
	    }
	    return string;
	  };
	};

	var base64 = {
		Base64: Base64$1
	};

	const {Base64: Base64$2} = base64;

	/* Convert a byte to string */
	function byte2hexStr$1(byte) {
	  var hexByteMap = "0123456789ABCDEF";
	  var str = "";
	  str += hexByteMap.charAt(byte >> 4);
	  str += hexByteMap.charAt(byte & 0x0f);
	  return str;
	}

	/**
	 * Converts a byte array to string
	 *
	 * @param {Uint8Array} arr byte array
	 * @returns {string}
	 */
	function bytesToString$1(arr) {
	  if (typeof arr === 'string') {
	    return arr;
	  }
	  let str = '',
	    _arr = arr;
	  for (let i = 0; i < _arr.length; i++) {
	    let one = _arr[i].toString(2), v = one.match(/^1+?(?=0)/);
	    if (v && one.length === 8) {
	      let bytesLength = v[0].length;
	      let store = _arr[i].toString(2).slice(7 - bytesLength);
	      for (let st = 1; st < bytesLength; st++) {
	        store += _arr[st + i].toString(2).slice(2);
	      }
	      str += String.fromCharCode(parseInt(store, 2));
	      i += bytesLength - 1;
	    } else {
	      str += String.fromCharCode(_arr[i]);
	    }
	  }
	  return str;
	}

	/**
	 * Converts a hex string to a decoded string
	 *
	 * @param {string} hex
	 * @returns {string}
	 */
	function hextoString$1(hex) {
	  let arr = hex.split("");
	  let out = "";
	  for (let i = 0; i < arr.length / 2; i++) {
	    let tmp = "0x" + arr[i * 2] + arr[i * 2 + 1];
	    out += String.fromCharCode(tmp);
	  }
	  return out;
	}

	function base64DecodeFromString$1(string64) {
	  return new Base64$2().decodeToByteArray(string64);
	}

	function byteArray2hexStr$1(byteArray) {
	  let str = "";
	  for (let i = 0; i < (byteArray.length); i++) {
	    str += byte2hexStr$1(byteArray[i]);
	  }
	  return str;
	}


	var bytes = {
	  byteArray2hexStr: byteArray2hexStr$1,
	  hextoString: hextoString$1,
	  base64DecodeFromString: base64DecodeFromString$1,
	  bytesToString: bytesToString$1,
	  byte2hexStr: byte2hexStr$1
	};

	const {ADDRESS_PREFIX: ADDRESS_PREFIX$1, ADDRESS_PREFIX_BYTE: ADDRESS_PREFIX_BYTE$1} = address;
	const {base64DecodeFromString: base64DecodeFromString$2, hexStr2byteArray: hexStr2byteArray$1} = code;
	const {encode58: encode58$1, decode58: decode58$1} = base58;
	const EC$1 = elliptic_1.ec;
	const { keccak256 } = sha3;

	const ADDRESS_SIZE$1 = address.ADDRESS_SIZE;
	const { byte2hexStr: byte2hexStr$2, byteArray2hexStr: byteArray2hexStr$2 } = bytes;

	/**
	 * Sign A Transaction by priKey.
	 * signature is 65 bytes, r[32] || s[32] || id[1](<27)
	 * @returns  a Transaction object signed
	 * @param priKeyBytes: privateKey for ECC
	 * @param transaction: a Transaction object unSigned
	 */
	function signTransaction(priKeyBytes, transaction) {

	  if (typeof priKeyBytes === 'string') {
	    priKeyBytes = hexStr2byteArray$1(priKeyBytes);
	  }

	  let raw = transaction.getRawData();
	  let rawBytes = raw.serializeBinary();
	  let hashBytes = SHA256$1(rawBytes);
	  let signBytes = ECKeySign(hashBytes, priKeyBytes);
	  let uint8Array = new Uint8Array(signBytes);
	  let count = raw.getContractList().length;
	  for (let i = 0; i < count; i++) {
	    transaction.addSignature(uint8Array);
	  }

	  return {
	    transaction,
	    hex: byteArray2hexStr$2(transaction.serializeBinary()),
	  };
	}

	function signBytes(privateKey, contents) {

	  if (typeof privateKey === 'string') {
	    privateKey = hexStr2byteArray$1(privateKey);
	  }

	  let hashBytes = SHA256$1(contents);
	  let signBytes = ECKeySign(hashBytes, privateKey);

	  return signBytes;
	}

	//gen Ecc priKey for bytes
	function genPriKey() {
	  let ec = new EC$1('secp256k1');
	  let key = ec.genKeyPair();
	  let priKey = key.getPrivate();
	  let priKeyHex = priKey.toString('hex');
	  while (priKeyHex.length < 64) {
	    priKeyHex = "0" + priKeyHex;
	  }

	  return hexStr2byteArray$1(priKeyHex);
	}

	//return address by bytes, pubBytes is byte[]
	function computeAddress(pubBytes) {
	  if (pubBytes.length === 65) {
	    pubBytes = pubBytes.slice(1);
	  }

	  var hash = keccak256(pubBytes).toString();
	  var addressHex = hash.substring(24);
	  addressHex = ADDRESS_PREFIX$1 + addressHex;
	  return hexStr2byteArray$1(addressHex);
	}

	//return address by bytes, priKeyBytes is byte[]
	function getAddressFromPriKey(priKeyBytes) {
	  let pubBytes = getPubKeyFromPriKey(priKeyBytes);
	  return computeAddress(pubBytes);
	}

	//return address by Base58Check String,
	function getBase58CheckAddress(addressBytes) {
	  var hash0 = SHA256$1(addressBytes);
	  var hash1 = SHA256$1(hash0);
	  var checkSum = hash1.slice(0, 4);
	  checkSum = addressBytes.concat(checkSum);
	  return encode58$1(checkSum);
	}

	function decode58Check(addressStr) {

	  var decodeCheck = decode58$1(addressStr);
	  if (decodeCheck.length <= 4) {
	    console.error("ERROR CHECK");
	    return null;
	  }

	  var decodeData = decodeCheck.slice(0, decodeCheck.length - 4);
	  var hash0 = SHA256$1(decodeData);
	  var hash1 = SHA256$1(hash0);

	  if (hash1[0] === decodeCheck[decodeData.length] &&
	    hash1[1] === decodeCheck[decodeData.length + 1] &&
	    hash1[2] === decodeCheck[decodeData.length + 2] &&
	    hash1[3] === decodeCheck[decodeData.length + 3]) {
	    return decodeData;
	  }

	  return null;
	}

	function isAddressValid(base58Str) {
	  try {
	    if (typeof(base58Str) !== 'string') {
	      return false;
	    }
	    if (base58Str.length !== ADDRESS_SIZE$1) {
	      return false;
	    }
	    var address$$1 = decode58$1(base58Str);
	    if (address$$1.length !== 25) {
	      return false;
	    }
	    if (address$$1[0] !== ADDRESS_PREFIX_BYTE$1) {
	      return false;
	    }
	    var checkSum = address$$1.slice(21);
	    address$$1 = address$$1.slice(0, 21);
	    var hash0 = SHA256$1(address$$1);
	    var hash1 = SHA256$1(hash0);
	    var checkSum1 = hash1.slice(0, 4);
	    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2]
	        == checkSum1[2] && checkSum[3] == checkSum1[3]
	    ) {
	      return true
	    }
	  } catch(e) {
	    // ignore
	  }

	  return false;
	}

	//return address by Base58Check String, priKeyBytes is base64String
	function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {
	  var priKeyBytes = base64DecodeFromString$2(priKeyBase64String);
	  var pubBytes = getPubKeyFromPriKey(priKeyBytes);
	  var addressBytes = computeAddress(pubBytes);
	  return getBase58CheckAddress(addressBytes);
	}

	//return pubkey by 65 bytes, priKeyBytes is byte[]
	function getPubKeyFromPriKey(priKeyBytes) {
	  var ec = new EC$1('secp256k1');
	  var key = ec.keyFromPrivate(priKeyBytes, 'bytes');
	  var pubkey = key.getPublic();
	  var x = pubkey.x;
	  var y = pubkey.y;
	  var xHex = x.toString('hex');
	  while (xHex.length < 64) {
	    xHex = "0" + xHex;
	  }
	  var yHex = y.toString('hex');
	  while (yHex.length < 64) {
	    yHex = "0" + yHex;
	  }
	  var pubkeyHex = "04" + xHex + yHex;
	  var pubkeyBytes = hexStr2byteArray$1(pubkeyHex);
	  return pubkeyBytes;
	}

	//return sign by 65 bytes r s id. id < 27
	function ECKeySign(hashBytes, priKeyBytes) {
	  let ec = new EC$1('secp256k1');
	  let key = ec.keyFromPrivate(priKeyBytes, 'bytes');
	  let signature = key.sign(hashBytes);
	  let r = signature.r;
	  let s = signature.s;
	  let id = signature.recoveryParam;

	  let rHex = r.toString('hex');
	  while (rHex.length < 64) {
	    rHex = "0" + rHex;
	  }
	  let sHex = s.toString('hex');
	  while (sHex.length < 64) {
	    sHex = "0" + sHex;
	  }
	  let idHex = byte2hexStr$2(id);
	  let signHex = rHex + sHex + idHex;
	  return hexStr2byteArray$1(signHex);
	}

	//toDO:
	//return 32 bytes
	function SHA256$1(msgBytes) {
	  let shaObj = new sha256$1("SHA-256", "HEX");
	  let msgHex = byteArray2hexStr$2(msgBytes);
	  shaObj.update(msgHex);
	  let hashHex = shaObj.getHash("HEX");
	  return hexStr2byteArray$1(hashHex);
	}

	function passwordToAddress(password) {
	  let com_priKeyBytes = base64DecodeFromString$2(password);
	  let com_addressBytes = getAddressFromPriKey(com_priKeyBytes);
	  return getBase58CheckAddress(com_addressBytes);
	}

	function pkToAddress(privateKey) {
	  let com_priKeyBytes = hexStr2byteArray$1(privateKey);
	  let com_addressBytes = getAddressFromPriKey(com_priKeyBytes);
	  return getBase58CheckAddress(com_addressBytes);
	}

	var crypto$2 = {
	  signTransaction,
	  passwordToAddress,
	  genPriKey,
	  getAddressFromPriKey,
	  getPubKeyFromPriKey,
	  getBase58CheckAddress,
	  isAddressValid,
	  getBase58CheckAddressFromPriKeyBase64String,
	  pkToAddress,
	  decode58Check,
	  signBytes,
	};
	var crypto_1 = crypto$2.signTransaction;

	var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;
	$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);};$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof commonjsGlobal&&null!=commonjsGlobal?commonjsGlobal:a};$jscomp.global=$jscomp.getGlobal(commonjsGlobal);
	$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b});}};$jscomp.polyfill("Array.prototype.findIndex",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).i}},"es6","es3");
	$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};
	$jscomp.polyfill("String.prototype.startsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"startsWith");a+="";var e=b.length,f=a.length;c=Math.max(0,Math.min(c|0,b.length));for(var g=0;g<f&&c<e;)if(b[c++]!=a[g++])return!1;return g>=f}},"es6","es3");
	$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(a,c){var b=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===c&&(c=b.length);c=Math.max(0,Math.min(c|0,b.length));for(var e=a.length;0<e&&0<c;)if(b[--c]!=a[--e])return!1;return 0>=e}},"es6","es3");
	$jscomp.polyfill("String.prototype.repeat",function(a){return a?a:function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}},"es6","es3");$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,c){return $jscomp.findInternal(this,a,c).v}},"es6","es3");var COMPILED$1=!0,goog=goog||{};goog.global=commonjsGlobal;goog.isDef=function(a){return void 0!==a};
	goog.isString=function(a){return"string"==typeof a};goog.isBoolean=function(a){return"boolean"==typeof a};goog.isNumber=function(a){return"number"==typeof a};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={};};
	goog.define=function(a,b){if(!COMPILED$1){var c=goog.global.CLOSURE_UNCOMPILED_DEFINES,d=goog.global.CLOSURE_DEFINES;c&&void 0===c.nodeType&&Object.prototype.hasOwnProperty.call(c,a)?b=c[a]:d&&void 0===d.nodeType&&Object.prototype.hasOwnProperty.call(d,a)&&(b=d[a]);}goog.exportPath_(a,b);return b};goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED$1&&!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;
	goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED$1&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a);};goog.constructNamespace_=function(a,b){if(!COMPILED$1){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(".")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0;}goog.exportPath_(a,b);};
	goog.getScriptNonce=function(a){if(a&&a!=goog.global)return goog.getScriptNonce_(a.document);null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document));return goog.cspNonce_};goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/;goog.cspNonce_=null;goog.getScriptNonce_=function(a){return(a=a.querySelector&&a.querySelector("script[nonce]"))&&(a=a.nonce||a.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(a)?a:""};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
	goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");
	if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;if(!COMPILED$1){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a];}};goog.module.get=function(a){return goog.module.getInternal_(a)};
	goog.module.getInternal_=function(a){if(!COMPILED$1){if(a in goog.loadedModules_)return goog.loadedModules_[a].exports;if(!goog.implicitNamespaces_[a])return a=goog.getObjectByName(a),null!=a?a:null}return null};goog.ModuleType={ES6:"es6",GOOG:"goog"};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()};goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG};
	goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var a=goog.global.$jscomp;return a?"function"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};
	goog.module.declareLegacyNamespace=function(){if(!COMPILED$1&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED$1&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0;};
	goog.declareModuleId=function(a){if(!COMPILED$1){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(a in goog.loadedModules_)throw Error('Module with namespace "'+a+'" already exists.');}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=a;else{var b=goog.global.$jscomp;if(!b||"function"!=typeof b.getCurrentModulePath)throw Error('Module with namespace "'+
	a+'" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());goog.loadedModules_[a]={exports:b,type:goog.ModuleType.ES6,moduleId:a};}};goog.module.declareNamespace=goog.declareModuleId;goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};
	COMPILED$1||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&goog.isDefAndNotNull(goog.getObjectByName(a))},goog.implicitNamespaces_={"goog.module":!0});goog.getObjectByName=function(a,b){a=a.split(".");b=b||goog.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],!goog.isDefAndNotNull(b))return null;return b};goog.globalize=function(a,b){b=b||goog.global;for(var c in a)b[c]=a[c];};
	goog.addDependency=function(a,b,c,d){!COMPILED$1&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(a,b,c,d);};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a);};
	goog.require=function(a){if(!COMPILED$1){goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(a);}finally{goog.moduleLoaderState_=b;}}return null}};goog.requireType=function(a){return{}};goog.basePath="";goog.nullFunction=function(){};
	goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a};};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED$1&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";
	goog.ASSUME_ES_MODULES_TRANSPILED=!1;goog.TRANSPILE_TO_LANGUAGE="";goog.TRANSPILER="transpile.js";goog.hasBadLetScoping=null;goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";');}catch(b){a=!1;}goog.hasBadLetScoping=a;}return goog.hasBadLetScoping};goog.workaroundSafari10EvalBug=function(a){return"(function(){"+a+"\n;})();\n"};
	goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG};if(goog.isFunction(a))var c=a.call(void 0,{});else if(goog.isString(a))goog.useSafari10Workaround()&&(a=goog.workaroundSafari10EvalBug(a)),c=goog.loadModuleFromSource_.call(void 0,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if(goog.isString(d)&&d)goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,
	c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof c&&null!=c&&Object.seal(c),goog.loadedModules_[d]={exports:c,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName};else throw Error('Invalid module name "'+d+'"');}finally{goog.moduleLoaderState_=b;}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
	goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};
	goog.transpile_=function(a,b,c){var d=goog.global.$jscomp;d||(goog.global.$jscomp=d={});var e=d.transpile;if(!e){var f=goog.basePath+goog.TRANSPILER,g=goog.loadFileSync_(f);if(g){(function(){eval(g+"\n//# sourceURL="+f);}).call(goog.global);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=
	goog.global.$gwtExport.$jscomp.transpile;d=goog.global.$jscomp;e=d.transpile;}}e||(e=d.transpile=function(a,b){goog.logToConsole_(b+" requires transpilation but no transpiler was found.");return a});return e(a,b,c)};
	goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b};goog.isNull=function(a){return null===a};goog.isDefAndNotNull=function(a){return null!=a};goog.isArray=function(a){return"array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isFunction=function(a){return"function"==goog.typeOf(a)};
	goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_];}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;
	goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if("function"===typeof a.clone)return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.cloneObject(a[c]);return b}return a};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};
	goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};
	goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c];};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};
	goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;");}catch(d){}if("undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_;}catch(d){}goog.evalWorksForGlobals_=!0;}else goog.evalWorksForGlobals_=!1;}if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=
	!1;c.appendChild(b.createTextNode(a));b.head.appendChild(c);b.head.removeChild(c);}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;
	goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")};d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a};a=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(a):a};
	goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b;};!COMPILED$1&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b){b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,d){return null!=b&&d in b?b[d]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c);};goog.exportProperty=function(a,b,c){a[b]=c;};
	goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)};};
	goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if("undefined"!==typeof d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++)e[f-1]=arguments[f];return d.superClass_.constructor.apply(a,e)}if("string"!=typeof b&&"symbol"!=typeof b)throw Error("method names provided to goog.base must be a string or a symbol");
	e=Array(arguments.length-2);for(f=2;f<arguments.length;f++)e[f-2]=arguments[f];f=!1;for(var g=a.constructor;g;g=g.superClass_&&g.superClass_.constructor)if(g.prototype[b]===d)f=!0;else if(f)return g.prototype[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");a.call(goog.global);};
	COMPILED$1||(goog.global.COMPILED=COMPILED$1);goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};
	goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;goog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};
	goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);};
	goog.tagUnsealableClass=function(a){!COMPILED$1&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0);};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";
	!COMPILED$1&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.isDocumentLoading_=function(){var a=goog.global.document;return a.attachEvent?"complete"!=a.readyState:"loading"==a.readyState},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH)&&goog.isString(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var a=goog.global.document,b=a.currentScript;
	a=b?[b]:a.getElementsByTagName("SCRIPT");for(b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?");d=-1==d?c.length:d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null;this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE;},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(a,b){e?d[a]=!0:b()?(c=a,d[a]=!1):e=d[a]=!0;}function b(a){try{return!!eval(a)}catch(h){return!1}}
	var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";a("es5",function(){return b("[1,].length==1")});a("es6",function(){return f.match(/Edge\/(\d+)(\.\d)*/i)?!1:b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});
	a("es6-impl",function(){return!0});a("es7",function(){return b("2 ** 2 == 4")});a("es8",function(){return b("async () => 1, true")});a("es9",function(){return b("({...rest} = {}), true")});a("es_next",function(){return!1});return{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(a,b){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var c=this.createRequiresTranspilation_();this.requiresTranspilation_=c.map;this.transpilationTarget_=
	this.transpilationTarget_||c.target;}if(a in this.requiresTranspilation_)return this.requiresTranspilation_[a]?!0:!goog.inHtmlDocument_()||"es6"!=b||"noModule"in goog.global.document.createElement("script")?!1:!0;throw Error("Unknown language mode: "+a);},goog.Transpiler.prototype.transpile=function(a,b){return goog.transpile_(a,b,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(a){return a.replace(/<\/(SCRIPT)/ig,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_=
	{};this.idToPath_={};this.written_={};this.loadingDeps_=[];this.depsToLoad_=[];this.paused_=!1;this.factory_=new goog.DependencyFactory(goog.transpiler_);this.deferredCallbacks_={};this.deferredQueue_=[];},goog.DebugLoader_.prototype.bootstrap=function(a,b){function c(){d&&(goog.global.setTimeout(d,0),d=null);}var d=b;if(a.length){b=[];for(var e=0;e<a.length;e++){var f=this.getPathFromDeps_(a[e]);if(!f)throw Error("Unregonized namespace: "+a[e]);b.push(this.dependencies_[f]);}f=goog.require;var g=0;
	for(e=0;e<a.length;e++)f(a[e]),b[e].onLoad(function(){++g==a.length&&c();});}else c();},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1));this.loadDeps_();},goog.DebugLoader_.prototype.requested=function(a,b){(a=this.getPathFromDeps_(a))&&(b||this.areDepsLoaded_(this.dependencies_[a].requires))&&(b=this.deferredCallbacks_[a])&&(delete this.deferredCallbacks_[a],b());},goog.DebugLoader_.prototype.setDependencyFactory=
	function(a){this.factory_=a;},goog.DebugLoader_.prototype.load_=function(a){if(this.getPathFromDeps_(a)){var b=this,c=[],d=function(a){var e=b.getPathFromDeps_(a);if(!e)throw Error("Bad dependency path or symbol: "+a);if(!b.written_[e]){b.written_[e]=!0;a=b.dependencies_[e];for(e=0;e<a.requires.length;e++)goog.isProvided_(a.requires[e])||d(a.requires[e]);c.push(a);}};d(a);a=!!this.depsToLoad_.length;this.depsToLoad_=this.depsToLoad_.concat(c);this.paused_||a||this.loadDeps_();}else throw a="goog.require could not find: "+
	a,goog.logToConsole_(a),Error(a);},goog.DebugLoader_.prototype.loadDeps_=function(){for(var a=this,b=this.paused_;this.depsToLoad_.length&&!b;)(function(){var c=!1,d=a.depsToLoad_.shift(),e=!1;a.loading_(d);var f={pause:function(){if(c)throw Error("Cannot call pause after the call to load.");b=!0;},resume:function(){c?a.resume_():b=!1;},loaded:function(){if(e)throw Error("Double call to loaded.");e=!0;a.loaded_(d);},pending:function(){for(var b=[],c=0;c<a.loadingDeps_.length;c++)b.push(a.loadingDeps_[c]);
	return b},setModuleState:function(a){goog.moduleLoaderState_={type:a,moduleName:"",declareLegacyNamespace:!1};},registerEs6ModuleExports:function(a,b,c){c&&(goog.loadedModules_[c]={exports:b,type:goog.ModuleType.ES6,moduleId:c||""});},registerGoogModuleExports:function(a,b){goog.loadedModules_[a]={exports:b,type:goog.ModuleType.GOOG,moduleId:a};},clearModuleState:function(){goog.moduleLoaderState_=null;},defer:function(b){if(c)throw Error("Cannot register with defer after the call to load.");a.defer_(d,
	b);},areDepsLoaded:function(){return a.areDepsLoaded_(d.requires)}};try{d.load(f);}finally{c=!0;}})();b&&this.pause_();},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0;},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_());},goog.DebugLoader_.prototype.loading_=function(a){this.loadingDeps_.push(a);},goog.DebugLoader_.prototype.loaded_=function(a){for(var b=0;b<this.loadingDeps_.length;b++)if(this.loadingDeps_[b]==a){this.loadingDeps_.splice(b,1);
	break}for(b=0;b<this.deferredQueue_.length;b++)if(this.deferredQueue_[b]==a.path){this.deferredQueue_.splice(b,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);a.loaded();},goog.DebugLoader_.prototype.areDepsLoaded_=function(a){for(var b=0;b<a.length;b++){var c=this.getPathFromDeps_(a[b]);if(!c||!(c in this.deferredCallbacks_||goog.isProvided_(a[b])))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=
	function(a){return a in this.idToPath_?this.idToPath_[a]:a in this.dependencies_?a:null},goog.DebugLoader_.prototype.defer_=function(a,b){this.deferredCallbacks_[a.path]=b;this.deferredQueue_.push(a.path);},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(a,
	b,c){},goog.LoadController.prototype.setModuleState=function(a){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(a){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(a,b,c,d,e){this.path=a;this.relativePath=b;this.provides=c;this.requires=d;this.loadFlags=e;this.loaded_=!1;this.loadCallbacks_=[];},goog.Dependency.prototype.getPathName=function(){var a=this.path,b=a.indexOf("://");0<=b&&(a=a.substring(b+3),b=
	a.indexOf("/"),0<=b&&(a=a.substring(b+1)));return a},goog.Dependency.prototype.onLoad=function(a){this.loaded_?a():this.loadCallbacks_.push(a);},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var a=this.loadCallbacks_;this.loadCallbacks_=[];for(var b=0;b<a.length;b++)a[b]();},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(a){var b=Math.random().toString(32);goog.Dependency.callbackMap_[b]=a;return b},goog.Dependency.unregisterCallback_=
	function(a){delete goog.Dependency.callbackMap_[a];},goog.Dependency.callback_=function(a,b){if(a in goog.Dependency.callbackMap_){for(var c=goog.Dependency.callbackMap_[a],d=[],e=1;e<arguments.length;e++)d.push(arguments[e]);c.apply(void 0,d);}else throw Error("Callback key "+a+" does not exist (was base.js loaded more than once?).");},goog.Dependency.prototype.load=function(a){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?a.loaded():a.pause();else if(goog.inHtmlDocument_()){var b=
	goog.global.document;if("complete"==b.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path)){a.loaded();return}throw Error('Cannot write "'+this.path+'" after document load');}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var c=goog.Dependency.registerCallback_(function(b){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=b.readyState||(goog.Dependency.unregisterCallback_(c),a.loaded());}),d=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?
	' nonce="'+goog.getScriptNonce()+'"':"";b.write('<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+c+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+d+">\x3c/script>");}else{var e=b.createElement("script");e.defer=goog.Dependency.defer_;e.async=!1;e.type="text/javascript";(d=goog.getScriptNonce())&&e.setAttribute("nonce",d);goog.DebugLoader_.IS_OLD_IE_?(a.pause(),e.onreadystatechange=function(){if("loaded"==
	e.readyState||"complete"==e.readyState)a.loaded(),a.resume();}):e.onload=function(){e.onload=null;a.loaded();};e.src=this.path;b.head.appendChild(e);}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),a.loaded()):a.pause();},goog.Es6ModuleDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);},goog.inherits(goog.Es6ModuleDependency,
	goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(a){function b(a,b){b?d.write('<script type="module" crossorigin>'+b+"\x3c/script>"):d.write('<script type="module" crossorigin src="'+a+'">\x3c/script>');}function c(a,b){var c=d.createElement("script");c.defer=!0;c.async=!1;c.type="module";c.setAttribute("crossorigin",!0);var e=goog.getScriptNonce();e&&c.setAttribute("nonce",e);b?c.textContent=b:c.src=a;d.head.appendChild(c);}if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?
	a.loaded():a.pause();else if(goog.inHtmlDocument_()){var d=goog.global.document,e=this;if(goog.isDocumentLoading_()){var f=b;goog.Dependency.defer_=!0;}else f=c;var g=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(g);a.setModuleState(goog.ModuleType.ES6);});f(void 0,'goog.Dependency.callback_("'+g+'")');f(this.path,void 0);var h=goog.Dependency.registerCallback_(function(b){goog.Dependency.unregisterCallback_(h);a.registerEs6ModuleExports(e.path,b,goog.moduleLoaderState_.moduleName);});
	f(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+h+'", m)');var k=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(k);a.clearModuleState();a.loaded();});f(void 0,'goog.Dependency.callback_("'+k+'")');}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),a.pause();},goog.TransformedDependency=function(a,b,c,d,e){goog.Dependency.call(this,a,b,c,d,e);this.contents_=null;this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in
	goog.global.document.createElement("script"));},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(a){function b(){e.contents_=goog.loadFileSync_(e.path);e.contents_&&(e.contents_=e.transform(e.contents_),e.contents_&&(e.contents_+="\n//# sourceURL="+e.path));}function c(){e.lazyFetch_&&b();if(e.contents_){f&&a.setModuleState(goog.ModuleType.ES6);try{var c=e.contents_;e.contents_=null;goog.globalEval(c);if(f)var d=goog.moduleLoaderState_.moduleName;}finally{f&&
	a.clearModuleState();}f&&goog.global.$jscomp.require.ensure([e.getPathName()],function(){a.registerEs6ModuleExports(e.path,goog.global.$jscomp.require(e.getPathName()),d);});a.loaded();}}function d(){var a=goog.global.document,b=goog.Dependency.registerCallback_(function(){goog.Dependency.unregisterCallback_(b);c();});a.write('<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+b+'");')+"\x3c/script>");}var e=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)b(),this.contents_&&
	goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,a.loaded()):a.pause();else{var f=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||b();var g=1<a.pending().length,h=g&&goog.DebugLoader_.IS_OLD_IE_;g=goog.Dependency.defer_&&(g||goog.isDocumentLoading_());if(h||g)a.defer(function(){c();});else{var k=goog.global.document;h=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global;if(f&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!h){goog.Dependency.defer_=!0;a.pause();
	var l=k.onreadystatechange;k.onreadystatechange=function(){"interactive"==k.readyState&&(k.onreadystatechange=l,c(),a.resume());goog.isFunction(l)&&l.apply(void 0,arguments);};}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?d():c();}}},goog.TransformedDependency.prototype.transform=function(a){},goog.TranspiledDependency=function(a,b,c,d,e,f){goog.TransformedDependency.call(this,a,b,c,d,e);this.transpiler=f;},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),
	goog.TranspiledDependency.prototype.transform=function(a){return this.transpiler.transpile(a,this.getPathName())},goog.PreTranspiledEs6ModuleDependency=function(a,b,c,d,e){goog.TransformedDependency.call(this,a,b,c,d,e);},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(a){return a},goog.GoogModuleDependency=function(a,b,c,d,e,f,g){goog.TransformedDependency.call(this,a,b,c,d,e);this.needsTranspile_=f;
	this.transpiler_=g;},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(a){this.needsTranspile_&&(a=this.transpiler_.transpile(a,this.getPathName()));return goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(a+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+a+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=
	!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(a,b,c,d){b=b||[];a=a.replace(/\\/g,"/");var e=goog.normalizePath_(goog.basePath+a);d&&"boolean"!==typeof d||(d=d?{module:goog.ModuleType.GOOG}:{});c=this.factory_.createDependency(e,a,b,c,d,goog.transpiler_.needsTranspile(d.lang||"es3",d.module));this.dependencies_[e]=c;for(c=0;c<b.length;c++)this.idToPath_[b[c]]=e;this.idToPath_[a]=e;},goog.DependencyFactory=function(a){this.transpiler=
	a;},goog.DependencyFactory.prototype.createDependency=function(a,b,c,d,e,f){return e.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(a,b,c,d,e,f,this.transpiler):f?new goog.TranspiledDependency(a,b,c,d,e,this.transpiler):e.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(a,b,c,d,e):new goog.Es6ModuleDependency(a,b,c,d,e):new goog.Dependency(a,b,c,d,e)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=
	function(){goog.debugLoader_.loadClosureDeps();},goog.setDependencyFactory=function(a){goog.debugLoader_.setDependencyFactory(a);},goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(a,b){goog.debugLoader_.bootstrap(a,b);});var jspb={BinaryConstants:{},ConstBinaryMessage:function(){},BinaryMessage:function(){}};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};
	jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID}};
	jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;
	jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));this.reportErrorToServer=!0;};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){goog.debug.Error.call(this,goog.asserts.subs_(a,b));this.messagePattern=a;};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
	goog.asserts.subs_=function(a,b){a=a.split("%s");for(var c="",d=a.length-1,e=0;e<d;e++)c+=a[e]+(e<b.length?b[e]:"%s");return c+a[d]};goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c){e+=": "+c;var f=d;}else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a);};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a);};
	goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)));};
	goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
	goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
	goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
	goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
	goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertFinite=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||"number"==typeof a&&isFinite(a)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[a],b,Array.prototype.slice.call(arguments,2));return a};
	goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.");};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=!1;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
	goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
	goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
	goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};goog.array.forEachRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;--d)d in e&&b.call(c,e[d],d,a);};
	goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k);}return e};
	goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
	goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a);});return e};
	goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a);});return e};
	goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
	goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d;},c);return d};
	goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
	goog.array.findIndexRight=function(a,b,c){var d=a.length,e=goog.isString(a)?a.split(""):a;for(--d;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0;};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b);};
	goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b);};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b);};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d);};goog.array.remove=function(a,b){b=goog.array.indexOf(a,b);var c;(c=0<=b)&&goog.array.removeAt(a,b);return c};
	goog.array.removeLast=function(a,b){b=goog.array.lastIndexOf(a,b);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++;});return d};
	goog.array.concat=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.join=function(a){return Array.prototype.concat.apply([],arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g];}else a.push(d);}};
	goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};
	goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;d={};for(var e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g);}b.length=e;};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};
	goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1;var l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l);}return h?f:~f};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare);};goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value;};
	goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))});};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c);};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};
	goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};
	goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};
	goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f);}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e;});return d};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};
	goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192){var f=goog.array.slice(d,e,e+8192);f=goog.array.flatten.apply(null,f);for(var g=0;g<f.length;g++)b.push(f[g]);}else b.push(d);}return b};
	goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0]);};
	goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e);}return b};goog.array.shuffle=function(a,b){b=b||Math.random;for(var c=a.length-1;0<c;c--){var d=Math.floor(b()*(c+1)),e=a[c];a[c]=a[d];a[d]=e;}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b]);});return c};
	goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);255<e&&(b[c++]=e&255,e>>=8);b[c++]=e;}return b};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192);b+=String.fromCharCode.apply(null,d);}return b};
	goog.crypt.byteArrayToHex=function(a,b){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a}).join(b||"")};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2)b.push(parseInt(a.substring(c,c+2),16));return b};
	goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128);}return b};
	goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63);}else if(239<e&&365>e){f=a[c++];var g=a[c++],h=a[c++];e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023));}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63);}return b.join("")};
	goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++)c.push(a[d]^b[d]);return c};goog.string={};goog.string.internal={};goog.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.internal.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};goog.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};
	goog.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.internal.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};goog.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};
	goog.string.internal.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
	goog.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.internal.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.internal.LT_RE_,
	"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.internal.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.internal.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.internal.NULL_RE_,"&#0;"));}return a};goog.string.internal.AMP_RE_=/&/g;goog.string.internal.LT_RE_=/</g;goog.string.internal.GT_RE_=/>/g;goog.string.internal.QUOT_RE_=/"/g;goog.string.internal.SINGLE_QUOTE_RE_=/'/g;
	goog.string.internal.NULL_RE_=/\x00/g;goog.string.internal.ALL_RE_=/[\x00&<>"']/;goog.string.internal.whitespaceEscape=function(a,b){return goog.string.internal.newLineToBr(a.replace(/  /g," &#160;"),b)};goog.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};goog.string.internal.caseInsensitiveContains=function(a,b){return goog.string.internal.contains(a.toLowerCase(),b.toLowerCase())};
	goog.string.internal.compareVersions=function(a,b){var c=0;a=goog.string.internal.trim(String(a)).split(".");b=goog.string.internal.trim(String(b)).split(".");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||"",g=b[e]||"";do{f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];if(0==f[0].length&&0==g[0].length)break;c=0==f[1].length?0:parseInt(f[1],10);var h=0==g[1].length?0:parseInt(g[1],10);c=goog.string.internal.compareElements_(c,h)||goog.string.internal.compareElements_(0==
	f[2].length,0==g[2].length)||goog.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3];}while(0==c)}return c};goog.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=goog.string.internal.startsWith;goog.string.endsWith=goog.string.internal.endsWith;goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith;goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith;goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals;
	goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace;goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};
	goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};
	goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.string.internal.trim;
	goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare;
	goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
	goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=goog.string.internal.newLineToBr;
	goog.string.htmlEscape=function(a,b){a=goog.string.internal.htmlEscape(a,b);goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));return a};goog.string.E_RE_=/e/g;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
	goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
	goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'};var d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;"#"==b.charAt(0)&&(b=Number("0"+b.substr(1)),isNaN(b)||(e=String.fromCharCode(b)));e||(d.innerHTML=a+" ",e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};
	goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:return"#"!=c.charAt(0)||(c=Number("0"+c.substr(1)),isNaN(c))?a:String.fromCharCode(c)}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
	goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
	goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e);}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"<"};goog.string.jsEscapeCache_={"'":"\\'"};
	goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d));}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
	goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b=a.charCodeAt(0);if(31<b&&127>b)var c=a;else{if(256>b){if(c="\\x",16>b||256<b)c+="0";}else c="\\u",4096>b&&(c+="0");c+=b.toString(16).toUpperCase();}return goog.string.jsEscapeCache_[a]=c};goog.string.contains=goog.string.internal.contains;goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains;
	goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,"")};goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};
	goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};
	goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};goog.string.compareVersions=goog.string.internal.compareVersions;goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;
	goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};
	goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};goog.string.toTitleCase=function(a,b){b=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(b?"|["+b+"]+":"")+")([a-z])","g"),function(a,b,e){return b+e.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};
	goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(""!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e);}return-1==c?a:a.slice(c+1)};
	goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f];}return d[b.length]};goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_();};
	goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(b,a)};
	goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
	goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
	goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")};goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")};goog.labs.userAgent.platform.isGo2Phone=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP")};
	goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,
	b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a);};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};
	goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};
	goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){var c=goog.isArrayLike(b),d=c?b:arguments;for(c=c?0:1;c<d.length;c++){if(null==a)return;a=a[d[c]];}return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};
	goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b];};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c);};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};
	goog.object.set=function(a,b,c){a[b]=c;};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(c in b)if(!(c in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
	goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();b="array"==b?[]:{};for(var c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}};
	goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
	goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};
	goog.object.getAllPropertyNames=function(a,b,c){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(a);for(var d={};a&&(a!==Object.prototype||b)&&(a!==Function.prototype||c);){for(var e=Object.getOwnPropertyNames(a),f=0;f<e.length;f++)d[e[f]]=!0;a=Object.getPrototypeOf(a);}return goog.object.getKeys(d)};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdge_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
	goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")};
	goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdge_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};
	goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
	goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdge_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
	goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdge_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;
	goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
	goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);b=goog.labs.userAgent.util.extractVersionTuples(b);var c={};goog.array.forEach(b,function(a){c[a[0]]=a[1];});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):
	goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
	goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];b="";var c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0";}else b="7.0";else b=c[1];return b};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
	goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
	goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){a=goog.labs.userAgent.util.extractVersionTuples(a);var b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];a=a[0];var c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return""};
	goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){return(a=goog.array.find(a,function(a){return b==a[0]}))&&a[1]||""};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
	goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null};goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();
	goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};
	goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigatorTyped();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;
	goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;goog.userAgent.ASSUME_KAIOS=!1;goog.userAgent.ASSUME_GO2PHONE=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();
	goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigatorTyped();return!!a&&goog.string.contains(a.appVersion||"","X11")};
	goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();
	goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS();goog.userAgent.GO2PHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_GO2PHONE:goog.labs.userAgent.platform.isGo2Phone();
	goog.userAgent.determineVersion_=function(){var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};
	goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\/(\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \/]?(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};
	goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
	goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){var a=goog.global.document,b=goog.userAgent.getDocumentMode_();if(a&&goog.userAgent.IE)return b||("CSS1Compat"==a.compatMode?parseInt(goog.userAgent.VERSION,10):5)}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;
	goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;
	goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();
	goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();
	goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.byteToCharMap_=null;goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.byteToCharMapWebSafe_=null;goog.crypt.base64.ENCODED_VALS_BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.ENCODED_VALS_BASE+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.ENCODED_VALS_BASE+"-_.";
	goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;
	goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");goog.crypt.base64.init_();b=b?goog.crypt.base64.byteToCharMapWebSafe_:goog.crypt.base64.byteToCharMap_;for(var c=[],d=0;d<a.length;d+=3){var e=a[d],f=d+1<a.length,g=f?a[d+1]:0,h=d+2<a.length,k=h?a[d+2]:0,l=e>>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|k>>6;k&=63;h||(k=64,f||(g=64));c.push(b[l],b[e],b[g],b[k]);}return c.join("")};
	goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b)};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a);});return c};
	goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a);});return c};
	goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=a.length,c=0;"="===a[b-2]?c=2:"="===a[b-1]&&(c=1);var d=new Uint8Array(Math.ceil(3*b/4)-c),e=0;goog.crypt.base64.decodeStringInternal_(a,function(a){d[e++]=a;});return d.subarray(0,e)};
	goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}};
	goog.crypt.base64.init_=function(){if(!goog.crypt.base64.byteToCharMap_){goog.crypt.base64.byteToCharMap_={};goog.crypt.base64.charToByteMap_={};goog.crypt.base64.byteToCharMapWebSafe_={};for(var a=0;a<goog.crypt.base64.ENCODED_VALS.length;a++)goog.crypt.base64.byteToCharMap_[a]=goog.crypt.base64.ENCODED_VALS.charAt(a),goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[a]]=a,goog.crypt.base64.byteToCharMapWebSafe_[a]=goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a),a>=goog.crypt.base64.ENCODED_VALS_BASE.length&&
	(goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a)]=a);}};jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a;};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a;};
	jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c;};
	jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(a))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(a>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0;else if(a<jspb.BinaryConstants.FLOAT32_MIN)a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|
	a)>>>0;else{var c=Math.floor(Math.log(a)/Math.LN2);a*=Math.pow(2,-c);a=Math.round(a*jspb.BinaryConstants.TWO_TO_23)&8388607;jspb.utils.split64High=0;jspb.utils.split64Low=(b<<31|c+127<<23|a)>>>0;}};
	jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0;}else{var d=
	Math.floor(Math.log(a)/Math.LN2);1024==d&&(d=1023);c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c;}};
	jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0;};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+a};
	jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.joinZigzag64=function(a,b){var c=a&1;a=(a>>>1|b<<31)>>>0;b>>>=1;c&&(a=a+1>>>0,0==a&&(b=b+1>>>0));a=jspb.utils.joinUint64(a,b);return c?-a:a};jspb.utils.joinFloat32=function(a,b){b=2*(a>>31)+1;var c=a>>>23&255;a&=8388607;return 255==c?a?NaN:Infinity*b:0==c?b*Math.pow(2,-149)*a:b*Math.pow(2,c-150)*(a+Math.pow(2,23))};
	jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047;a=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?a?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*a:c*Math.pow(2,d-1075)*(a+jspb.BinaryConstants.TWO_TO_52)};jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255)};jspb.utils.DIGITS="0123456789abcdef".split("");
	jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a){for(var b=1E7,c=0;7>c;c++){b/=10;var d=a/b%10>>>0;if(0!=d||f)f=!0,g+=e[d];}}if(2097151>=b)return""+(jspb.BinaryConstants.TWO_TO_32*b+a);var d=(a>>>24|b<<8)>>>0&16777215;b=b>>16&65535;a=(a&16777215)+6777216*d+6710656*b;d+=8147497*b;b*=2;1E7<=a&&(d+=Math.floor(a/1E7),a%=1E7);1E7<=d&&(b+=Math.floor(d/1E7),d%=1E7);var e=jspb.utils.DIGITS,f=!1,g="";(b||f)&&c(b);(d||f)&&c(d);(a||f)&&c(a);return g};
	jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);a=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+a:a};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(a,c):jspb.utils.joinUnsignedDecimalString(a,c)};
	jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]=jspb.utils.hash64ToDecimalString(a[d],b);return c};jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++)b=a*e[c]+b,e[c]=b&255,b>>>=8;}function c(){for(var a=0;8>a;a++)e[a]=~e[a]&255;}goog.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++)b(10,jspb.utils.DIGITS.indexOf(a[f]));d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e)};
	jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.DIGITS[d>>4];b[2*c+3]=jspb.utils.DIGITS[d&15];}return b.join("")};
	jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();goog.asserts.assert(18==a.length);goog.asserts.assert("0"==a[0]);goog.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++){var d=jspb.utils.DIGITS.indexOf(a[2*c+2]),e=jspb.utils.DIGITS.indexOf(a[2*c+3]);b=String.fromCharCode(16*d+e)+b;}return b};jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;return b?jspb.utils.joinInt64(a,c):jspb.utils.joinUint64(a,c)};
	jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++)d+=a[e]>>7;return c-b-d};
	jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;)for(e++;;){var f=a[b++];if(0==(f&128))break}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7;}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128););}return e};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;)f++,b+=e;else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7;}if(a[b++]!=g)break;f++;b+=e;}return f};
	jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4)};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8)};
	jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7;}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128););b+=g;}return e};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++)b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16);}return b+'"'};
	jspb.utils.debugScalarToTextFormat=function(a){return goog.isString(a)?goog.string.quote(a):a.toString()};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d;}return b};
	jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||"undefined"!=typeof Buffer&&a.constructor===Buffer||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0)};jspb.BinaryIterator=function(a,b,c){this.elements_=this.nextMethod_=this.decoder_=null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!0;this.init_(a,b,c);};jspb.BinaryIterator.prototype.init_=function(a,b,c){a&&b&&(this.decoder_=a,this.nextMethod_=b);this.elements_=c||null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!this.decoder_&&!this.elements_;this.next();};jspb.BinaryIterator.instanceCache_=[];
	jspb.BinaryIterator.alloc=function(a,b,c){if(jspb.BinaryIterator.instanceCache_.length){var d=jspb.BinaryIterator.instanceCache_.pop();d.init_(a,b,c);return d}return new jspb.BinaryIterator(a,b,c)};jspb.BinaryIterator.prototype.free=function(){this.clear();100>jspb.BinaryIterator.instanceCache_.length&&jspb.BinaryIterator.instanceCache_.push(this);};
	jspb.BinaryIterator.prototype.clear=function(){this.decoder_&&this.decoder_.free();this.elements_=this.nextMethod_=this.decoder_=null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!0;};jspb.BinaryIterator.prototype.get=function(){return this.nextValue_};jspb.BinaryIterator.prototype.atEnd=function(){return this.atEnd_};
	jspb.BinaryIterator.prototype.next=function(){var a=this.nextValue_;this.decoder_?this.decoder_.atEnd()?(this.nextValue_=null,this.atEnd_=!0):this.nextValue_=this.nextMethod_.call(this.decoder_):this.elements_&&(this.cursor_==this.elements_.length?(this.nextValue_=null,this.atEnd_=!0):this.nextValue_=this.elements_[this.cursor_++]);return a};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.tempHigh_=this.tempLow_=this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c);};
	jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d}return new jspb.BinaryDecoder(a,b,c)};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this);};jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)};
	jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_};jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=goog.isDef(b)?b:0;this.end_=goog.isDef(c)?this.start_+c:this.bytes_.length;this.cursor_=this.start_;};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_};
	jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a;};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_;};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_};jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a;};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_};
	jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_};
	jspb.BinaryDecoder.prototype.readSplitVarint64_=function(){for(var a,b=0,c,d=0;4>d;d++)if(a=this.bytes_[this.cursor_++],b|=(a&127)<<7*d,128>a){this.tempLow_=b>>>0;this.tempHigh_=0;return}a=this.bytes_[this.cursor_++];b|=(a&127)<<28;c=0|(a&127)>>4;if(128>a)this.tempLow_=b>>>0,this.tempHigh_=c>>>0;else{for(d=0;5>d;d++)if(a=this.bytes_[this.cursor_++],c|=(a&127)<<7*d+3,128>a){this.tempLow_=b>>>0;this.tempHigh_=c>>>0;return}goog.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=
	!0;}};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;)this.cursor_++;this.cursor_++;};jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;)this.cursor_--,a>>>=7;this.cursor_--;};
	jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a=this.bytes_;var b=a[this.cursor_+0];var c=b&127;if(128>b)return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+1];c|=(b&127)<<7;if(128>b)return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+2];c|=(b&127)<<14;if(128>b)return this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),c;b=a[this.cursor_+3];c|=(b&127)<<21;if(128>b)return this.cursor_+=4,goog.asserts.assert(this.cursor_<=
	this.end_),c;b=a[this.cursor_+4];c|=(b&15)<<28;if(128>b)return this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&128<=a[this.cursor_++]&&goog.asserts.assert(!1);goog.asserts.assert(this.cursor_<=this.end_);return c};jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32;jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()};
	jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1)};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinUint64(this.tempLow_,this.tempHigh_)};
	jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){this.readSplitVarint64_();return jspb.utils.joinUnsignedDecimalString(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readSignedVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinInt64(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){this.readSplitVarint64_();return jspb.utils.joinSignedDecimalString(this.tempLow_,this.tempHigh_)};
	jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinZigzag64(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readZigzagVarint64().toString()};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a};
	jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8};jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0};
	jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b)};jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a<<24>>24};
	jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24};
	jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b)};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b)};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0)};
	jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b)};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()};
	jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63);}else if(240>f){g=b[c++];var h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63);}else if(248>f){g=b[c++];h=b[c++];var k=b[c++];f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63;f-=65536;d.push((f>>10&1023)+55296,(f&1023)+56320);}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0);}e+=goog.crypt.byteArrayToString(d);
	this.cursor_=c;return e};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a)};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);return b};
	jspb.BinaryDecoder.prototype.readVarintHash64=function(){this.readSplitVarint64_();return jspb.utils.joinHash64(this.tempLow_,this.tempHigh_)};jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6];a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a)};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;};jspb.BinaryReader.instanceCache_=[];
	jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d}return new jspb.BinaryReader(a,b,c)};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;
	jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this);};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()};
	jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_};jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_};jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP};jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()};
	jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a);};
	jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3;a&=7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return goog.asserts.fail("Invalid wire type: %s (at position %s)",
	a,this.fieldCursor_),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0};jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_);};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;)this.skipField();this.decoder_.atEnd()||this.unskipHeader();};
	jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint();};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a);}};
	jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4);};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8);};
	jspb.BinaryReader.prototype.skipGroup=function(){var a=this.nextField_;do{if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=a&&(goog.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField();}while(1)};
	jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.");}};
	jspb.BinaryReader.prototype.registerReadCallback=function(a,b){goog.isNull(this.readCallbacks_)&&(this.readCallbacks_={});goog.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b;};jspb.BinaryReader.prototype.runReadCallback=function(a){goog.asserts.assert(!goog.isNull(this.readCallbacks_));a=this.readCallbacks_[a];goog.asserts.assert(a);return a(this)};
	jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();
	case b.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();
	default:goog.asserts.fail("Invalid field type in readAny()");}return 0};jspb.BinaryReader.prototype.readMessage=function(a,b){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32();d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c);};
	jspb.BinaryReader.prototype.readGroup=function(a,b,c){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);goog.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0);};
	jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a;a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a};jspb.BinaryReader.prototype.readInt32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32()};
	jspb.BinaryReader.prototype.readInt32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String()};jspb.BinaryReader.prototype.readInt64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};jspb.BinaryReader.prototype.readInt64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String()};
	jspb.BinaryReader.prototype.readUint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readUint32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String()};jspb.BinaryReader.prototype.readUint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64()};
	jspb.BinaryReader.prototype.readUint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String()};jspb.BinaryReader.prototype.readSint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32()};jspb.BinaryReader.prototype.readSint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64()};
	jspb.BinaryReader.prototype.readSint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String()};jspb.BinaryReader.prototype.readFixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32()};jspb.BinaryReader.prototype.readFixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64()};
	jspb.BinaryReader.prototype.readFixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String()};jspb.BinaryReader.prototype.readSfixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32()};jspb.BinaryReader.prototype.readSfixed32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString()};
	jspb.BinaryReader.prototype.readSfixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64()};jspb.BinaryReader.prototype.readSfixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String()};jspb.BinaryReader.prototype.readFloat=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat()};
	jspb.BinaryReader.prototype.readDouble=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble()};jspb.BinaryReader.prototype.readBool=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32()};jspb.BinaryReader.prototype.readEnum=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64()};
	jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a)};jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a)};
	jspb.BinaryReader.prototype.readVarintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64()};jspb.BinaryReader.prototype.readFixedHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64()};
	jspb.BinaryReader.prototype.readPackedField_=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var b=this.decoder_.readUnsignedVarint32();b=this.decoder_.getCursor()+b;for(var c=[];this.decoder_.getCursor()<b;)c.push(a.call(this.decoder_));return c};jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)};jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)};
	jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)};jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)};jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)};jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)};
	jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)};jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)};jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)};jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)};
	jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)};jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)};jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)};
	jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)};jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)};jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)};
	jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)};jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)};jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)};jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)};
	jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)};jspb.Map=function(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_();};jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1]);}this.arrClean=!0;};
	jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a)if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray();}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value]);}this.arrClean=!0;}return this.arr_};
	jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(goog.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value]);}return d};jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f);}return b};jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a;};
	jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}};"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length};jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1;};
	jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b};jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value]);}return a};jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)]);}return new jspb.Map.ArrayIteratorIterable_(a)};
	jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.map_[b[c]].key);return new jspb.Map.ArrayIteratorIterable_(a)};jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++)a.push(this.wrapEntry_(this.map_[b[c]]));return new jspb.Map.ArrayIteratorIterable_(a)};
	jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this);}};jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this};jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value};
	jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a)};jspb.Map.prototype.has=function(a){return a.toString()in this.map_};jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage();}};
	jspb.Map.deserializeBinary=function(a,b,c,d,e,f){for(var g=void 0;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(goog.asserts.assert(e),g=new a.valueCtor_,d.call(b,g,e)):g=d.call(b));}goog.asserts.assert(void 0!=f);goog.asserts.assert(void 0!=g);a.set(f,g);};jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);return b};
	jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0;};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e;};jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f;};jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor};jspb.Message=function(){};jspb.Message.GENERATE_TO_OBJECT=!0;jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;
	jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_};jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_};jspb.Message.hiddenES6Property_=function(){};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_};
	jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedPrimitiveFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++)c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=
	a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);if(f&&f.length)for(b=0;b<f.length;b++)jspb.Message.computeOneofCase(a,f[b]);};jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:goog.isArray(a)};jspb.Message.isExtensionObject_=function(a){return null!==a&&"object"==typeof a&&!jspb.Message.isArray_(a)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)};
	jspb.Message.initPivotAndExtensionObject_=function(a,b){var c=a.array.length,d=-1;if(c&&(d=c-1,c=a.array[d],jspb.Message.isExtensionObject_(c))){a.pivot_=jspb.Message.getFieldNumber_(a,d);a.extensionObject_=c;return}-1<b?(a.pivot_=Math.max(b,jspb.Message.getFieldNumber_(a,d+1)),a.extensionObject_=null):a.pivot_=Number.MAX_VALUE;};jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={});};
	jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++)d[e]=b.call(a[e],c,a[e]);return d};jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName)if(g.fieldName.hasOwnProperty(k))break;b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h;}}};
	jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType())if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
	else f.binaryWriterFn.call(b,g.fieldIndex,h);}};jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(c.isMessageType()){var g=new c.ctor;f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn);}else g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g);}else b.skipField();};
	jspb.Message.getField=function(a,b){if(b<a.pivot_){b=jspb.Message.getIndex_(a,b);var c=a.array[b];return c===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[b]=[]:c}if(a.extensionObject_)return c=a.extensionObject_[b],c===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:c};jspb.Message.getRepeatedField=function(a,b){return jspb.Message.getField(a,b)};jspb.Message.getOptionalFloatingPointField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:+a};
	jspb.Message.getBooleanField=function(a,b){a=jspb.Message.getField(a,b);return null==a?a:!!a};jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=+c[d];a.convertedPrimitiveFields_[b]=!0;}return c};
	jspb.Message.getRepeatedBooleanField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedPrimitiveFields_||(a.convertedPrimitiveFields_={});if(!a.convertedPrimitiveFields_[b]){for(var d=0;d<c.length;d++)c[d]=!!c[d];a.convertedPrimitiveFields_[b]=!0;}return c};
	jspb.Message.bytesAsB64=function(a){if(null==a||goog.isString(a))return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null};jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if(goog.isString(a))return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null};
	jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||goog.isString(a[0])?a:goog.array.map(a,jspb.Message.bytesAsB64)};jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8)};
	jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b);});}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a};jspb.Message.getBooleanFieldWithDefault=function(a,b,c){a=jspb.Message.getBooleanField(a,b);return null==a?c:a};
	jspb.Message.getFloatingPointFieldWithDefault=function(a,b,c){a=jspb.Message.getOptionalFloatingPointField(a,b);return null==a?c:a};jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];var e=jspb.Message.getField(a,b);if(!e){if(c)return;e=[];jspb.Message.setField(a,b,e);}return a.wrappers_[b]=new jspb.Map(e,d)};
	jspb.Message.setField=function(a,b,c){b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);};jspb.Message.setProto3IntField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setProto3FloatField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setProto3BooleanField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,!1);};
	jspb.Message.setProto3StringField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"");};jspb.Message.setProto3BytesField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"");};jspb.Message.setProto3EnumField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setProto3StringIntField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"0");};
	jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){c!==d?jspb.Message.setField(a,b,c):a.array[jspb.Message.getIndex_(a,b)]=null;};jspb.Message.addToRepeatedField=function(a,b,c,d){a=jspb.Message.getRepeatedField(a,b);void 0!=d?a.splice(d,0,c):a.push(c);};jspb.Message.setOneofField=function(a,b,c,d){(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));jspb.Message.setField(a,b,d);};
	jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0));}return c?(jspb.Message.setField(a,c,d),c):0};jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e);}return a.wrappers_[c]};
	jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b};jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.wrappers_[c]=e;}};
	jspb.Message.setWrapperField=function(a,b,c){a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;jspb.Message.setField(a,b,d);};jspb.Message.setOneofWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;jspb.Message.setOneofField(a,b,c,e);};jspb.Message.setRepeatedWrapperField=function(a,b,c){a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=c[e].toArray();a.wrappers_[b]=c;jspb.Message.setField(a,b,d);};
	jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d;a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c};jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++)e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];return e};
	jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(goog.isArray(b))for(var c=0;c<b.length;c++)b[c]&&b[c].toArray();else b&&b.toArray();}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array};jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString()});
	jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b)})),this.wrappers_[b]}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b]}};
	jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray()})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this};
	jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray();b=b.toArray();var d=[],e=0,f=c.length>b.length?c.length:b.length;a.getJsPbMessageId()&&(d[0]=a.getJsPbMessageId(),e=1);for(;e<f;e++)jspb.Message.compareFields(c[e],b[e])||(d[e]=b[e]);return new a.constructor(d)};jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray())};
	jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a)c[d]=0;for(d in b)c[d]=0;for(d in c)if(!jspb.Message.compareFields(a[d],b[d]))return!1;return!0};
	jspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return goog.isNumber(a)&&isNaN(a)||goog.isNumber(b)&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]!=b[c])return!1;return!0}if(a.constructor===Array){var d=void 0,e=void 0,f=Math.max(a.length,b.length);for(c=0;c<f;c++){var g=a[c],h=b[c];g&&g.constructor==
	Object&&(goog.asserts.assert(void 0===d),goog.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(goog.asserts.assert(void 0===e),goog.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)};
	jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)};jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a)};jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()))};
	jspb.Message.copyInto=function(a,b){goog.asserts.assertInstanceof(a,jspb.Message);goog.asserts.assertInstanceof(b,jspb.Message);goog.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");a=jspb.Message.clone(a);for(var c=b.toArray(),d=a.toArray(),e=c.length=0;e<d.length;e++)c[e]=d[e];b.wrappers_=a.wrappers_;b.extensionObject_=a.extensionObject_;};
	jspb.Message.clone_=function(a){if(goog.isArray(a)){for(var b=Array(a.length),c=0;c<a.length;c++){var d=a[c];null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d);}return b}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);b={};for(c in a)d=a[c],null!=d&&(b[c]="object"==typeof d?jspb.Message.clone_(goog.asserts.assert(d)):d);return b};jspb.Message.registerMessageType=function(a,b){jspb.Message.registry_[a]=b;b.messageId=a;};
	jspb.Message.registry_={};jspb.Message.messageSetExtensions={};jspb.Message.messageSetExtensionsBinary={};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b;};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0)};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)};
	jspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648)};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1)};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};
	jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.UInt64.mul32x32=function(a,b){var c=a&65535;a>>>=16;var d=b&65535,e=b>>>16;b=c*d+65536*(c*e&65535)+65536*(a*d&65535);for(c=a*e+(c*e>>>16)+(a*d>>>16);4294967296<=b;)b-=4294967296,c+=1;return new jspb.arith.UInt64(b>>>0,c>>>0)};
	jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a)};
	jspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();)a=a.leftShift(),d=d.leftShift();for(;!d.zero();)0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();return[b,c]};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();){b=b.div(10);var c=b[0];a=b[1].lo+a;b=c;}""==a&&(a="0");return a};
	jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c);}return b};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b;};
	jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0)};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)};
	jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=(new jspb.arith.UInt64(0,0)).sub(b));return(a?"-":"")+b.toString()};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=(new jspb.arith.UInt64(0,0)).sub(a));return new jspb.arith.Int64(a.lo,a.hi)};jspb.BinaryEncoder=function(){this.buffer_=[];};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a};
	jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;)this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;this.buffer_.push(a);};
	jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b);};
	jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));for(goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;)this.buffer_.push(a&127|128),a>>>=7;this.buffer_.push(a);};
	jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++)this.buffer_.push(a&127|128),a>>=7;this.buffer_.push(1);}};
	jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0);};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarint64(parseInt(a,10));};jspb.BinaryEncoder.prototype.writeUint8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255);};jspb.BinaryEncoder.prototype.writeUint16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);};
	jspb.BinaryEncoder.prototype.writeUint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255);};jspb.BinaryEncoder.prototype.writeUint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeInt8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255);};jspb.BinaryEncoder.prototype.writeInt16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);};
	jspb.BinaryEncoder.prototype.writeInt32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255);};
	jspb.BinaryEncoder.prototype.writeInt64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeInt64String=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeFloat=function(a){goog.asserts.assert(a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low);};
	jspb.BinaryEncoder.prototype.writeDouble=function(a){goog.asserts.assert(a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeBool=function(a){goog.asserts.assert(goog.isBoolean(a)||goog.isNumber(a));this.buffer_.push(a?1:0);};
	jspb.BinaryEncoder.prototype.writeEnum=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a);};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a);};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};
	jspb.BinaryEncoder.prototype.writeString=function(a){for(var b=this.buffer_.length,c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128),c++);}else this.buffer_.push(d>>
	12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128);}return this.buffer_.length-b};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder;this.bookmarks_=[];};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length;};
	jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop();b=this.totalLength_+this.encoder_.length()-b;for(goog.asserts.assert(0<=b);127<b;)a.push(b&127|128),b>>>=7,this.totalLength_++;a.push(b);this.totalLength_++;};
	jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c));};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c);};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[];};
	jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length;}b=this.encoder_.end();a.set(b,d);d+=b.length;goog.asserts.assert(d==a.length);this.blocks_=[a];return a};jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a)};
	jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a));};jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop());};jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){goog.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b);};
	jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");
	break;case d.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:goog.asserts.fail("Invalid field type in writeAny()");}};
	jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b));};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b));};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b));};
	jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b));};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b));};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b));};
	jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b));};jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b));};
	jspb.BinaryWriter.prototype.writeInt32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b));};jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b));};
	jspb.BinaryWriter.prototype.writeInt64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi));};jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b));};
	jspb.BinaryWriter.prototype.writeUint32String=function(a,b){null!=b&&(b=parseInt(b,10),goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b));};jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b));};
	jspb.BinaryWriter.prototype.writeUint64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(b.lo,b.hi));};jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b));};
	jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b));};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&(goog.asserts.assert(+b>=-jspb.BinaryConstants.TWO_TO_63&&+b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64String_(a,b));};
	jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b));};jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b));};
	jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){null!=b&&(b=jspb.arith.UInt64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi));};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b));};
	jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b));};jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){null!=b&&(b=jspb.arith.Int64.fromString(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(b.lo,b.hi));};
	jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b));};jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b));};jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(goog.asserts.assert(goog.isBoolean(b)||goog.isNumber(b)),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b));};
	jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b));};jspb.BinaryWriter.prototype.writeString=function(a,b){null!=b&&(a=this.beginDelimited_(a),this.encoder_.writeString(b),this.endDelimited_(a));};
	jspb.BinaryWriter.prototype.writeBytes=function(a,b){null!=b&&(b=jspb.utils.byteSourceToUint8Array(b),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),this.appendUint8Array_(b));};jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a));};
	jspb.BinaryWriter.prototype.writeMessageSet=function(a,b,c){null!=b&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(a),a=this.beginDelimited_(3),c(b,this),this.endDelimited_(a),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP));};
	jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP));};jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b));};
	jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b));};jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint32_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt32String(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSignedVarint64_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeInt64String(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint32_(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint32String(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUnsignedVarint64_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeUint64String(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint32_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64_(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeZigzagVarint64String_(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed32(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixed64String(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed32(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeSfixed64String(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFloat(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeDouble(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBool(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeEnum(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeString(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeBytes(a,b[c]);};jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e);}};
	jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++)this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP);};jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeFixedHash64(a,b[c]);};
	jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++)this.writeVarintHash64(a,b[c]);};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(b[c]);this.endDelimited_(a);}};
	jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint32(parseInt(b[c],10));this.endDelimited_(a);}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeSignedVarint64(b[c]);this.endDelimited_(a);}};
	jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.Int64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi);}this.endDelimited_(a);}};jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(b[c]);this.endDelimited_(a);}};
	jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint32(parseInt(b[c],10));this.endDelimited_(a);}};jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeUnsignedVarint64(b[c]);this.endDelimited_(a);}};
	jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitVarint64(d.lo,d.hi);}this.endDelimited_(a);}};jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint32(b[c]);this.endDelimited_(a);}};
	jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(b[c]);this.endDelimited_(a);}};jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeZigzagVarint64(parseInt(b[c],10));this.endDelimited_(a);}};
	jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeUint32(b[a]);};jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeUint64(b[a]);};
	jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++){var c=jspb.arith.UInt64.fromString(b[a]);this.encoder_.writeSplitFixed64(c.lo,c.hi);}};
	jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeInt32(b[a]);};jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64(b[a]);};
	jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeInt64String(b[a]);};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*b.length),a=0;a<b.length;a++)this.encoder_.writeFloat(b[a]);};
	jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeDouble(b[a]);};jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(b.length),a=0;a<b.length;a++)this.encoder_.writeBool(b[a]);};
	jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeEnum(b[c]);this.endDelimited_(a);}};jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length)for(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*b.length),a=0;a<b.length;a++)this.encoder_.writeFixedHash64(b[a]);};
	jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){a=this.beginDelimited_(a);for(var c=0;c<b.length;c++)this.encoder_.writeVarintHash64(b[c]);this.endDelimited_(a);}};jspb.Export={};var Map=jspb.Map;var Message=jspb.Message;var BinaryReader=jspb.BinaryReader;var BinaryWriter=jspb.BinaryWriter;var ExtensionFieldInfo=jspb.ExtensionFieldInfo;var ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo;var exportSymbol=goog.exportSymbol;var inherits$1=goog.inherits;var object={extend:goog.object.extend};var typeOf=goog.typeOf;

	var googleProtobuf = {
		Map: Map,
		Message: Message,
		BinaryReader: BinaryReader,
		BinaryWriter: BinaryWriter,
		ExtensionFieldInfo: ExtensionFieldInfo,
		ExtensionFieldBinaryInfo: ExtensionFieldBinaryInfo,
		exportSymbol: exportSymbol,
		inherits: inherits$1,
		object: object,
		typeOf: typeOf
	};

	var any_pb = createCommonjsModule(function (module, exports) {
	// source: google/protobuf/any.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!


	var goog = googleProtobuf;
	var global = Function('return this')();

	goog.exportSymbol('proto.google.protobuf.Any', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.google.protobuf.Any = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.google.protobuf.Any, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.google.protobuf.Any.displayName = 'proto.google.protobuf.Any';
	}



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.google.protobuf.Any.prototype.toObject = function(opt_includeInstance) {
	  return proto.google.protobuf.Any.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.google.protobuf.Any} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.google.protobuf.Any.toObject = function(includeInstance, msg) {
	  var obj = {
	    typeUrl: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
	    value: msg.getValue_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.google.protobuf.Any}
	 */
	proto.google.protobuf.Any.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.google.protobuf.Any;
	  return proto.google.protobuf.Any.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.google.protobuf.Any} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.google.protobuf.Any}
	 */
	proto.google.protobuf.Any.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setTypeUrl(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setValue(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.google.protobuf.Any.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.google.protobuf.Any.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.google.protobuf.Any} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.google.protobuf.Any.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTypeUrl();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getValue_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string type_url = 1;
	 * @return {string}
	 */
	proto.google.protobuf.Any.prototype.getTypeUrl = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/** @param {string} value */
	proto.google.protobuf.Any.prototype.setTypeUrl = function(value) {
	  googleProtobuf.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional bytes value = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.google.protobuf.Any.prototype.getValue = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes value = 2;
	 * This is a type-conversion wrapper around `getValue()`
	 * @return {string}
	 */
	proto.google.protobuf.Any.prototype.getValue_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getValue()));
	};


	/**
	 * optional bytes value = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getValue()`
	 * @return {!Uint8Array}
	 */
	proto.google.protobuf.Any.prototype.getValue_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getValue()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.google.protobuf.Any.prototype.setValue = function(value) {
	  googleProtobuf.Message.setProto3BytesField(this, 2, value);
	};


	goog.object.extend(exports, proto.google.protobuf);
	/* This code will be inserted into generated code for
	 * google/protobuf/any.proto. */

	/**
	 * Returns the type name contained in this instance, if any.
	 * @return {string|undefined}
	 */
	proto.google.protobuf.Any.prototype.getTypeName = function() {
	  return this.getTypeUrl().split('/').pop();
	};


	/**
	 * Packs the given message instance into this Any.
	 * For binary format usage only.
	 * @param {!Uint8Array} serialized The serialized data to pack.
	 * @param {string} name The type name of this message object.
	 * @param {string=} opt_typeUrlPrefix the type URL prefix.
	 */
	proto.google.protobuf.Any.prototype.pack = function(serialized, name,
	                                                    opt_typeUrlPrefix) {
	  if (!opt_typeUrlPrefix) {
	    opt_typeUrlPrefix = 'type.googleapis.com/';
	  }

	  if (opt_typeUrlPrefix.substr(-1) != '/') {
	    this.setTypeUrl(opt_typeUrlPrefix + '/' + name);
	  } else {
	    this.setTypeUrl(opt_typeUrlPrefix + name);
	  }

	  this.setValue(serialized);
	};


	/**
	 * @template T
	 * Unpacks this Any into the given message object.
	 * @param {function(Uint8Array):T} deserialize Function that will deserialize
	 *     the binary data properly.
	 * @param {string} name The expected type name of this message object.
	 * @return {?T} If the name matched the expected name, returns the deserialized
	 *     object, otherwise returns null.
	 */
	proto.google.protobuf.Any.prototype.unpack = function(deserialize, name) {
	  if (this.getTypeName() == name) {
	    return deserialize(this.getValue_asU8());
	  } else {
	    return null;
	  }
	};
	});

	var Discover_pb = createCommonjsModule(function (module, exports) {
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!


	var goog = googleProtobuf;
	var global = Function('return this')();

	goog.exportSymbol('proto.protocol.BackupMessage', null, global);
	goog.exportSymbol('proto.protocol.Endpoint', null, global);
	goog.exportSymbol('proto.protocol.FindNeighbours', null, global);
	goog.exportSymbol('proto.protocol.Neighbours', null, global);
	goog.exportSymbol('proto.protocol.PingMessage', null, global);
	goog.exportSymbol('proto.protocol.PongMessage', null, global);

	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Endpoint = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Endpoint, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Endpoint.displayName = 'proto.protocol.Endpoint';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Endpoint.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Endpoint.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Endpoint} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Endpoint.toObject = function(includeInstance, msg) {
	  var obj = {
	    address: msg.getAddress_asB64(),
	    port: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    nodeid: msg.getNodeid_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Endpoint}
	 */
	proto.protocol.Endpoint.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Endpoint;
	  return proto.protocol.Endpoint.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Endpoint} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Endpoint}
	 */
	proto.protocol.Endpoint.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setPort(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setNodeid(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Endpoint.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Endpoint.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Endpoint} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Endpoint.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getPort();
	  if (f !== 0) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	  f = message.getNodeid_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Endpoint.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes address = 1;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.Endpoint.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Endpoint.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Endpoint.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int32 port = 2;
	 * @return {number}
	 */
	proto.protocol.Endpoint.prototype.getPort = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.Endpoint.prototype.setPort = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes nodeId = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Endpoint.prototype.getNodeid = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes nodeId = 3;
	 * This is a type-conversion wrapper around `getNodeid()`
	 * @return {string}
	 */
	proto.protocol.Endpoint.prototype.getNodeid_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getNodeid()));
	};


	/**
	 * optional bytes nodeId = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getNodeid()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Endpoint.prototype.getNodeid_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getNodeid()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Endpoint.prototype.setNodeid = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.PingMessage = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.PingMessage, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.PingMessage.displayName = 'proto.protocol.PingMessage';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.PingMessage.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.PingMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.PingMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.PingMessage.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    from: (f = msg.getFrom()) && proto.protocol.Endpoint.toObject(includeInstance, f),
	    to: (f = msg.getTo()) && proto.protocol.Endpoint.toObject(includeInstance, f),
	    version: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.PingMessage}
	 */
	proto.protocol.PingMessage.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.PingMessage;
	  return proto.protocol.PingMessage.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.PingMessage} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.PingMessage}
	 */
	proto.protocol.PingMessage.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Endpoint;
	      reader.readMessage(value,proto.protocol.Endpoint.deserializeBinaryFromReader);
	      msg.setFrom(value);
	      break;
	    case 2:
	      var value = new proto.protocol.Endpoint;
	      reader.readMessage(value,proto.protocol.Endpoint.deserializeBinaryFromReader);
	      msg.setTo(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setVersion(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.PingMessage.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.PingMessage.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.PingMessage} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.PingMessage.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrom();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getTo();
	  if (f != null) {
	    writer.writeMessage(
	      2,
	      f,
	      proto.protocol.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getVersion();
	  if (f !== 0) {
	    writer.writeInt32(
	      3,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional Endpoint from = 1;
	 * @return {?proto.protocol.Endpoint}
	 */
	proto.protocol.PingMessage.prototype.getFrom = function() {
	  return /** @type{?proto.protocol.Endpoint} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Endpoint, 1));
	};


	/** @param {?proto.protocol.Endpoint|undefined} value */
	proto.protocol.PingMessage.prototype.setFrom = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.PingMessage.prototype.clearFrom = function() {
	  this.setFrom(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.PingMessage.prototype.hasFrom = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional Endpoint to = 2;
	 * @return {?proto.protocol.Endpoint}
	 */
	proto.protocol.PingMessage.prototype.getTo = function() {
	  return /** @type{?proto.protocol.Endpoint} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Endpoint, 2));
	};


	/** @param {?proto.protocol.Endpoint|undefined} value */
	proto.protocol.PingMessage.prototype.setTo = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 2, value);
	};


	proto.protocol.PingMessage.prototype.clearTo = function() {
	  this.setTo(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.PingMessage.prototype.hasTo = function() {
	  return googleProtobuf.Message.getField(this, 2) != null;
	};


	/**
	 * optional int32 version = 3;
	 * @return {number}
	 */
	proto.protocol.PingMessage.prototype.getVersion = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.PingMessage.prototype.setVersion = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 timestamp = 4;
	 * @return {number}
	 */
	proto.protocol.PingMessage.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.PingMessage.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.PongMessage = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.PongMessage, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.PongMessage.displayName = 'proto.protocol.PongMessage';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.PongMessage.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.PongMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.PongMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.PongMessage.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    from: (f = msg.getFrom()) && proto.protocol.Endpoint.toObject(includeInstance, f),
	    echo: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.PongMessage}
	 */
	proto.protocol.PongMessage.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.PongMessage;
	  return proto.protocol.PongMessage.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.PongMessage} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.PongMessage}
	 */
	proto.protocol.PongMessage.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Endpoint;
	      reader.readMessage(value,proto.protocol.Endpoint.deserializeBinaryFromReader);
	      msg.setFrom(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setEcho(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.PongMessage.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.PongMessage.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.PongMessage} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.PongMessage.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrom();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getEcho();
	  if (f !== 0) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional Endpoint from = 1;
	 * @return {?proto.protocol.Endpoint}
	 */
	proto.protocol.PongMessage.prototype.getFrom = function() {
	  return /** @type{?proto.protocol.Endpoint} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Endpoint, 1));
	};


	/** @param {?proto.protocol.Endpoint|undefined} value */
	proto.protocol.PongMessage.prototype.setFrom = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.PongMessage.prototype.clearFrom = function() {
	  this.setFrom(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.PongMessage.prototype.hasFrom = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional int32 echo = 2;
	 * @return {number}
	 */
	proto.protocol.PongMessage.prototype.getEcho = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.PongMessage.prototype.setEcho = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.protocol.PongMessage.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.PongMessage.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.FindNeighbours = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.FindNeighbours, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.FindNeighbours.displayName = 'proto.protocol.FindNeighbours';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.FindNeighbours.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.FindNeighbours.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.FindNeighbours} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.FindNeighbours.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    from: (f = msg.getFrom()) && proto.protocol.Endpoint.toObject(includeInstance, f),
	    targetid: msg.getTargetid_asB64(),
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.FindNeighbours}
	 */
	proto.protocol.FindNeighbours.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.FindNeighbours;
	  return proto.protocol.FindNeighbours.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.FindNeighbours} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.FindNeighbours}
	 */
	proto.protocol.FindNeighbours.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Endpoint;
	      reader.readMessage(value,proto.protocol.Endpoint.deserializeBinaryFromReader);
	      msg.setFrom(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTargetid(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.FindNeighbours.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.FindNeighbours.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.FindNeighbours} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.FindNeighbours.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrom();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getTargetid_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional Endpoint from = 1;
	 * @return {?proto.protocol.Endpoint}
	 */
	proto.protocol.FindNeighbours.prototype.getFrom = function() {
	  return /** @type{?proto.protocol.Endpoint} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Endpoint, 1));
	};


	/** @param {?proto.protocol.Endpoint|undefined} value */
	proto.protocol.FindNeighbours.prototype.setFrom = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.FindNeighbours.prototype.clearFrom = function() {
	  this.setFrom(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.FindNeighbours.prototype.hasFrom = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes targetId = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.FindNeighbours.prototype.getTargetid = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes targetId = 2;
	 * This is a type-conversion wrapper around `getTargetid()`
	 * @return {string}
	 */
	proto.protocol.FindNeighbours.prototype.getTargetid_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTargetid()));
	};


	/**
	 * optional bytes targetId = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTargetid()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.FindNeighbours.prototype.getTargetid_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTargetid()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.FindNeighbours.prototype.setTargetid = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.protocol.FindNeighbours.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.FindNeighbours.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Neighbours = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Neighbours.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Neighbours, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Neighbours.displayName = 'proto.protocol.Neighbours';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Neighbours.repeatedFields_ = [2];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Neighbours.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Neighbours.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Neighbours} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Neighbours.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    from: (f = msg.getFrom()) && proto.protocol.Endpoint.toObject(includeInstance, f),
	    neighboursList: googleProtobuf.Message.toObjectList(msg.getNeighboursList(),
	    proto.protocol.Endpoint.toObject, includeInstance),
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Neighbours}
	 */
	proto.protocol.Neighbours.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Neighbours;
	  return proto.protocol.Neighbours.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Neighbours} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Neighbours}
	 */
	proto.protocol.Neighbours.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Endpoint;
	      reader.readMessage(value,proto.protocol.Endpoint.deserializeBinaryFromReader);
	      msg.setFrom(value);
	      break;
	    case 2:
	      var value = new proto.protocol.Endpoint;
	      reader.readMessage(value,proto.protocol.Endpoint.deserializeBinaryFromReader);
	      msg.addNeighbours(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Neighbours.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Neighbours.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Neighbours} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Neighbours.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrom();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getNeighboursList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      2,
	      f,
	      proto.protocol.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional Endpoint from = 1;
	 * @return {?proto.protocol.Endpoint}
	 */
	proto.protocol.Neighbours.prototype.getFrom = function() {
	  return /** @type{?proto.protocol.Endpoint} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Endpoint, 1));
	};


	/** @param {?proto.protocol.Endpoint|undefined} value */
	proto.protocol.Neighbours.prototype.setFrom = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.Neighbours.prototype.clearFrom = function() {
	  this.setFrom(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.Neighbours.prototype.hasFrom = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * repeated Endpoint neighbours = 2;
	 * @return {!Array.<!proto.protocol.Endpoint>}
	 */
	proto.protocol.Neighbours.prototype.getNeighboursList = function() {
	  return /** @type{!Array.<!proto.protocol.Endpoint>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Endpoint, 2));
	};


	/** @param {!Array.<!proto.protocol.Endpoint>} value */
	proto.protocol.Neighbours.prototype.setNeighboursList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
	};


	/**
	 * @param {!proto.protocol.Endpoint=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Endpoint}
	 */
	proto.protocol.Neighbours.prototype.addNeighbours = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Endpoint, opt_index);
	};


	proto.protocol.Neighbours.prototype.clearNeighboursList = function() {
	  this.setNeighboursList([]);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.protocol.Neighbours.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.Neighbours.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BackupMessage = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BackupMessage, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BackupMessage.displayName = 'proto.protocol.BackupMessage';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.BackupMessage.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.BackupMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.BackupMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BackupMessage.toObject = function(includeInstance, msg) {
	  var obj = {
	    flag: googleProtobuf.Message.getFieldWithDefault(msg, 1, false),
	    priority: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BackupMessage}
	 */
	proto.protocol.BackupMessage.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BackupMessage;
	  return proto.protocol.BackupMessage.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BackupMessage} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BackupMessage}
	 */
	proto.protocol.BackupMessage.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setFlag(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setPriority(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BackupMessage.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BackupMessage.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BackupMessage} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BackupMessage.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFlag();
	  if (f) {
	    writer.writeBool(
	      1,
	      f
	    );
	  }
	  f = message.getPriority();
	  if (f !== 0) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bool flag = 1;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.BackupMessage.prototype.getFlag = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, false));
	};


	/** @param {boolean} value */
	proto.protocol.BackupMessage.prototype.setFlag = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int32 priority = 2;
	 * @return {number}
	 */
	proto.protocol.BackupMessage.prototype.getPriority = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.BackupMessage.prototype.setPriority = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BackupMessage = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BackupMessage, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BackupMessage.displayName = 'proto.protocol.BackupMessage';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.BackupMessage.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.BackupMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.BackupMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BackupMessage.toObject = function(includeInstance, msg) {
	  var obj = {
	    flag: googleProtobuf.Message.getFieldWithDefault(msg, 1, false),
	    priority: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BackupMessage}
	 */
	proto.protocol.BackupMessage.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BackupMessage;
	  return proto.protocol.BackupMessage.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BackupMessage} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BackupMessage}
	 */
	proto.protocol.BackupMessage.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setFlag(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setPriority(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BackupMessage.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BackupMessage.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BackupMessage} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BackupMessage.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFlag();
	  if (f) {
	    writer.writeBool(
	      1,
	      f
	    );
	  }
	  f = message.getPriority();
	  if (f !== 0) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bool flag = 1;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.BackupMessage.prototype.getFlag = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, false));
	};


	/** @param {boolean} value */
	proto.protocol.BackupMessage.prototype.setFlag = function(value) {
	  googleProtobuf.Message.setProto3BooleanField(this, 1, value);
	};


	/**
	 * optional int32 priority = 2;
	 * @return {number}
	 */
	proto.protocol.BackupMessage.prototype.getPriority = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.BackupMessage.prototype.setPriority = function(value) {
	  googleProtobuf.Message.setProto3IntField(this, 2, value);
	};


	goog.object.extend(exports, proto.protocol);
	});

	var Tron_pb = createCommonjsModule(function (module, exports) {
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!


	var goog = googleProtobuf;
	var global = Function('return this')();



	goog.exportSymbol('proto.protocol.Account', null, global);
	goog.exportSymbol('proto.protocol.Account.AccountResource', null, global);
	goog.exportSymbol('proto.protocol.Account.Frozen', null, global);
	goog.exportSymbol('proto.protocol.AccountId', null, global);
	goog.exportSymbol('proto.protocol.AccountType', null, global);
	goog.exportSymbol('proto.protocol.Block', null, global);
	goog.exportSymbol('proto.protocol.BlockHeader', null, global);
	goog.exportSymbol('proto.protocol.BlockHeader.raw', null, global);
	goog.exportSymbol('proto.protocol.BlockInventory', null, global);
	goog.exportSymbol('proto.protocol.BlockInventory.BlockId', null, global);
	goog.exportSymbol('proto.protocol.BlockInventory.Type', null, global);
	goog.exportSymbol('proto.protocol.ChainInventory', null, global);
	goog.exportSymbol('proto.protocol.ChainInventory.BlockId', null, global);
	goog.exportSymbol('proto.protocol.ChainParameters', null, global);
	goog.exportSymbol('proto.protocol.ChainParameters.ChainParameter', null, global);
	goog.exportSymbol('proto.protocol.DisconnectMessage', null, global);
	goog.exportSymbol('proto.protocol.DynamicProperties', null, global);
	goog.exportSymbol('proto.protocol.Exchange', null, global);
	goog.exportSymbol('proto.protocol.HelloMessage', null, global);
	goog.exportSymbol('proto.protocol.HelloMessage.BlockId', null, global);
	goog.exportSymbol('proto.protocol.InternalTransaction', null, global);
	goog.exportSymbol('proto.protocol.InternalTransaction.CallValueInfo', null, global);
	goog.exportSymbol('proto.protocol.Inventory', null, global);
	goog.exportSymbol('proto.protocol.Inventory.InventoryType', null, global);
	goog.exportSymbol('proto.protocol.Items', null, global);
	goog.exportSymbol('proto.protocol.Items.ItemType', null, global);
	goog.exportSymbol('proto.protocol.Key', null, global);
	goog.exportSymbol('proto.protocol.Permission', null, global);
	goog.exportSymbol('proto.protocol.Proposal', null, global);
	goog.exportSymbol('proto.protocol.Proposal.State', null, global);
	goog.exportSymbol('proto.protocol.ReasonCode', null, global);
	goog.exportSymbol('proto.protocol.ResourceReceipt', null, global);
	goog.exportSymbol('proto.protocol.SmartContract', null, global);
	goog.exportSymbol('proto.protocol.SmartContract.ABI', null, global);
	goog.exportSymbol('proto.protocol.SmartContract.ABI.Entry', null, global);
	goog.exportSymbol('proto.protocol.SmartContract.ABI.Entry.EntryType', null, global);
	goog.exportSymbol('proto.protocol.SmartContract.ABI.Entry.Param', null, global);
	goog.exportSymbol('proto.protocol.SmartContract.ABI.Entry.StateMutabilityType', null, global);
	goog.exportSymbol('proto.protocol.TXInput', null, global);
	goog.exportSymbol('proto.protocol.TXInput.raw', null, global);
	goog.exportSymbol('proto.protocol.TXOutput', null, global);
	goog.exportSymbol('proto.protocol.TXOutputs', null, global);
	goog.exportSymbol('proto.protocol.Transaction', null, global);
	goog.exportSymbol('proto.protocol.Transaction.Contract', null, global);
	goog.exportSymbol('proto.protocol.Transaction.Contract.ContractType', null, global);
	goog.exportSymbol('proto.protocol.Transaction.Result', null, global);
	goog.exportSymbol('proto.protocol.Transaction.Result.code', null, global);
	goog.exportSymbol('proto.protocol.Transaction.Result.contractResult', null, global);
	goog.exportSymbol('proto.protocol.Transaction.raw', null, global);
	goog.exportSymbol('proto.protocol.TransactionInfo', null, global);
	goog.exportSymbol('proto.protocol.TransactionInfo.Log', null, global);
	goog.exportSymbol('proto.protocol.TransactionInfo.code', null, global);
	goog.exportSymbol('proto.protocol.TransactionSign', null, global);
	goog.exportSymbol('proto.protocol.Transactions', null, global);
	goog.exportSymbol('proto.protocol.Vote', null, global);
	goog.exportSymbol('proto.protocol.Votes', null, global);
	goog.exportSymbol('proto.protocol.Witness', null, global);
	goog.exportSymbol('proto.protocol.authority', null, global);

	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.AccountId = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.AccountId, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.AccountId.displayName = 'proto.protocol.AccountId';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.AccountId.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.AccountId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.AccountId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.AccountId.toObject = function(includeInstance, msg) {
	  var obj = {
	    name: msg.getName_asB64(),
	    address: msg.getAddress_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.AccountId}
	 */
	proto.protocol.AccountId.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.AccountId;
	  return proto.protocol.AccountId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.AccountId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.AccountId}
	 */
	proto.protocol.AccountId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setName(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountId.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.AccountId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.AccountId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.AccountId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes name = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AccountId.prototype.getName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes name = 1;
	 * This is a type-conversion wrapper around `getName()`
	 * @return {string}
	 */
	proto.protocol.AccountId.prototype.getName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getName()));
	};


	/**
	 * optional bytes name = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountId.prototype.getName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AccountId.prototype.setName = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AccountId.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes address = 2;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.AccountId.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountId.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AccountId.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Vote = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Vote, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Vote.displayName = 'proto.protocol.Vote';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Vote.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Vote.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Vote} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Vote.toObject = function(includeInstance, msg) {
	  var obj = {
	    voteAddress: msg.getVoteAddress_asB64(),
	    voteCount: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Vote}
	 */
	proto.protocol.Vote.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Vote;
	  return proto.protocol.Vote.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Vote} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Vote}
	 */
	proto.protocol.Vote.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setVoteAddress(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setVoteCount(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Vote.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Vote.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Vote} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Vote.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getVoteAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getVoteCount();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes vote_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Vote.prototype.getVoteAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes vote_address = 1;
	 * This is a type-conversion wrapper around `getVoteAddress()`
	 * @return {string}
	 */
	proto.protocol.Vote.prototype.getVoteAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getVoteAddress()));
	};


	/**
	 * optional bytes vote_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getVoteAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Vote.prototype.getVoteAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getVoteAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Vote.prototype.setVoteAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 vote_count = 2;
	 * @return {number}
	 */
	proto.protocol.Vote.prototype.getVoteCount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.Vote.prototype.setVoteCount = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Proposal = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Proposal.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Proposal, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Proposal.displayName = 'proto.protocol.Proposal';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Proposal.repeatedFields_ = [6];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Proposal.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Proposal.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Proposal} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Proposal.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    proposalId: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    proposerAddress: msg.getProposerAddress_asB64(),
	    parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : [],
	    expirationTime: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	    createTime: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
	    approvalsList: msg.getApprovalsList_asB64(),
	    state: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Proposal}
	 */
	proto.protocol.Proposal.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Proposal;
	  return proto.protocol.Proposal.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Proposal} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Proposal}
	 */
	proto.protocol.Proposal.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setProposalId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setProposerAddress(value);
	      break;
	    case 3:
	      var value = msg.getParametersMap();
	      reader.readMessage(value, function(message, reader) {
	        googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readInt64, googleProtobuf.BinaryReader.prototype.readInt64);
	         });
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExpirationTime(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setCreateTime(value);
	      break;
	    case 6:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addApprovals(value);
	      break;
	    case 7:
	      var value = /** @type {!proto.protocol.Proposal.State} */ (reader.readEnum());
	      msg.setState(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Proposal.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Proposal.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Proposal} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Proposal.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getProposalId();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getProposerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getParametersMap(true);
	  if (f && f.getLength() > 0) {
	    f.serializeBinary(3, writer, googleProtobuf.BinaryWriter.prototype.writeInt64, googleProtobuf.BinaryWriter.prototype.writeInt64);
	  }
	  f = message.getExpirationTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getCreateTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	  f = message.getApprovalsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      6,
	      f
	    );
	  }
	  f = message.getState();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      7,
	      f
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.Proposal.State = {
	  PENDING: 0,
	  DISAPPROVED: 1,
	  APPROVED: 2,
	  CANCELED: 3
	};

	/**
	 * optional int64 proposal_id = 1;
	 * @return {number}
	 */
	proto.protocol.Proposal.prototype.getProposalId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.Proposal.prototype.setProposalId = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes proposer_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Proposal.prototype.getProposerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes proposer_address = 2;
	 * This is a type-conversion wrapper around `getProposerAddress()`
	 * @return {string}
	 */
	proto.protocol.Proposal.prototype.getProposerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getProposerAddress()));
	};


	/**
	 * optional bytes proposer_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getProposerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Proposal.prototype.getProposerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getProposerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Proposal.prototype.setProposerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * map<int64, int64> parameters = 3;
	 * @param {boolean=} opt_noLazyCreate Do not create the map if
	 * empty, instead returning `undefined`
	 * @return {!jspb.Map<number,number>}
	 */
	proto.protocol.Proposal.prototype.getParametersMap = function(opt_noLazyCreate) {
	  return /** @type {!jspb.Map<number,number>} */ (
	      googleProtobuf.Message.getMapField(this, 3, opt_noLazyCreate,
	      null));
	};


	proto.protocol.Proposal.prototype.clearParametersMap = function() {
	  this.getParametersMap().clear();
	};


	/**
	 * optional int64 expiration_time = 4;
	 * @return {number}
	 */
	proto.protocol.Proposal.prototype.getExpirationTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.Proposal.prototype.setExpirationTime = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 create_time = 5;
	 * @return {number}
	 */
	proto.protocol.Proposal.prototype.getCreateTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.Proposal.prototype.setCreateTime = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * repeated bytes approvals = 6;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.protocol.Proposal.prototype.getApprovalsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (googleProtobuf.Message.getRepeatedField(this, 6));
	};


	/**
	 * repeated bytes approvals = 6;
	 * This is a type-conversion wrapper around `getApprovalsList()`
	 * @return {!Array.<string>}
	 */
	proto.protocol.Proposal.prototype.getApprovalsList_asB64 = function() {
	  return /** @type {!Array.<string>} */ (googleProtobuf.Message.bytesListAsB64(
	      this.getApprovalsList()));
	};


	/**
	 * repeated bytes approvals = 6;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApprovalsList()`
	 * @return {!Array.<!Uint8Array>}
	 */
	proto.protocol.Proposal.prototype.getApprovalsList_asU8 = function() {
	  return /** @type {!Array.<!Uint8Array>} */ (googleProtobuf.Message.bytesListAsU8(
	      this.getApprovalsList()));
	};


	/** @param {!(Array<!Uint8Array>|Array<string>)} value */
	proto.protocol.Proposal.prototype.setApprovalsList = function(value) {
	  googleProtobuf.Message.setField(this, 6, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 */
	proto.protocol.Proposal.prototype.addApprovals = function(value, opt_index) {
	  googleProtobuf.Message.addToRepeatedField(this, 6, value, opt_index);
	};


	proto.protocol.Proposal.prototype.clearApprovalsList = function() {
	  this.setApprovalsList([]);
	};


	/**
	 * optional State state = 7;
	 * @return {!proto.protocol.Proposal.State}
	 */
	proto.protocol.Proposal.prototype.getState = function() {
	  return /** @type {!proto.protocol.Proposal.State} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {!proto.protocol.Proposal.State} value */
	proto.protocol.Proposal.prototype.setState = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Exchange = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Exchange, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Exchange.displayName = 'proto.protocol.Exchange';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Exchange.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Exchange.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Exchange} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Exchange.toObject = function(includeInstance, msg) {
	  var obj = {
	    exchangeId: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    creatorAddress: msg.getCreatorAddress_asB64(),
	    createTime: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    firstTokenId: msg.getFirstTokenId_asB64(),
	    firstTokenBalance: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
	    secondTokenId: msg.getSecondTokenId_asB64(),
	    secondTokenBalance: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Exchange}
	 */
	proto.protocol.Exchange.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Exchange;
	  return proto.protocol.Exchange.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Exchange} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Exchange}
	 */
	proto.protocol.Exchange.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExchangeId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setCreatorAddress(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setCreateTime(value);
	      break;
	    case 6:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setFirstTokenId(value);
	      break;
	    case 7:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setFirstTokenBalance(value);
	      break;
	    case 8:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSecondTokenId(value);
	      break;
	    case 9:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setSecondTokenBalance(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Exchange.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Exchange.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Exchange} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Exchange.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getExchangeId();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getCreatorAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getCreateTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getFirstTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      6,
	      f
	    );
	  }
	  f = message.getFirstTokenBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	      7,
	      f
	    );
	  }
	  f = message.getSecondTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      8,
	      f
	    );
	  }
	  f = message.getSecondTokenBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	      9,
	      f
	    );
	  }
	};


	/**
	 * optional int64 exchange_id = 1;
	 * @return {number}
	 */
	proto.protocol.Exchange.prototype.getExchangeId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.Exchange.prototype.setExchangeId = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes creator_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Exchange.prototype.getCreatorAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes creator_address = 2;
	 * This is a type-conversion wrapper around `getCreatorAddress()`
	 * @return {string}
	 */
	proto.protocol.Exchange.prototype.getCreatorAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getCreatorAddress()));
	};


	/**
	 * optional bytes creator_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getCreatorAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Exchange.prototype.getCreatorAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getCreatorAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Exchange.prototype.setCreatorAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 create_time = 3;
	 * @return {number}
	 */
	proto.protocol.Exchange.prototype.getCreateTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.Exchange.prototype.setCreateTime = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bytes first_token_id = 6;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Exchange.prototype.getFirstTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * optional bytes first_token_id = 6;
	 * This is a type-conversion wrapper around `getFirstTokenId()`
	 * @return {string}
	 */
	proto.protocol.Exchange.prototype.getFirstTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getFirstTokenId()));
	};


	/**
	 * optional bytes first_token_id = 6;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getFirstTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Exchange.prototype.getFirstTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getFirstTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Exchange.prototype.setFirstTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional int64 first_token_balance = 7;
	 * @return {number}
	 */
	proto.protocol.Exchange.prototype.getFirstTokenBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {number} value */
	proto.protocol.Exchange.prototype.setFirstTokenBalance = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};


	/**
	 * optional bytes second_token_id = 8;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Exchange.prototype.getSecondTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, ""));
	};


	/**
	 * optional bytes second_token_id = 8;
	 * This is a type-conversion wrapper around `getSecondTokenId()`
	 * @return {string}
	 */
	proto.protocol.Exchange.prototype.getSecondTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getSecondTokenId()));
	};


	/**
	 * optional bytes second_token_id = 8;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSecondTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Exchange.prototype.getSecondTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getSecondTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Exchange.prototype.setSecondTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * optional int64 second_token_balance = 9;
	 * @return {number}
	 */
	proto.protocol.Exchange.prototype.getSecondTokenBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 9, 0));
	};


	/** @param {number} value */
	proto.protocol.Exchange.prototype.setSecondTokenBalance = function(value) {
	  googleProtobuf.Message.setField(this, 9, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ChainParameters = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.ChainParameters.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.ChainParameters, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ChainParameters.displayName = 'proto.protocol.ChainParameters';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.ChainParameters.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.ChainParameters.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.ChainParameters.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.ChainParameters} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainParameters.toObject = function(includeInstance, msg) {
	  var obj = {
	    chainparameterList: googleProtobuf.Message.toObjectList(msg.getChainparameterList(),
	    proto.protocol.ChainParameters.ChainParameter.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ChainParameters}
	 */
	proto.protocol.ChainParameters.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ChainParameters;
	  return proto.protocol.ChainParameters.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ChainParameters} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ChainParameters}
	 */
	proto.protocol.ChainParameters.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.ChainParameters.ChainParameter;
	      reader.readMessage(value,proto.protocol.ChainParameters.ChainParameter.deserializeBinaryFromReader);
	      msg.addChainparameter(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ChainParameters.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ChainParameters.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ChainParameters} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainParameters.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getChainparameterList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.ChainParameters.ChainParameter.serializeBinaryToWriter
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ChainParameters.ChainParameter = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ChainParameters.ChainParameter, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ChainParameters.ChainParameter.displayName = 'proto.protocol.ChainParameters.ChainParameter';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.ChainParameters.ChainParameter.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.ChainParameters.ChainParameter.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.ChainParameters.ChainParameter} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainParameters.ChainParameter.toObject = function(includeInstance, msg) {
	  var obj = {
	    key: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
	    value: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ChainParameters.ChainParameter}
	 */
	proto.protocol.ChainParameters.ChainParameter.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ChainParameters.ChainParameter;
	  return proto.protocol.ChainParameters.ChainParameter.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ChainParameters.ChainParameter} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ChainParameters.ChainParameter}
	 */
	proto.protocol.ChainParameters.ChainParameter.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setKey(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setValue(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ChainParameters.ChainParameter.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ChainParameters.ChainParameter.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ChainParameters.ChainParameter} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainParameters.ChainParameter.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getKey();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getValue();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string key = 1;
	 * @return {string}
	 */
	proto.protocol.ChainParameters.ChainParameter.prototype.getKey = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/** @param {string} value */
	proto.protocol.ChainParameters.ChainParameter.prototype.setKey = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 value = 2;
	 * @return {number}
	 */
	proto.protocol.ChainParameters.ChainParameter.prototype.getValue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ChainParameters.ChainParameter.prototype.setValue = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * repeated ChainParameter chainParameter = 1;
	 * @return {!Array.<!proto.protocol.ChainParameters.ChainParameter>}
	 */
	proto.protocol.ChainParameters.prototype.getChainparameterList = function() {
	  return /** @type{!Array.<!proto.protocol.ChainParameters.ChainParameter>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.ChainParameters.ChainParameter, 1));
	};


	/** @param {!Array.<!proto.protocol.ChainParameters.ChainParameter>} value */
	proto.protocol.ChainParameters.prototype.setChainparameterList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.ChainParameters.ChainParameter=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.ChainParameters.ChainParameter}
	 */
	proto.protocol.ChainParameters.prototype.addChainparameter = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.ChainParameters.ChainParameter, opt_index);
	};


	proto.protocol.ChainParameters.prototype.clearChainparameterList = function() {
	  this.setChainparameterList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Account = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Account.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Account, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Account.displayName = 'proto.protocol.Account';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Account.repeatedFields_ = [5,7,16,31];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Account.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Account.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Account} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Account.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    accountName: msg.getAccountName_asB64(),
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    address: msg.getAddress_asB64(),
	    balance: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	    votesList: googleProtobuf.Message.toObjectList(msg.getVotesList(),
	    proto.protocol.Vote.toObject, includeInstance),
	    assetMap: (f = msg.getAssetMap()) ? f.toObject(includeInstance, undefined) : [],
	    frozenList: googleProtobuf.Message.toObjectList(msg.getFrozenList(),
	    proto.protocol.Account.Frozen.toObject, includeInstance),
	    netUsage: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
	    createTime: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0),
	    latestOprationTime: googleProtobuf.Message.getFieldWithDefault(msg, 10, 0),
	    allowance: googleProtobuf.Message.getFieldWithDefault(msg, 11, 0),
	    latestWithdrawTime: googleProtobuf.Message.getFieldWithDefault(msg, 12, 0),
	    code: msg.getCode_asB64(),
	    isWitness: googleProtobuf.Message.getFieldWithDefault(msg, 14, false),
	    isCommittee: googleProtobuf.Message.getFieldWithDefault(msg, 15, false),
	    frozenSupplyList: googleProtobuf.Message.toObjectList(msg.getFrozenSupplyList(),
	    proto.protocol.Account.Frozen.toObject, includeInstance),
	    assetIssuedName: msg.getAssetIssuedName_asB64(),
	    latestAssetOperationTimeMap: (f = msg.getLatestAssetOperationTimeMap()) ? f.toObject(includeInstance, undefined) : [],
	    freeNetUsage: googleProtobuf.Message.getFieldWithDefault(msg, 19, 0),
	    freeAssetNetUsageMap: (f = msg.getFreeAssetNetUsageMap()) ? f.toObject(includeInstance, undefined) : [],
	    latestConsumeTime: googleProtobuf.Message.getFieldWithDefault(msg, 21, 0),
	    latestConsumeFreeTime: googleProtobuf.Message.getFieldWithDefault(msg, 22, 0),
	    accountId: msg.getAccountId_asB64(),
	    accountResource: (f = msg.getAccountResource()) && proto.protocol.Account.AccountResource.toObject(includeInstance, f),
	    codehash: msg.getCodehash_asB64(),
	    permissionsList: googleProtobuf.Message.toObjectList(msg.getPermissionsList(),
	    proto.protocol.Permission.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Account}
	 */
	proto.protocol.Account.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Account;
	  return proto.protocol.Account.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Account} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Account}
	 */
	proto.protocol.Account.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccountName(value);
	      break;
	    case 2:
	      var value = /** @type {!proto.protocol.AccountType} */ (reader.readEnum());
	      msg.setType(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBalance(value);
	      break;
	    case 5:
	      var value = new proto.protocol.Vote;
	      reader.readMessage(value,proto.protocol.Vote.deserializeBinaryFromReader);
	      msg.addVotes(value);
	      break;
	    case 6:
	      var value = msg.getAssetMap();
	      reader.readMessage(value, function(message, reader) {
	        googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readString, googleProtobuf.BinaryReader.prototype.readInt64);
	         });
	      break;
	    case 7:
	      var value = new proto.protocol.Account.Frozen;
	      reader.readMessage(value,proto.protocol.Account.Frozen.deserializeBinaryFromReader);
	      msg.addFrozen(value);
	      break;
	    case 8:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNetUsage(value);
	      break;
	    case 9:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setCreateTime(value);
	      break;
	    case 10:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestOprationTime(value);
	      break;
	    case 11:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setAllowance(value);
	      break;
	    case 12:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestWithdrawTime(value);
	      break;
	    case 13:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setCode(value);
	      break;
	    case 14:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIsWitness(value);
	      break;
	    case 15:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIsCommittee(value);
	      break;
	    case 16:
	      var value = new proto.protocol.Account.Frozen;
	      reader.readMessage(value,proto.protocol.Account.Frozen.deserializeBinaryFromReader);
	      msg.addFrozenSupply(value);
	      break;
	    case 17:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAssetIssuedName(value);
	      break;
	    case 18:
	      var value = msg.getLatestAssetOperationTimeMap();
	      reader.readMessage(value, function(message, reader) {
	        googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readString, googleProtobuf.BinaryReader.prototype.readInt64);
	         });
	      break;
	    case 19:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setFreeNetUsage(value);
	      break;
	    case 20:
	      var value = msg.getFreeAssetNetUsageMap();
	      reader.readMessage(value, function(message, reader) {
	        googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readString, googleProtobuf.BinaryReader.prototype.readInt64);
	         });
	      break;
	    case 21:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestConsumeTime(value);
	      break;
	    case 22:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestConsumeFreeTime(value);
	      break;
	    case 23:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccountId(value);
	      break;
	    case 26:
	      var value = new proto.protocol.Account.AccountResource;
	      reader.readMessage(value,proto.protocol.Account.AccountResource.deserializeBinaryFromReader);
	      msg.setAccountResource(value);
	      break;
	    case 30:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setCodehash(value);
	      break;
	    case 31:
	      var value = new proto.protocol.Permission;
	      reader.readMessage(value,proto.protocol.Permission.deserializeBinaryFromReader);
	      msg.addPermissions(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Account.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Account} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Account.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccountName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      2,
	      f
	    );
	  }
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getVotesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      5,
	      f,
	      proto.protocol.Vote.serializeBinaryToWriter
	    );
	  }
	  f = message.getAssetMap(true);
	  if (f && f.getLength() > 0) {
	    f.serializeBinary(6, writer, googleProtobuf.BinaryWriter.prototype.writeString, googleProtobuf.BinaryWriter.prototype.writeInt64);
	  }
	  f = message.getFrozenList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      7,
	      f,
	      proto.protocol.Account.Frozen.serializeBinaryToWriter
	    );
	  }
	  f = message.getNetUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      8,
	      f
	    );
	  }
	  f = message.getCreateTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      9,
	      f
	    );
	  }
	  f = message.getLatestOprationTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      10,
	      f
	    );
	  }
	  f = message.getAllowance();
	  if (f !== 0) {
	    writer.writeInt64(
	      11,
	      f
	    );
	  }
	  f = message.getLatestWithdrawTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      12,
	      f
	    );
	  }
	  f = message.getCode_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      13,
	      f
	    );
	  }
	  f = message.getIsWitness();
	  if (f) {
	    writer.writeBool(
	      14,
	      f
	    );
	  }
	  f = message.getIsCommittee();
	  if (f) {
	    writer.writeBool(
	      15,
	      f
	    );
	  }
	  f = message.getFrozenSupplyList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      16,
	      f,
	      proto.protocol.Account.Frozen.serializeBinaryToWriter
	    );
	  }
	  f = message.getAssetIssuedName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      17,
	      f
	    );
	  }
	  f = message.getLatestAssetOperationTimeMap(true);
	  if (f && f.getLength() > 0) {
	    f.serializeBinary(18, writer, googleProtobuf.BinaryWriter.prototype.writeString, googleProtobuf.BinaryWriter.prototype.writeInt64);
	  }
	  f = message.getFreeNetUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      19,
	      f
	    );
	  }
	  f = message.getFreeAssetNetUsageMap(true);
	  if (f && f.getLength() > 0) {
	    f.serializeBinary(20, writer, googleProtobuf.BinaryWriter.prototype.writeString, googleProtobuf.BinaryWriter.prototype.writeInt64);
	  }
	  f = message.getLatestConsumeTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      21,
	      f
	    );
	  }
	  f = message.getLatestConsumeFreeTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      22,
	      f
	    );
	  }
	  f = message.getAccountId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      23,
	      f
	    );
	  }
	  f = message.getAccountResource();
	  if (f != null) {
	    writer.writeMessage(
	      26,
	      f,
	      proto.protocol.Account.AccountResource.serializeBinaryToWriter
	    );
	  }
	  f = message.getCodehash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      30,
	      f
	    );
	  }
	  f = message.getPermissionsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      31,
	      f,
	      proto.protocol.Permission.serializeBinaryToWriter
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Account.Frozen = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Account.Frozen, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Account.Frozen.displayName = 'proto.protocol.Account.Frozen';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Account.Frozen.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Account.Frozen.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Account.Frozen} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Account.Frozen.toObject = function(includeInstance, msg) {
	  var obj = {
	    frozenBalance: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    expireTime: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Account.Frozen}
	 */
	proto.protocol.Account.Frozen.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Account.Frozen;
	  return proto.protocol.Account.Frozen.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Account.Frozen} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Account.Frozen}
	 */
	proto.protocol.Account.Frozen.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setFrozenBalance(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExpireTime(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.Frozen.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Account.Frozen.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Account.Frozen} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Account.Frozen.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrozenBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getExpireTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional int64 frozen_balance = 1;
	 * @return {number}
	 */
	proto.protocol.Account.Frozen.prototype.getFrozenBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.Frozen.prototype.setFrozenBalance = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 expire_time = 2;
	 * @return {number}
	 */
	proto.protocol.Account.Frozen.prototype.getExpireTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.Frozen.prototype.setExpireTime = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Account.AccountResource = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Account.AccountResource, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Account.AccountResource.displayName = 'proto.protocol.Account.AccountResource';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Account.AccountResource.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Account.AccountResource.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Account.AccountResource} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Account.AccountResource.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    energyUsage: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    frozenBalanceForEnergy: (f = msg.getFrozenBalanceForEnergy()) && proto.protocol.Account.Frozen.toObject(includeInstance, f),
	    latestConsumeTimeForEnergy: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    storageLimit: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
	    storageUsage: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
	    latestExchangeStorageTime: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Account.AccountResource}
	 */
	proto.protocol.Account.AccountResource.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Account.AccountResource;
	  return proto.protocol.Account.AccountResource.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Account.AccountResource} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Account.AccountResource}
	 */
	proto.protocol.Account.AccountResource.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnergyUsage(value);
	      break;
	    case 2:
	      var value = new proto.protocol.Account.Frozen;
	      reader.readMessage(value,proto.protocol.Account.Frozen.deserializeBinaryFromReader);
	      msg.setFrozenBalanceForEnergy(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestConsumeTimeForEnergy(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setStorageLimit(value);
	      break;
	    case 7:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setStorageUsage(value);
	      break;
	    case 8:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestExchangeStorageTime(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.AccountResource.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Account.AccountResource.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Account.AccountResource} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Account.AccountResource.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getEnergyUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getFrozenBalanceForEnergy();
	  if (f != null) {
	    writer.writeMessage(
	      2,
	      f,
	      proto.protocol.Account.Frozen.serializeBinaryToWriter
	    );
	  }
	  f = message.getLatestConsumeTimeForEnergy();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getStorageLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	      6,
	      f
	    );
	  }
	  f = message.getStorageUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      7,
	      f
	    );
	  }
	  f = message.getLatestExchangeStorageTime();
	  if (f !== 0) {
	    writer.writeInt64(
	      8,
	      f
	    );
	  }
	};


	/**
	 * optional int64 energy_usage = 1;
	 * @return {number}
	 */
	proto.protocol.Account.AccountResource.prototype.getEnergyUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.AccountResource.prototype.setEnergyUsage = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional Frozen frozen_balance_for_energy = 2;
	 * @return {?proto.protocol.Account.Frozen}
	 */
	proto.protocol.Account.AccountResource.prototype.getFrozenBalanceForEnergy = function() {
	  return /** @type{?proto.protocol.Account.Frozen} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Account.Frozen, 2));
	};


	/** @param {?proto.protocol.Account.Frozen|undefined} value */
	proto.protocol.Account.AccountResource.prototype.setFrozenBalanceForEnergy = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 2, value);
	};


	proto.protocol.Account.AccountResource.prototype.clearFrozenBalanceForEnergy = function() {
	  this.setFrozenBalanceForEnergy(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.Account.AccountResource.prototype.hasFrozenBalanceForEnergy = function() {
	  return googleProtobuf.Message.getField(this, 2) != null;
	};


	/**
	 * optional int64 latest_consume_time_for_energy = 3;
	 * @return {number}
	 */
	proto.protocol.Account.AccountResource.prototype.getLatestConsumeTimeForEnergy = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.AccountResource.prototype.setLatestConsumeTimeForEnergy = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 storage_limit = 6;
	 * @return {number}
	 */
	proto.protocol.Account.AccountResource.prototype.getStorageLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.AccountResource.prototype.setStorageLimit = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional int64 storage_usage = 7;
	 * @return {number}
	 */
	proto.protocol.Account.AccountResource.prototype.getStorageUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.AccountResource.prototype.setStorageUsage = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};


	/**
	 * optional int64 latest_exchange_storage_time = 8;
	 * @return {number}
	 */
	proto.protocol.Account.AccountResource.prototype.getLatestExchangeStorageTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.AccountResource.prototype.setLatestExchangeStorageTime = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * optional bytes account_name = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Account.prototype.getAccountName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes account_name = 1;
	 * This is a type-conversion wrapper around `getAccountName()`
	 * @return {string}
	 */
	proto.protocol.Account.prototype.getAccountName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAccountName()));
	};


	/**
	 * optional bytes account_name = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccountName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.getAccountName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAccountName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Account.prototype.setAccountName = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional AccountType type = 2;
	 * @return {!proto.protocol.AccountType}
	 */
	proto.protocol.Account.prototype.getType = function() {
	  return /** @type {!proto.protocol.AccountType} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {!proto.protocol.AccountType} value */
	proto.protocol.Account.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes address = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Account.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes address = 3;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.Account.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Account.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 balance = 4;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setBalance = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * repeated Vote votes = 5;
	 * @return {!Array.<!proto.protocol.Vote>}
	 */
	proto.protocol.Account.prototype.getVotesList = function() {
	  return /** @type{!Array.<!proto.protocol.Vote>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Vote, 5));
	};


	/** @param {!Array.<!proto.protocol.Vote>} value */
	proto.protocol.Account.prototype.setVotesList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.protocol.Vote=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Vote}
	 */
	proto.protocol.Account.prototype.addVotes = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.protocol.Vote, opt_index);
	};


	proto.protocol.Account.prototype.clearVotesList = function() {
	  this.setVotesList([]);
	};


	/**
	 * map<string, int64> asset = 6;
	 * @param {boolean=} opt_noLazyCreate Do not create the map if
	 * empty, instead returning `undefined`
	 * @return {!jspb.Map<string,number>}
	 */
	proto.protocol.Account.prototype.getAssetMap = function(opt_noLazyCreate) {
	  return /** @type {!jspb.Map<string,number>} */ (
	      googleProtobuf.Message.getMapField(this, 6, opt_noLazyCreate,
	      null));
	};


	proto.protocol.Account.prototype.clearAssetMap = function() {
	  this.getAssetMap().clear();
	};


	/**
	 * repeated Frozen frozen = 7;
	 * @return {!Array.<!proto.protocol.Account.Frozen>}
	 */
	proto.protocol.Account.prototype.getFrozenList = function() {
	  return /** @type{!Array.<!proto.protocol.Account.Frozen>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Account.Frozen, 7));
	};


	/** @param {!Array.<!proto.protocol.Account.Frozen>} value */
	proto.protocol.Account.prototype.setFrozenList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 7, value);
	};


	/**
	 * @param {!proto.protocol.Account.Frozen=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Account.Frozen}
	 */
	proto.protocol.Account.prototype.addFrozen = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.protocol.Account.Frozen, opt_index);
	};


	proto.protocol.Account.prototype.clearFrozenList = function() {
	  this.setFrozenList([]);
	};


	/**
	 * optional int64 net_usage = 8;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getNetUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setNetUsage = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * optional int64 create_time = 9;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getCreateTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 9, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setCreateTime = function(value) {
	  googleProtobuf.Message.setField(this, 9, value);
	};


	/**
	 * optional int64 latest_opration_time = 10;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getLatestOprationTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setLatestOprationTime = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * optional int64 allowance = 11;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getAllowance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 11, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setAllowance = function(value) {
	  googleProtobuf.Message.setField(this, 11, value);
	};


	/**
	 * optional int64 latest_withdraw_time = 12;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getLatestWithdrawTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 12, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setLatestWithdrawTime = function(value) {
	  googleProtobuf.Message.setField(this, 12, value);
	};


	/**
	 * optional bytes code = 13;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Account.prototype.getCode = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 13, ""));
	};


	/**
	 * optional bytes code = 13;
	 * This is a type-conversion wrapper around `getCode()`
	 * @return {string}
	 */
	proto.protocol.Account.prototype.getCode_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getCode()));
	};


	/**
	 * optional bytes code = 13;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getCode()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.getCode_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getCode()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Account.prototype.setCode = function(value) {
	  googleProtobuf.Message.setField(this, 13, value);
	};


	/**
	 * optional bool is_witness = 14;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.Account.prototype.getIsWitness = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 14, false));
	};


	/** @param {boolean} value */
	proto.protocol.Account.prototype.setIsWitness = function(value) {
	  googleProtobuf.Message.setField(this, 14, value);
	};


	/**
	 * optional bool is_committee = 15;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.Account.prototype.getIsCommittee = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 15, false));
	};


	/** @param {boolean} value */
	proto.protocol.Account.prototype.setIsCommittee = function(value) {
	  googleProtobuf.Message.setField(this, 15, value);
	};


	/**
	 * repeated Frozen frozen_supply = 16;
	 * @return {!Array.<!proto.protocol.Account.Frozen>}
	 */
	proto.protocol.Account.prototype.getFrozenSupplyList = function() {
	  return /** @type{!Array.<!proto.protocol.Account.Frozen>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Account.Frozen, 16));
	};


	/** @param {!Array.<!proto.protocol.Account.Frozen>} value */
	proto.protocol.Account.prototype.setFrozenSupplyList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 16, value);
	};


	/**
	 * @param {!proto.protocol.Account.Frozen=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Account.Frozen}
	 */
	proto.protocol.Account.prototype.addFrozenSupply = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.protocol.Account.Frozen, opt_index);
	};


	proto.protocol.Account.prototype.clearFrozenSupplyList = function() {
	  this.setFrozenSupplyList([]);
	};


	/**
	 * optional bytes asset_issued_name = 17;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Account.prototype.getAssetIssuedName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 17, ""));
	};


	/**
	 * optional bytes asset_issued_name = 17;
	 * This is a type-conversion wrapper around `getAssetIssuedName()`
	 * @return {string}
	 */
	proto.protocol.Account.prototype.getAssetIssuedName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAssetIssuedName()));
	};


	/**
	 * optional bytes asset_issued_name = 17;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAssetIssuedName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.getAssetIssuedName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAssetIssuedName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Account.prototype.setAssetIssuedName = function(value) {
	  googleProtobuf.Message.setField(this, 17, value);
	};


	/**
	 * map<string, int64> latest_asset_operation_time = 18;
	 * @param {boolean=} opt_noLazyCreate Do not create the map if
	 * empty, instead returning `undefined`
	 * @return {!jspb.Map<string,number>}
	 */
	proto.protocol.Account.prototype.getLatestAssetOperationTimeMap = function(opt_noLazyCreate) {
	  return /** @type {!jspb.Map<string,number>} */ (
	      googleProtobuf.Message.getMapField(this, 18, opt_noLazyCreate,
	      null));
	};


	proto.protocol.Account.prototype.clearLatestAssetOperationTimeMap = function() {
	  this.getLatestAssetOperationTimeMap().clear();
	};


	/**
	 * optional int64 free_net_usage = 19;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getFreeNetUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 19, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setFreeNetUsage = function(value) {
	  googleProtobuf.Message.setField(this, 19, value);
	};


	/**
	 * map<string, int64> free_asset_net_usage = 20;
	 * @param {boolean=} opt_noLazyCreate Do not create the map if
	 * empty, instead returning `undefined`
	 * @return {!jspb.Map<string,number>}
	 */
	proto.protocol.Account.prototype.getFreeAssetNetUsageMap = function(opt_noLazyCreate) {
	  return /** @type {!jspb.Map<string,number>} */ (
	      googleProtobuf.Message.getMapField(this, 20, opt_noLazyCreate,
	      null));
	};


	proto.protocol.Account.prototype.clearFreeAssetNetUsageMap = function() {
	  this.getFreeAssetNetUsageMap().clear();
	};


	/**
	 * optional int64 latest_consume_time = 21;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getLatestConsumeTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 21, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setLatestConsumeTime = function(value) {
	  googleProtobuf.Message.setField(this, 21, value);
	};


	/**
	 * optional int64 latest_consume_free_time = 22;
	 * @return {number}
	 */
	proto.protocol.Account.prototype.getLatestConsumeFreeTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 22, 0));
	};


	/** @param {number} value */
	proto.protocol.Account.prototype.setLatestConsumeFreeTime = function(value) {
	  googleProtobuf.Message.setField(this, 22, value);
	};


	/**
	 * optional bytes account_id = 23;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Account.prototype.getAccountId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 23, ""));
	};


	/**
	 * optional bytes account_id = 23;
	 * This is a type-conversion wrapper around `getAccountId()`
	 * @return {string}
	 */
	proto.protocol.Account.prototype.getAccountId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAccountId()));
	};


	/**
	 * optional bytes account_id = 23;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccountId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.getAccountId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAccountId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Account.prototype.setAccountId = function(value) {
	  googleProtobuf.Message.setField(this, 23, value);
	};


	/**
	 * optional AccountResource account_resource = 26;
	 * @return {?proto.protocol.Account.AccountResource}
	 */
	proto.protocol.Account.prototype.getAccountResource = function() {
	  return /** @type{?proto.protocol.Account.AccountResource} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Account.AccountResource, 26));
	};


	/** @param {?proto.protocol.Account.AccountResource|undefined} value */
	proto.protocol.Account.prototype.setAccountResource = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 26, value);
	};


	proto.protocol.Account.prototype.clearAccountResource = function() {
	  this.setAccountResource(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.Account.prototype.hasAccountResource = function() {
	  return googleProtobuf.Message.getField(this, 26) != null;
	};


	/**
	 * optional bytes codeHash = 30;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Account.prototype.getCodehash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 30, ""));
	};


	/**
	 * optional bytes codeHash = 30;
	 * This is a type-conversion wrapper around `getCodehash()`
	 * @return {string}
	 */
	proto.protocol.Account.prototype.getCodehash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getCodehash()));
	};


	/**
	 * optional bytes codeHash = 30;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getCodehash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Account.prototype.getCodehash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getCodehash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Account.prototype.setCodehash = function(value) {
	  googleProtobuf.Message.setField(this, 30, value);
	};


	/**
	 * repeated Permission permissions = 31;
	 * @return {!Array.<!proto.protocol.Permission>}
	 */
	proto.protocol.Account.prototype.getPermissionsList = function() {
	  return /** @type{!Array.<!proto.protocol.Permission>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Permission, 31));
	};


	/** @param {!Array.<!proto.protocol.Permission>} value */
	proto.protocol.Account.prototype.setPermissionsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 31, value);
	};


	/**
	 * @param {!proto.protocol.Permission=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Permission}
	 */
	proto.protocol.Account.prototype.addPermissions = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.protocol.Permission, opt_index);
	};


	proto.protocol.Account.prototype.clearPermissionsList = function() {
	  this.setPermissionsList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Key = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Key, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Key.displayName = 'proto.protocol.Key';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Key.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Key.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Key} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Key.toObject = function(includeInstance, msg) {
	  var obj = {
	    address: msg.getAddress_asB64(),
	    weight: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Key}
	 */
	proto.protocol.Key.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Key;
	  return proto.protocol.Key.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Key} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Key}
	 */
	proto.protocol.Key.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setWeight(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Key.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Key.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Key} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Key.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getWeight();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Key.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes address = 1;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.Key.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Key.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Key.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 weight = 2;
	 * @return {number}
	 */
	proto.protocol.Key.prototype.getWeight = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.Key.prototype.setWeight = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Permission = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Permission.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Permission, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Permission.displayName = 'proto.protocol.Permission';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Permission.repeatedFields_ = [4];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Permission.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Permission.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Permission} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Permission.toObject = function(includeInstance, msg) {
	  var obj = {
	    name: googleProtobuf.Message.getFieldWithDefault(msg, 1, ""),
	    threshold: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    parent: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
	    keysList: googleProtobuf.Message.toObjectList(msg.getKeysList(),
	    proto.protocol.Key.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Permission}
	 */
	proto.protocol.Permission.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Permission;
	  return proto.protocol.Permission.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Permission} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Permission}
	 */
	proto.protocol.Permission.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setThreshold(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setParent(value);
	      break;
	    case 4:
	      var value = new proto.protocol.Key;
	      reader.readMessage(value,proto.protocol.Key.deserializeBinaryFromReader);
	      msg.addKeys(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Permission.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Permission.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Permission} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Permission.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getThreshold();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getParent();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getKeysList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      4,
	      f,
	      proto.protocol.Key.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.protocol.Permission.prototype.getName = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/** @param {string} value */
	proto.protocol.Permission.prototype.setName = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 threshold = 2;
	 * @return {number}
	 */
	proto.protocol.Permission.prototype.getThreshold = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.Permission.prototype.setThreshold = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional string parent = 3;
	 * @return {string}
	 */
	proto.protocol.Permission.prototype.getParent = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/** @param {string} value */
	proto.protocol.Permission.prototype.setParent = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * repeated Key keys = 4;
	 * @return {!Array.<!proto.protocol.Key>}
	 */
	proto.protocol.Permission.prototype.getKeysList = function() {
	  return /** @type{!Array.<!proto.protocol.Key>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Key, 4));
	};


	/** @param {!Array.<!proto.protocol.Key>} value */
	proto.protocol.Permission.prototype.setKeysList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 4, value);
	};


	/**
	 * @param {!proto.protocol.Key=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Key}
	 */
	proto.protocol.Permission.prototype.addKeys = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.Key, opt_index);
	};


	proto.protocol.Permission.prototype.clearKeysList = function() {
	  this.setKeysList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.authority = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.authority, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.authority.displayName = 'proto.protocol.authority';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.authority.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.authority.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.authority} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.authority.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    account: (f = msg.getAccount()) && proto.protocol.AccountId.toObject(includeInstance, f),
	    permissionName: msg.getPermissionName_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.authority}
	 */
	proto.protocol.authority.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.authority;
	  return proto.protocol.authority.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.authority} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.authority}
	 */
	proto.protocol.authority.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.AccountId;
	      reader.readMessage(value,proto.protocol.AccountId.deserializeBinaryFromReader);
	      msg.setAccount(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPermissionName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.authority.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.authority.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.authority} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.authority.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccount();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.AccountId.serializeBinaryToWriter
	    );
	  }
	  f = message.getPermissionName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional AccountId account = 1;
	 * @return {?proto.protocol.AccountId}
	 */
	proto.protocol.authority.prototype.getAccount = function() {
	  return /** @type{?proto.protocol.AccountId} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.AccountId, 1));
	};


	/** @param {?proto.protocol.AccountId|undefined} value */
	proto.protocol.authority.prototype.setAccount = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.authority.prototype.clearAccount = function() {
	  this.setAccount(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.authority.prototype.hasAccount = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes permission_name = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.authority.prototype.getPermissionName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes permission_name = 2;
	 * This is a type-conversion wrapper around `getPermissionName()`
	 * @return {string}
	 */
	proto.protocol.authority.prototype.getPermissionName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getPermissionName()));
	};


	/**
	 * optional bytes permission_name = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPermissionName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.authority.prototype.getPermissionName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getPermissionName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.authority.prototype.setPermissionName = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Witness = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Witness, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Witness.displayName = 'proto.protocol.Witness';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Witness.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Witness.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Witness} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Witness.toObject = function(includeInstance, msg) {
	  var obj = {
	    address: msg.getAddress_asB64(),
	    votecount: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    pubkey: msg.getPubkey_asB64(),
	    url: googleProtobuf.Message.getFieldWithDefault(msg, 4, ""),
	    totalproduced: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
	    totalmissed: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
	    latestblocknum: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
	    latestslotnum: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
	    isjobs: googleProtobuf.Message.getFieldWithDefault(msg, 9, false)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Witness}
	 */
	proto.protocol.Witness.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Witness;
	  return proto.protocol.Witness.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Witness} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Witness}
	 */
	proto.protocol.Witness.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setVotecount(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPubkey(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setUrl(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTotalproduced(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTotalmissed(value);
	      break;
	    case 7:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestblocknum(value);
	      break;
	    case 8:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLatestslotnum(value);
	      break;
	    case 9:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIsjobs(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Witness.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Witness.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Witness} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Witness.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getVotecount();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getPubkey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getUrl();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getTotalproduced();
	  if (f !== 0) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	  f = message.getTotalmissed();
	  if (f !== 0) {
	    writer.writeInt64(
	      6,
	      f
	    );
	  }
	  f = message.getLatestblocknum();
	  if (f !== 0) {
	    writer.writeInt64(
	      7,
	      f
	    );
	  }
	  f = message.getLatestslotnum();
	  if (f !== 0) {
	    writer.writeInt64(
	      8,
	      f
	    );
	  }
	  f = message.getIsjobs();
	  if (f) {
	    writer.writeBool(
	      9,
	      f
	    );
	  }
	};


	/**
	 * optional bytes address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Witness.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes address = 1;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.Witness.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Witness.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Witness.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 voteCount = 2;
	 * @return {number}
	 */
	proto.protocol.Witness.prototype.getVotecount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.Witness.prototype.setVotecount = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes pubKey = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Witness.prototype.getPubkey = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes pubKey = 3;
	 * This is a type-conversion wrapper around `getPubkey()`
	 * @return {string}
	 */
	proto.protocol.Witness.prototype.getPubkey_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getPubkey()));
	};


	/**
	 * optional bytes pubKey = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPubkey()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Witness.prototype.getPubkey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getPubkey()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Witness.prototype.setPubkey = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional string url = 4;
	 * @return {string}
	 */
	proto.protocol.Witness.prototype.getUrl = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/** @param {string} value */
	proto.protocol.Witness.prototype.setUrl = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 totalProduced = 5;
	 * @return {number}
	 */
	proto.protocol.Witness.prototype.getTotalproduced = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.Witness.prototype.setTotalproduced = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * optional int64 totalMissed = 6;
	 * @return {number}
	 */
	proto.protocol.Witness.prototype.getTotalmissed = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {number} value */
	proto.protocol.Witness.prototype.setTotalmissed = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional int64 latestBlockNum = 7;
	 * @return {number}
	 */
	proto.protocol.Witness.prototype.getLatestblocknum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {number} value */
	proto.protocol.Witness.prototype.setLatestblocknum = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};


	/**
	 * optional int64 latestSlotNum = 8;
	 * @return {number}
	 */
	proto.protocol.Witness.prototype.getLatestslotnum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {number} value */
	proto.protocol.Witness.prototype.setLatestslotnum = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * optional bool isJobs = 9;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.Witness.prototype.getIsjobs = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 9, false));
	};


	/** @param {boolean} value */
	proto.protocol.Witness.prototype.setIsjobs = function(value) {
	  googleProtobuf.Message.setField(this, 9, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Votes = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Votes.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Votes, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Votes.displayName = 'proto.protocol.Votes';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Votes.repeatedFields_ = [2,3];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Votes.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Votes.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Votes} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Votes.toObject = function(includeInstance, msg) {
	  var obj = {
	    address: msg.getAddress_asB64(),
	    oldVotesList: googleProtobuf.Message.toObjectList(msg.getOldVotesList(),
	    proto.protocol.Vote.toObject, includeInstance),
	    newVotesList: googleProtobuf.Message.toObjectList(msg.getNewVotesList(),
	    proto.protocol.Vote.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Votes}
	 */
	proto.protocol.Votes.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Votes;
	  return proto.protocol.Votes.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Votes} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Votes}
	 */
	proto.protocol.Votes.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    case 2:
	      var value = new proto.protocol.Vote;
	      reader.readMessage(value,proto.protocol.Vote.deserializeBinaryFromReader);
	      msg.addOldVotes(value);
	      break;
	    case 3:
	      var value = new proto.protocol.Vote;
	      reader.readMessage(value,proto.protocol.Vote.deserializeBinaryFromReader);
	      msg.addNewVotes(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Votes.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Votes.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Votes} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Votes.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getOldVotesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      2,
	      f,
	      proto.protocol.Vote.serializeBinaryToWriter
	    );
	  }
	  f = message.getNewVotesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      3,
	      f,
	      proto.protocol.Vote.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Votes.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes address = 1;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.Votes.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Votes.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Votes.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * repeated Vote old_votes = 2;
	 * @return {!Array.<!proto.protocol.Vote>}
	 */
	proto.protocol.Votes.prototype.getOldVotesList = function() {
	  return /** @type{!Array.<!proto.protocol.Vote>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Vote, 2));
	};


	/** @param {!Array.<!proto.protocol.Vote>} value */
	proto.protocol.Votes.prototype.setOldVotesList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
	};


	/**
	 * @param {!proto.protocol.Vote=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Vote}
	 */
	proto.protocol.Votes.prototype.addOldVotes = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Vote, opt_index);
	};


	proto.protocol.Votes.prototype.clearOldVotesList = function() {
	  this.setOldVotesList([]);
	};


	/**
	 * repeated Vote new_votes = 3;
	 * @return {!Array.<!proto.protocol.Vote>}
	 */
	proto.protocol.Votes.prototype.getNewVotesList = function() {
	  return /** @type{!Array.<!proto.protocol.Vote>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Vote, 3));
	};


	/** @param {!Array.<!proto.protocol.Vote>} value */
	proto.protocol.Votes.prototype.setNewVotesList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
	};


	/**
	 * @param {!proto.protocol.Vote=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Vote}
	 */
	proto.protocol.Votes.prototype.addNewVotes = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protocol.Vote, opt_index);
	};


	proto.protocol.Votes.prototype.clearNewVotesList = function() {
	  this.setNewVotesList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TXOutput = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TXOutput, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TXOutput.displayName = 'proto.protocol.TXOutput';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TXOutput.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TXOutput.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TXOutput} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXOutput.toObject = function(includeInstance, msg) {
	  var obj = {
	    value: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    pubkeyhash: msg.getPubkeyhash_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TXOutput}
	 */
	proto.protocol.TXOutput.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TXOutput;
	  return proto.protocol.TXOutput.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TXOutput} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TXOutput}
	 */
	proto.protocol.TXOutput.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setValue(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPubkeyhash(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXOutput.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TXOutput.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TXOutput} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXOutput.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getValue();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getPubkeyhash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional int64 value = 1;
	 * @return {number}
	 */
	proto.protocol.TXOutput.prototype.getValue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.TXOutput.prototype.setValue = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes pubKeyHash = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TXOutput.prototype.getPubkeyhash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes pubKeyHash = 2;
	 * This is a type-conversion wrapper around `getPubkeyhash()`
	 * @return {string}
	 */
	proto.protocol.TXOutput.prototype.getPubkeyhash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getPubkeyhash()));
	};


	/**
	 * optional bytes pubKeyHash = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPubkeyhash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXOutput.prototype.getPubkeyhash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getPubkeyhash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TXOutput.prototype.setPubkeyhash = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TXInput = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TXInput, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TXInput.displayName = 'proto.protocol.TXInput';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TXInput.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TXInput.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TXInput} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXInput.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    rawData: (f = msg.getRawData()) && proto.protocol.TXInput.raw.toObject(includeInstance, f),
	    signature: msg.getSignature_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TXInput}
	 */
	proto.protocol.TXInput.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TXInput;
	  return proto.protocol.TXInput.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TXInput} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TXInput}
	 */
	proto.protocol.TXInput.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.TXInput.raw;
	      reader.readMessage(value,proto.protocol.TXInput.raw.deserializeBinaryFromReader);
	      msg.setRawData(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setSignature(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXInput.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TXInput.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TXInput} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXInput.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getRawData();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.TXInput.raw.serializeBinaryToWriter
	    );
	  }
	  f = message.getSignature_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TXInput.raw = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TXInput.raw, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TXInput.raw.displayName = 'proto.protocol.TXInput.raw';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TXInput.raw.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TXInput.raw.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TXInput.raw} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXInput.raw.toObject = function(includeInstance, msg) {
	  var obj = {
	    txid: msg.getTxid_asB64(),
	    vout: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    pubkey: msg.getPubkey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TXInput.raw}
	 */
	proto.protocol.TXInput.raw.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TXInput.raw;
	  return proto.protocol.TXInput.raw.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TXInput.raw} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TXInput.raw}
	 */
	proto.protocol.TXInput.raw.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTxid(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setVout(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPubkey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXInput.raw.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TXInput.raw.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TXInput.raw} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXInput.raw.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTxid_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getVout();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getPubkey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes txID = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TXInput.raw.prototype.getTxid = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes txID = 1;
	 * This is a type-conversion wrapper around `getTxid()`
	 * @return {string}
	 */
	proto.protocol.TXInput.raw.prototype.getTxid_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTxid()));
	};


	/**
	 * optional bytes txID = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTxid()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXInput.raw.prototype.getTxid_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTxid()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TXInput.raw.prototype.setTxid = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 vout = 2;
	 * @return {number}
	 */
	proto.protocol.TXInput.raw.prototype.getVout = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.TXInput.raw.prototype.setVout = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes pubKey = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TXInput.raw.prototype.getPubkey = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes pubKey = 3;
	 * This is a type-conversion wrapper around `getPubkey()`
	 * @return {string}
	 */
	proto.protocol.TXInput.raw.prototype.getPubkey_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getPubkey()));
	};


	/**
	 * optional bytes pubKey = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPubkey()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXInput.raw.prototype.getPubkey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getPubkey()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TXInput.raw.prototype.setPubkey = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional raw raw_data = 1;
	 * @return {?proto.protocol.TXInput.raw}
	 */
	proto.protocol.TXInput.prototype.getRawData = function() {
	  return /** @type{?proto.protocol.TXInput.raw} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.TXInput.raw, 1));
	};


	/** @param {?proto.protocol.TXInput.raw|undefined} value */
	proto.protocol.TXInput.prototype.setRawData = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.TXInput.prototype.clearRawData = function() {
	  this.setRawData(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.TXInput.prototype.hasRawData = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes signature = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TXInput.prototype.getSignature = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes signature = 4;
	 * This is a type-conversion wrapper around `getSignature()`
	 * @return {string}
	 */
	proto.protocol.TXInput.prototype.getSignature_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getSignature()));
	};


	/**
	 * optional bytes signature = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSignature()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXInput.prototype.getSignature_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getSignature()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TXInput.prototype.setSignature = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TXOutputs = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.TXOutputs.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.TXOutputs, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TXOutputs.displayName = 'proto.protocol.TXOutputs';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.TXOutputs.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TXOutputs.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TXOutputs.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TXOutputs} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXOutputs.toObject = function(includeInstance, msg) {
	  var obj = {
	    outputsList: googleProtobuf.Message.toObjectList(msg.getOutputsList(),
	    proto.protocol.TXOutput.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TXOutputs}
	 */
	proto.protocol.TXOutputs.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TXOutputs;
	  return proto.protocol.TXOutputs.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TXOutputs} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TXOutputs}
	 */
	proto.protocol.TXOutputs.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.TXOutput;
	      reader.readMessage(value,proto.protocol.TXOutput.deserializeBinaryFromReader);
	      msg.addOutputs(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TXOutputs.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TXOutputs.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TXOutputs} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TXOutputs.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOutputsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.TXOutput.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated TXOutput outputs = 1;
	 * @return {!Array.<!proto.protocol.TXOutput>}
	 */
	proto.protocol.TXOutputs.prototype.getOutputsList = function() {
	  return /** @type{!Array.<!proto.protocol.TXOutput>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.TXOutput, 1));
	};


	/** @param {!Array.<!proto.protocol.TXOutput>} value */
	proto.protocol.TXOutputs.prototype.setOutputsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.TXOutput=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.TXOutput}
	 */
	proto.protocol.TXOutputs.prototype.addOutputs = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.TXOutput, opt_index);
	};


	proto.protocol.TXOutputs.prototype.clearOutputsList = function() {
	  this.setOutputsList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ResourceReceipt = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ResourceReceipt, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ResourceReceipt.displayName = 'proto.protocol.ResourceReceipt';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.ResourceReceipt.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.ResourceReceipt.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.ResourceReceipt} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ResourceReceipt.toObject = function(includeInstance, msg) {
	  var obj = {
	    energyUsage: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    energyFee: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    originEnergyUsage: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    energyUsageTotal: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	    netUsage: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
	    netFee: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
	    result: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ResourceReceipt}
	 */
	proto.protocol.ResourceReceipt.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ResourceReceipt;
	  return proto.protocol.ResourceReceipt.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ResourceReceipt} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ResourceReceipt}
	 */
	proto.protocol.ResourceReceipt.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnergyUsage(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnergyFee(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setOriginEnergyUsage(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setEnergyUsageTotal(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNetUsage(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNetFee(value);
	      break;
	    case 7:
	      var value = /** @type {!proto.protocol.Transaction.Result.contractResult} */ (reader.readEnum());
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ResourceReceipt.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ResourceReceipt.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ResourceReceipt} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ResourceReceipt.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getEnergyUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getEnergyFee();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getOriginEnergyUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getEnergyUsageTotal();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getNetUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	  f = message.getNetFee();
	  if (f !== 0) {
	    writer.writeInt64(
	      6,
	      f
	    );
	  }
	  f = message.getResult();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional int64 energy_usage = 1;
	 * @return {number}
	 */
	proto.protocol.ResourceReceipt.prototype.getEnergyUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.ResourceReceipt.prototype.setEnergyUsage = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 energy_fee = 2;
	 * @return {number}
	 */
	proto.protocol.ResourceReceipt.prototype.getEnergyFee = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ResourceReceipt.prototype.setEnergyFee = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 origin_energy_usage = 3;
	 * @return {number}
	 */
	proto.protocol.ResourceReceipt.prototype.getOriginEnergyUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.ResourceReceipt.prototype.setOriginEnergyUsage = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 energy_usage_total = 4;
	 * @return {number}
	 */
	proto.protocol.ResourceReceipt.prototype.getEnergyUsageTotal = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.ResourceReceipt.prototype.setEnergyUsageTotal = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 net_usage = 5;
	 * @return {number}
	 */
	proto.protocol.ResourceReceipt.prototype.getNetUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.ResourceReceipt.prototype.setNetUsage = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * optional int64 net_fee = 6;
	 * @return {number}
	 */
	proto.protocol.ResourceReceipt.prototype.getNetFee = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {number} value */
	proto.protocol.ResourceReceipt.prototype.setNetFee = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional Transaction.Result.contractResult result = 7;
	 * @return {!proto.protocol.Transaction.Result.contractResult}
	 */
	proto.protocol.ResourceReceipt.prototype.getResult = function() {
	  return /** @type {!proto.protocol.Transaction.Result.contractResult} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {!proto.protocol.Transaction.Result.contractResult} value */
	proto.protocol.ResourceReceipt.prototype.setResult = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Transaction = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Transaction.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Transaction, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Transaction.displayName = 'proto.protocol.Transaction';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Transaction.repeatedFields_ = [2,5];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Transaction.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Transaction.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Transaction} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    rawData: (f = msg.getRawData()) && proto.protocol.Transaction.raw.toObject(includeInstance, f),
	    signatureList: msg.getSignatureList_asB64(),
	    retList: googleProtobuf.Message.toObjectList(msg.getRetList(),
	    proto.protocol.Transaction.Result.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Transaction}
	 */
	proto.protocol.Transaction.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Transaction;
	  return proto.protocol.Transaction.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Transaction} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Transaction}
	 */
	proto.protocol.Transaction.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Transaction.raw;
	      reader.readMessage(value,proto.protocol.Transaction.raw.deserializeBinaryFromReader);
	      msg.setRawData(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addSignature(value);
	      break;
	    case 5:
	      var value = new proto.protocol.Transaction.Result;
	      reader.readMessage(value,proto.protocol.Transaction.Result.deserializeBinaryFromReader);
	      msg.addRet(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Transaction.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Transaction} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getRawData();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.Transaction.raw.serializeBinaryToWriter
	    );
	  }
	  f = message.getSignatureList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getRetList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      5,
	      f,
	      proto.protocol.Transaction.Result.serializeBinaryToWriter
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Transaction.Contract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Transaction.Contract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Transaction.Contract.displayName = 'proto.protocol.Transaction.Contract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Transaction.Contract.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Transaction.Contract.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Transaction.Contract} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.Contract.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    parameter: (f = msg.getParameter()) && any_pb.Any.toObject(includeInstance, f),
	    provider: msg.getProvider_asB64(),
	    contractname: msg.getContractname_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Transaction.Contract}
	 */
	proto.protocol.Transaction.Contract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Transaction.Contract;
	  return proto.protocol.Transaction.Contract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Transaction.Contract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Transaction.Contract}
	 */
	proto.protocol.Transaction.Contract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!proto.protocol.Transaction.Contract.ContractType} */ (reader.readEnum());
	      msg.setType(value);
	      break;
	    case 2:
	      var value = new any_pb.Any;
	      reader.readMessage(value,any_pb.Any.deserializeBinaryFromReader);
	      msg.setParameter(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setProvider(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setContractname(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.Contract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Transaction.Contract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Transaction.Contract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.Contract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      1,
	      f
	    );
	  }
	  f = message.getParameter();
	  if (f != null) {
	    writer.writeMessage(
	      2,
	      f,
	      any_pb.Any.serializeBinaryToWriter
	    );
	  }
	  f = message.getProvider_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getContractname_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.Transaction.Contract.ContractType = {
	  ACCOUNTCREATECONTRACT: 0,
	  TRANSFERCONTRACT: 1,
	  TRANSFERASSETCONTRACT: 2,
	  VOTEASSETCONTRACT: 3,
	  VOTEWITNESSCONTRACT: 4,
	  WITNESSCREATECONTRACT: 5,
	  ASSETISSUECONTRACT: 6,
	  WITNESSUPDATECONTRACT: 8,
	  PARTICIPATEASSETISSUECONTRACT: 9,
	  ACCOUNTUPDATECONTRACT: 10,
	  FREEZEBALANCECONTRACT: 11,
	  UNFREEZEBALANCECONTRACT: 12,
	  WITHDRAWBALANCECONTRACT: 13,
	  UNFREEZEASSETCONTRACT: 14,
	  UPDATEASSETCONTRACT: 15,
	  PROPOSALCREATECONTRACT: 16,
	  PROPOSALAPPROVECONTRACT: 17,
	  PROPOSALDELETECONTRACT: 18,
	  SETACCOUNTIDCONTRACT: 19,
	  CUSTOMCONTRACT: 20,
	  CREATESMARTCONTRACT: 30,
	  TRIGGERSMARTCONTRACT: 31,
	  GETCONTRACT: 32,
	  UPDATESETTINGCONTRACT: 33,
	  EXCHANGECREATECONTRACT: 41,
	  EXCHANGEINJECTCONTRACT: 42,
	  EXCHANGEWITHDRAWCONTRACT: 43,
	  EXCHANGETRANSACTIONCONTRACT: 44,
	  ACCOUNTPERMISSIONUPDATECONTRACT: 45,
	  PERMISSIONADDKEYCONTRACT: 46,
	  PERMISSIONUPDATEKEYCONTRACT: 47,
	  PERMISSIONDELETEKEYCONTRACT: 48
	};

	/**
	 * optional ContractType type = 1;
	 * @return {!proto.protocol.Transaction.Contract.ContractType}
	 */
	proto.protocol.Transaction.Contract.prototype.getType = function() {
	  return /** @type {!proto.protocol.Transaction.Contract.ContractType} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {!proto.protocol.Transaction.Contract.ContractType} value */
	proto.protocol.Transaction.Contract.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional google.protobuf.Any parameter = 2;
	 * @return {?proto.google.protobuf.Any}
	 */
	proto.protocol.Transaction.Contract.prototype.getParameter = function() {
	  return /** @type{?proto.google.protobuf.Any} */ (
	    googleProtobuf.Message.getWrapperField(this, any_pb.Any, 2));
	};


	/** @param {?proto.google.protobuf.Any|undefined} value */
	proto.protocol.Transaction.Contract.prototype.setParameter = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 2, value);
	};


	proto.protocol.Transaction.Contract.prototype.clearParameter = function() {
	  this.setParameter(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.Transaction.Contract.prototype.hasParameter = function() {
	  return googleProtobuf.Message.getField(this, 2) != null;
	};


	/**
	 * optional bytes provider = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Transaction.Contract.prototype.getProvider = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes provider = 3;
	 * This is a type-conversion wrapper around `getProvider()`
	 * @return {string}
	 */
	proto.protocol.Transaction.Contract.prototype.getProvider_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getProvider()));
	};


	/**
	 * optional bytes provider = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getProvider()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.Contract.prototype.getProvider_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getProvider()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Transaction.Contract.prototype.setProvider = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bytes ContractName = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Transaction.Contract.prototype.getContractname = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes ContractName = 4;
	 * This is a type-conversion wrapper around `getContractname()`
	 * @return {string}
	 */
	proto.protocol.Transaction.Contract.prototype.getContractname_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getContractname()));
	};


	/**
	 * optional bytes ContractName = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractname()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.Contract.prototype.getContractname_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getContractname()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Transaction.Contract.prototype.setContractname = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Transaction.Result = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.Transaction.Result, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Transaction.Result.displayName = 'proto.protocol.Transaction.Result';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Transaction.Result.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Transaction.Result.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Transaction.Result} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.Result.toObject = function(includeInstance, msg) {
	  var obj = {
	    fee: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    ret: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    contractret: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    withdrawAmount: googleProtobuf.Message.getFieldWithDefault(msg, 15, 0),
	    unfreezeAmount: googleProtobuf.Message.getFieldWithDefault(msg, 16, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Transaction.Result}
	 */
	proto.protocol.Transaction.Result.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Transaction.Result;
	  return proto.protocol.Transaction.Result.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Transaction.Result} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Transaction.Result}
	 */
	proto.protocol.Transaction.Result.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setFee(value);
	      break;
	    case 2:
	      var value = /** @type {!proto.protocol.Transaction.Result.code} */ (reader.readEnum());
	      msg.setRet(value);
	      break;
	    case 3:
	      var value = /** @type {!proto.protocol.Transaction.Result.contractResult} */ (reader.readEnum());
	      msg.setContractret(value);
	      break;
	    case 15:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setWithdrawAmount(value);
	      break;
	    case 16:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setUnfreezeAmount(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.Result.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Transaction.Result.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Transaction.Result} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.Result.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFee();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getRet();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      2,
	      f
	    );
	  }
	  f = message.getContractret();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      3,
	      f
	    );
	  }
	  f = message.getWithdrawAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	      15,
	      f
	    );
	  }
	  f = message.getUnfreezeAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	      16,
	      f
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.Transaction.Result.code = {
	  SUCESS: 0,
	  FAILED: 1
	};

	/**
	 * @enum {number}
	 */
	proto.protocol.Transaction.Result.contractResult = {
	  DEFAULT: 0,
	  SUCCESS: 1,
	  REVERT: 2,
	  BAD_JUMP_DESTINATION: 3,
	  OUT_OF_MEMORY: 4,
	  PRECOMPILED_CONTRACT: 5,
	  STACK_TOO_SMALL: 6,
	  STACK_TOO_LARGE: 7,
	  ILLEGAL_OPERATION: 8,
	  STACK_OVERFLOW: 9,
	  OUT_OF_ENERGY: 10,
	  OUT_OF_TIME: 11,
	  JVM_STACK_OVER_FLOW: 12,
	  UNKNOWN: 13
	};

	/**
	 * optional int64 fee = 1;
	 * @return {number}
	 */
	proto.protocol.Transaction.Result.prototype.getFee = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.Result.prototype.setFee = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional code ret = 2;
	 * @return {!proto.protocol.Transaction.Result.code}
	 */
	proto.protocol.Transaction.Result.prototype.getRet = function() {
	  return /** @type {!proto.protocol.Transaction.Result.code} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {!proto.protocol.Transaction.Result.code} value */
	proto.protocol.Transaction.Result.prototype.setRet = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional contractResult contractRet = 3;
	 * @return {!proto.protocol.Transaction.Result.contractResult}
	 */
	proto.protocol.Transaction.Result.prototype.getContractret = function() {
	  return /** @type {!proto.protocol.Transaction.Result.contractResult} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {!proto.protocol.Transaction.Result.contractResult} value */
	proto.protocol.Transaction.Result.prototype.setContractret = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 withdraw_amount = 15;
	 * @return {number}
	 */
	proto.protocol.Transaction.Result.prototype.getWithdrawAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 15, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.Result.prototype.setWithdrawAmount = function(value) {
	  googleProtobuf.Message.setField(this, 15, value);
	};


	/**
	 * optional int64 unfreeze_amount = 16;
	 * @return {number}
	 */
	proto.protocol.Transaction.Result.prototype.getUnfreezeAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 16, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.Result.prototype.setUnfreezeAmount = function(value) {
	  googleProtobuf.Message.setField(this, 16, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Transaction.raw = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Transaction.raw.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Transaction.raw, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Transaction.raw.displayName = 'proto.protocol.Transaction.raw';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Transaction.raw.repeatedFields_ = [9,11];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Transaction.raw.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Transaction.raw.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Transaction.raw} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.raw.toObject = function(includeInstance, msg) {
	  var obj = {
	    refBlockBytes: msg.getRefBlockBytes_asB64(),
	    refBlockNum: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    refBlockHash: msg.getRefBlockHash_asB64(),
	    expiration: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
	    authsList: googleProtobuf.Message.toObjectList(msg.getAuthsList(),
	    proto.protocol.authority.toObject, includeInstance),
	    data: msg.getData_asB64(),
	    contractList: googleProtobuf.Message.toObjectList(msg.getContractList(),
	    proto.protocol.Transaction.Contract.toObject, includeInstance),
	    scripts: msg.getScripts_asB64(),
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 14, 0),
	    feeLimit: googleProtobuf.Message.getFieldWithDefault(msg, 18, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Transaction.raw}
	 */
	proto.protocol.Transaction.raw.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Transaction.raw;
	  return proto.protocol.Transaction.raw.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Transaction.raw} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Transaction.raw}
	 */
	proto.protocol.Transaction.raw.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setRefBlockBytes(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setRefBlockNum(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setRefBlockHash(value);
	      break;
	    case 8:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExpiration(value);
	      break;
	    case 9:
	      var value = new proto.protocol.authority;
	      reader.readMessage(value,proto.protocol.authority.deserializeBinaryFromReader);
	      msg.addAuths(value);
	      break;
	    case 10:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setData(value);
	      break;
	    case 11:
	      var value = new proto.protocol.Transaction.Contract;
	      reader.readMessage(value,proto.protocol.Transaction.Contract.deserializeBinaryFromReader);
	      msg.addContract(value);
	      break;
	    case 12:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setScripts(value);
	      break;
	    case 14:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 18:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setFeeLimit(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.raw.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Transaction.raw.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Transaction.raw} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transaction.raw.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getRefBlockBytes_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getRefBlockNum();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getRefBlockHash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getExpiration();
	  if (f !== 0) {
	    writer.writeInt64(
	      8,
	      f
	    );
	  }
	  f = message.getAuthsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      9,
	      f,
	      proto.protocol.authority.serializeBinaryToWriter
	    );
	  }
	  f = message.getData_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      10,
	      f
	    );
	  }
	  f = message.getContractList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      11,
	      f,
	      proto.protocol.Transaction.Contract.serializeBinaryToWriter
	    );
	  }
	  f = message.getScripts_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      12,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      14,
	      f
	    );
	  }
	  f = message.getFeeLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	      18,
	      f
	    );
	  }
	};


	/**
	 * optional bytes ref_block_bytes = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockBytes = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes ref_block_bytes = 1;
	 * This is a type-conversion wrapper around `getRefBlockBytes()`
	 * @return {string}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockBytes_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getRefBlockBytes()));
	};


	/**
	 * optional bytes ref_block_bytes = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getRefBlockBytes()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockBytes_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getRefBlockBytes()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Transaction.raw.prototype.setRefBlockBytes = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 ref_block_num = 3;
	 * @return {number}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockNum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.raw.prototype.setRefBlockNum = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bytes ref_block_hash = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockHash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes ref_block_hash = 4;
	 * This is a type-conversion wrapper around `getRefBlockHash()`
	 * @return {string}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockHash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getRefBlockHash()));
	};


	/**
	 * optional bytes ref_block_hash = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getRefBlockHash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.raw.prototype.getRefBlockHash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getRefBlockHash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Transaction.raw.prototype.setRefBlockHash = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 expiration = 8;
	 * @return {number}
	 */
	proto.protocol.Transaction.raw.prototype.getExpiration = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.raw.prototype.setExpiration = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * repeated authority auths = 9;
	 * @return {!Array.<!proto.protocol.authority>}
	 */
	proto.protocol.Transaction.raw.prototype.getAuthsList = function() {
	  return /** @type{!Array.<!proto.protocol.authority>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.authority, 9));
	};


	/** @param {!Array.<!proto.protocol.authority>} value */
	proto.protocol.Transaction.raw.prototype.setAuthsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 9, value);
	};


	/**
	 * @param {!proto.protocol.authority=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.authority}
	 */
	proto.protocol.Transaction.raw.prototype.addAuths = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.protocol.authority, opt_index);
	};


	proto.protocol.Transaction.raw.prototype.clearAuthsList = function() {
	  this.setAuthsList([]);
	};


	/**
	 * optional bytes data = 10;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Transaction.raw.prototype.getData = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, ""));
	};


	/**
	 * optional bytes data = 10;
	 * This is a type-conversion wrapper around `getData()`
	 * @return {string}
	 */
	proto.protocol.Transaction.raw.prototype.getData_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getData()));
	};


	/**
	 * optional bytes data = 10;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getData()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.raw.prototype.getData_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getData()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Transaction.raw.prototype.setData = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * repeated Contract contract = 11;
	 * @return {!Array.<!proto.protocol.Transaction.Contract>}
	 */
	proto.protocol.Transaction.raw.prototype.getContractList = function() {
	  return /** @type{!Array.<!proto.protocol.Transaction.Contract>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Transaction.Contract, 11));
	};


	/** @param {!Array.<!proto.protocol.Transaction.Contract>} value */
	proto.protocol.Transaction.raw.prototype.setContractList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 11, value);
	};


	/**
	 * @param {!proto.protocol.Transaction.Contract=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Transaction.Contract}
	 */
	proto.protocol.Transaction.raw.prototype.addContract = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.protocol.Transaction.Contract, opt_index);
	};


	proto.protocol.Transaction.raw.prototype.clearContractList = function() {
	  this.setContractList([]);
	};


	/**
	 * optional bytes scripts = 12;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.Transaction.raw.prototype.getScripts = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 12, ""));
	};


	/**
	 * optional bytes scripts = 12;
	 * This is a type-conversion wrapper around `getScripts()`
	 * @return {string}
	 */
	proto.protocol.Transaction.raw.prototype.getScripts_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getScripts()));
	};


	/**
	 * optional bytes scripts = 12;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getScripts()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transaction.raw.prototype.getScripts_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getScripts()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.Transaction.raw.prototype.setScripts = function(value) {
	  googleProtobuf.Message.setField(this, 12, value);
	};


	/**
	 * optional int64 timestamp = 14;
	 * @return {number}
	 */
	proto.protocol.Transaction.raw.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 14, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.raw.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 14, value);
	};


	/**
	 * optional int64 fee_limit = 18;
	 * @return {number}
	 */
	proto.protocol.Transaction.raw.prototype.getFeeLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 18, 0));
	};


	/** @param {number} value */
	proto.protocol.Transaction.raw.prototype.setFeeLimit = function(value) {
	  googleProtobuf.Message.setField(this, 18, value);
	};


	/**
	 * optional raw raw_data = 1;
	 * @return {?proto.protocol.Transaction.raw}
	 */
	proto.protocol.Transaction.prototype.getRawData = function() {
	  return /** @type{?proto.protocol.Transaction.raw} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Transaction.raw, 1));
	};


	/** @param {?proto.protocol.Transaction.raw|undefined} value */
	proto.protocol.Transaction.prototype.setRawData = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.Transaction.prototype.clearRawData = function() {
	  this.setRawData(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.Transaction.prototype.hasRawData = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * repeated bytes signature = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.protocol.Transaction.prototype.getSignatureList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (googleProtobuf.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes signature = 2;
	 * This is a type-conversion wrapper around `getSignatureList()`
	 * @return {!Array.<string>}
	 */
	proto.protocol.Transaction.prototype.getSignatureList_asB64 = function() {
	  return /** @type {!Array.<string>} */ (googleProtobuf.Message.bytesListAsB64(
	      this.getSignatureList()));
	};


	/**
	 * repeated bytes signature = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSignatureList()`
	 * @return {!Array.<!Uint8Array>}
	 */
	proto.protocol.Transaction.prototype.getSignatureList_asU8 = function() {
	  return /** @type {!Array.<!Uint8Array>} */ (googleProtobuf.Message.bytesListAsU8(
	      this.getSignatureList()));
	};


	/** @param {!(Array<!Uint8Array>|Array<string>)} value */
	proto.protocol.Transaction.prototype.setSignatureList = function(value) {
	  googleProtobuf.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 */
	proto.protocol.Transaction.prototype.addSignature = function(value, opt_index) {
	  googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	proto.protocol.Transaction.prototype.clearSignatureList = function() {
	  this.setSignatureList([]);
	};


	/**
	 * repeated Result ret = 5;
	 * @return {!Array.<!proto.protocol.Transaction.Result>}
	 */
	proto.protocol.Transaction.prototype.getRetList = function() {
	  return /** @type{!Array.<!proto.protocol.Transaction.Result>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Transaction.Result, 5));
	};


	/** @param {!Array.<!proto.protocol.Transaction.Result>} value */
	proto.protocol.Transaction.prototype.setRetList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.protocol.Transaction.Result=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Transaction.Result}
	 */
	proto.protocol.Transaction.prototype.addRet = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.protocol.Transaction.Result, opt_index);
	};


	proto.protocol.Transaction.prototype.clearRetList = function() {
	  this.setRetList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TransactionInfo = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.TransactionInfo.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.TransactionInfo, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TransactionInfo.displayName = 'proto.protocol.TransactionInfo';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.TransactionInfo.repeatedFields_ = [5,8,17];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TransactionInfo.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TransactionInfo} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransactionInfo.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    id: msg.getId_asB64(),
	    fee: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    blocknumber: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    blocktimestamp: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	    contractresultList: msg.getContractresultList_asB64(),
	    contractAddress: msg.getContractAddress_asB64(),
	    receipt: (f = msg.getReceipt()) && proto.protocol.ResourceReceipt.toObject(includeInstance, f),
	    logList: googleProtobuf.Message.toObjectList(msg.getLogList(),
	    proto.protocol.TransactionInfo.Log.toObject, includeInstance),
	    result: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0),
	    resmessage: msg.getResmessage_asB64(),
	    withdrawAmount: googleProtobuf.Message.getFieldWithDefault(msg, 15, 0),
	    unfreezeAmount: googleProtobuf.Message.getFieldWithDefault(msg, 16, 0),
	    internalTransactionsList: googleProtobuf.Message.toObjectList(msg.getInternalTransactionsList(),
	    proto.protocol.InternalTransaction.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TransactionInfo}
	 */
	proto.protocol.TransactionInfo.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TransactionInfo;
	  return proto.protocol.TransactionInfo.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TransactionInfo} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TransactionInfo}
	 */
	proto.protocol.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setFee(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBlocknumber(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setBlocktimestamp(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addContractresult(value);
	      break;
	    case 6:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setContractAddress(value);
	      break;
	    case 7:
	      var value = new proto.protocol.ResourceReceipt;
	      reader.readMessage(value,proto.protocol.ResourceReceipt.deserializeBinaryFromReader);
	      msg.setReceipt(value);
	      break;
	    case 8:
	      var value = new proto.protocol.TransactionInfo.Log;
	      reader.readMessage(value,proto.protocol.TransactionInfo.Log.deserializeBinaryFromReader);
	      msg.addLog(value);
	      break;
	    case 9:
	      var value = /** @type {!proto.protocol.TransactionInfo.code} */ (reader.readEnum());
	      msg.setResult(value);
	      break;
	    case 10:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setResmessage(value);
	      break;
	    case 15:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setWithdrawAmount(value);
	      break;
	    case 16:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setUnfreezeAmount(value);
	      break;
	    case 17:
	      var value = new proto.protocol.InternalTransaction;
	      reader.readMessage(value,proto.protocol.InternalTransaction.deserializeBinaryFromReader);
	      msg.addInternalTransactions(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TransactionInfo.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TransactionInfo} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getFee();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getBlocknumber();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getBlocktimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = message.getContractresultList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      5,
	      f
	    );
	  }
	  f = message.getContractAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      6,
	      f
	    );
	  }
	  f = message.getReceipt();
	  if (f != null) {
	    writer.writeMessage(
	      7,
	      f,
	      proto.protocol.ResourceReceipt.serializeBinaryToWriter
	    );
	  }
	  f = message.getLogList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      8,
	      f,
	      proto.protocol.TransactionInfo.Log.serializeBinaryToWriter
	    );
	  }
	  f = message.getResult();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      9,
	      f
	    );
	  }
	  f = message.getResmessage_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      10,
	      f
	    );
	  }
	  f = message.getWithdrawAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	      15,
	      f
	    );
	  }
	  f = message.getUnfreezeAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	      16,
	      f
	    );
	  }
	  f = message.getInternalTransactionsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      17,
	      f,
	      proto.protocol.InternalTransaction.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.TransactionInfo.code = {
	  SUCESS: 0,
	  FAILED: 1
	};


	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TransactionInfo.Log = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.TransactionInfo.Log.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.TransactionInfo.Log, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TransactionInfo.Log.displayName = 'proto.protocol.TransactionInfo.Log';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.TransactionInfo.Log.repeatedFields_ = [2];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TransactionInfo.Log.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TransactionInfo.Log.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TransactionInfo.Log} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransactionInfo.Log.toObject = function(includeInstance, msg) {
	  var obj = {
	    address: msg.getAddress_asB64(),
	    topicsList: msg.getTopicsList_asB64(),
	    data: msg.getData_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TransactionInfo.Log}
	 */
	proto.protocol.TransactionInfo.Log.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TransactionInfo.Log;
	  return proto.protocol.TransactionInfo.Log.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TransactionInfo.Log} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TransactionInfo.Log}
	 */
	proto.protocol.TransactionInfo.Log.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAddress(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addTopics(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setData(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.Log.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TransactionInfo.Log.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TransactionInfo.Log} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransactionInfo.Log.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getTopicsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	  f = message.getData_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes address = 1;
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {string}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAddress()));
	};


	/**
	 * optional bytes address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransactionInfo.Log.prototype.setAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * repeated bytes topics = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getTopicsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (googleProtobuf.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes topics = 2;
	 * This is a type-conversion wrapper around `getTopicsList()`
	 * @return {!Array.<string>}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getTopicsList_asB64 = function() {
	  return /** @type {!Array.<string>} */ (googleProtobuf.Message.bytesListAsB64(
	      this.getTopicsList()));
	};


	/**
	 * repeated bytes topics = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTopicsList()`
	 * @return {!Array.<!Uint8Array>}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getTopicsList_asU8 = function() {
	  return /** @type {!Array.<!Uint8Array>} */ (googleProtobuf.Message.bytesListAsU8(
	      this.getTopicsList()));
	};


	/** @param {!(Array<!Uint8Array>|Array<string>)} value */
	proto.protocol.TransactionInfo.Log.prototype.setTopicsList = function(value) {
	  googleProtobuf.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 */
	proto.protocol.TransactionInfo.Log.prototype.addTopics = function(value, opt_index) {
	  googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	proto.protocol.TransactionInfo.Log.prototype.clearTopicsList = function() {
	  this.setTopicsList([]);
	};


	/**
	 * optional bytes data = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getData = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes data = 3;
	 * This is a type-conversion wrapper around `getData()`
	 * @return {string}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getData_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getData()));
	};


	/**
	 * optional bytes data = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getData()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.Log.prototype.getData_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getData()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransactionInfo.Log.prototype.setData = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransactionInfo.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.protocol.TransactionInfo.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransactionInfo.prototype.setId = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 fee = 2;
	 * @return {number}
	 */
	proto.protocol.TransactionInfo.prototype.getFee = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.TransactionInfo.prototype.setFee = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 blockNumber = 3;
	 * @return {number}
	 */
	proto.protocol.TransactionInfo.prototype.getBlocknumber = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.TransactionInfo.prototype.setBlocknumber = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 blockTimeStamp = 4;
	 * @return {number}
	 */
	proto.protocol.TransactionInfo.prototype.getBlocktimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.TransactionInfo.prototype.setBlocktimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * repeated bytes contractResult = 5;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.protocol.TransactionInfo.prototype.getContractresultList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (googleProtobuf.Message.getRepeatedField(this, 5));
	};


	/**
	 * repeated bytes contractResult = 5;
	 * This is a type-conversion wrapper around `getContractresultList()`
	 * @return {!Array.<string>}
	 */
	proto.protocol.TransactionInfo.prototype.getContractresultList_asB64 = function() {
	  return /** @type {!Array.<string>} */ (googleProtobuf.Message.bytesListAsB64(
	      this.getContractresultList()));
	};


	/**
	 * repeated bytes contractResult = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractresultList()`
	 * @return {!Array.<!Uint8Array>}
	 */
	proto.protocol.TransactionInfo.prototype.getContractresultList_asU8 = function() {
	  return /** @type {!Array.<!Uint8Array>} */ (googleProtobuf.Message.bytesListAsU8(
	      this.getContractresultList()));
	};


	/** @param {!(Array<!Uint8Array>|Array<string>)} value */
	proto.protocol.TransactionInfo.prototype.setContractresultList = function(value) {
	  googleProtobuf.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 */
	proto.protocol.TransactionInfo.prototype.addContractresult = function(value, opt_index) {
	  googleProtobuf.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	proto.protocol.TransactionInfo.prototype.clearContractresultList = function() {
	  this.setContractresultList([]);
	};


	/**
	 * optional bytes contract_address = 6;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransactionInfo.prototype.getContractAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * optional bytes contract_address = 6;
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {string}
	 */
	proto.protocol.TransactionInfo.prototype.getContractAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getContractAddress()));
	};


	/**
	 * optional bytes contract_address = 6;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.prototype.getContractAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getContractAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransactionInfo.prototype.setContractAddress = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional ResourceReceipt receipt = 7;
	 * @return {?proto.protocol.ResourceReceipt}
	 */
	proto.protocol.TransactionInfo.prototype.getReceipt = function() {
	  return /** @type{?proto.protocol.ResourceReceipt} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.ResourceReceipt, 7));
	};


	/** @param {?proto.protocol.ResourceReceipt|undefined} value */
	proto.protocol.TransactionInfo.prototype.setReceipt = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 7, value);
	};


	proto.protocol.TransactionInfo.prototype.clearReceipt = function() {
	  this.setReceipt(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.TransactionInfo.prototype.hasReceipt = function() {
	  return googleProtobuf.Message.getField(this, 7) != null;
	};


	/**
	 * repeated Log log = 8;
	 * @return {!Array.<!proto.protocol.TransactionInfo.Log>}
	 */
	proto.protocol.TransactionInfo.prototype.getLogList = function() {
	  return /** @type{!Array.<!proto.protocol.TransactionInfo.Log>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.TransactionInfo.Log, 8));
	};


	/** @param {!Array.<!proto.protocol.TransactionInfo.Log>} value */
	proto.protocol.TransactionInfo.prototype.setLogList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 8, value);
	};


	/**
	 * @param {!proto.protocol.TransactionInfo.Log=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.TransactionInfo.Log}
	 */
	proto.protocol.TransactionInfo.prototype.addLog = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.protocol.TransactionInfo.Log, opt_index);
	};


	proto.protocol.TransactionInfo.prototype.clearLogList = function() {
	  this.setLogList([]);
	};


	/**
	 * optional code result = 9;
	 * @return {!proto.protocol.TransactionInfo.code}
	 */
	proto.protocol.TransactionInfo.prototype.getResult = function() {
	  return /** @type {!proto.protocol.TransactionInfo.code} */ (googleProtobuf.Message.getFieldWithDefault(this, 9, 0));
	};


	/** @param {!proto.protocol.TransactionInfo.code} value */
	proto.protocol.TransactionInfo.prototype.setResult = function(value) {
	  googleProtobuf.Message.setField(this, 9, value);
	};


	/**
	 * optional bytes resMessage = 10;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransactionInfo.prototype.getResmessage = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, ""));
	};


	/**
	 * optional bytes resMessage = 10;
	 * This is a type-conversion wrapper around `getResmessage()`
	 * @return {string}
	 */
	proto.protocol.TransactionInfo.prototype.getResmessage_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getResmessage()));
	};


	/**
	 * optional bytes resMessage = 10;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getResmessage()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionInfo.prototype.getResmessage_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getResmessage()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransactionInfo.prototype.setResmessage = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * optional int64 withdraw_amount = 15;
	 * @return {number}
	 */
	proto.protocol.TransactionInfo.prototype.getWithdrawAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 15, 0));
	};


	/** @param {number} value */
	proto.protocol.TransactionInfo.prototype.setWithdrawAmount = function(value) {
	  googleProtobuf.Message.setField(this, 15, value);
	};


	/**
	 * optional int64 unfreeze_amount = 16;
	 * @return {number}
	 */
	proto.protocol.TransactionInfo.prototype.getUnfreezeAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 16, 0));
	};


	/** @param {number} value */
	proto.protocol.TransactionInfo.prototype.setUnfreezeAmount = function(value) {
	  googleProtobuf.Message.setField(this, 16, value);
	};


	/**
	 * repeated InternalTransaction internal_transactions = 17;
	 * @return {!Array.<!proto.protocol.InternalTransaction>}
	 */
	proto.protocol.TransactionInfo.prototype.getInternalTransactionsList = function() {
	  return /** @type{!Array.<!proto.protocol.InternalTransaction>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.InternalTransaction, 17));
	};


	/** @param {!Array.<!proto.protocol.InternalTransaction>} value */
	proto.protocol.TransactionInfo.prototype.setInternalTransactionsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 17, value);
	};


	/**
	 * @param {!proto.protocol.InternalTransaction=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.InternalTransaction}
	 */
	proto.protocol.TransactionInfo.prototype.addInternalTransactions = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.protocol.InternalTransaction, opt_index);
	};


	proto.protocol.TransactionInfo.prototype.clearInternalTransactionsList = function() {
	  this.setInternalTransactionsList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Transactions = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Transactions.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Transactions, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Transactions.displayName = 'proto.protocol.Transactions';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Transactions.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Transactions.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Transactions.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Transactions} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transactions.toObject = function(includeInstance, msg) {
	  var obj = {
	    transactionsList: googleProtobuf.Message.toObjectList(msg.getTransactionsList(),
	    proto.protocol.Transaction.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Transactions}
	 */
	proto.protocol.Transactions.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Transactions;
	  return proto.protocol.Transactions.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Transactions} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Transactions}
	 */
	proto.protocol.Transactions.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Transaction;
	      reader.readMessage(value,proto.protocol.Transaction.deserializeBinaryFromReader);
	      msg.addTransactions(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Transactions.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Transactions.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Transactions} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Transactions.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTransactionsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.Transaction.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated Transaction transactions = 1;
	 * @return {!Array.<!proto.protocol.Transaction>}
	 */
	proto.protocol.Transactions.prototype.getTransactionsList = function() {
	  return /** @type{!Array.<!proto.protocol.Transaction>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Transaction, 1));
	};


	/** @param {!Array.<!proto.protocol.Transaction>} value */
	proto.protocol.Transactions.prototype.setTransactionsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.Transaction=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Transaction}
	 */
	proto.protocol.Transactions.prototype.addTransactions = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.Transaction, opt_index);
	};


	proto.protocol.Transactions.prototype.clearTransactionsList = function() {
	  this.setTransactionsList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TransactionSign = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TransactionSign, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TransactionSign.displayName = 'proto.protocol.TransactionSign';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.TransactionSign.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.TransactionSign.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.TransactionSign} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransactionSign.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    transaction: (f = msg.getTransaction()) && proto.protocol.Transaction.toObject(includeInstance, f),
	    privatekey: msg.getPrivatekey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TransactionSign}
	 */
	proto.protocol.TransactionSign.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TransactionSign;
	  return proto.protocol.TransactionSign.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TransactionSign} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TransactionSign}
	 */
	proto.protocol.TransactionSign.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Transaction;
	      reader.readMessage(value,proto.protocol.Transaction.deserializeBinaryFromReader);
	      msg.setTransaction(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPrivatekey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionSign.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TransactionSign.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TransactionSign} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransactionSign.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTransaction();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.Transaction.serializeBinaryToWriter
	    );
	  }
	  f = message.getPrivatekey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional Transaction transaction = 1;
	 * @return {?proto.protocol.Transaction}
	 */
	proto.protocol.TransactionSign.prototype.getTransaction = function() {
	  return /** @type{?proto.protocol.Transaction} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.Transaction, 1));
	};


	/** @param {?proto.protocol.Transaction|undefined} value */
	proto.protocol.TransactionSign.prototype.setTransaction = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.TransactionSign.prototype.clearTransaction = function() {
	  this.setTransaction(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.TransactionSign.prototype.hasTransaction = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes privateKey = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransactionSign.prototype.getPrivatekey = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes privateKey = 2;
	 * This is a type-conversion wrapper around `getPrivatekey()`
	 * @return {string}
	 */
	proto.protocol.TransactionSign.prototype.getPrivatekey_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getPrivatekey()));
	};


	/**
	 * optional bytes privateKey = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPrivatekey()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransactionSign.prototype.getPrivatekey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getPrivatekey()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransactionSign.prototype.setPrivatekey = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BlockHeader = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BlockHeader, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BlockHeader.displayName = 'proto.protocol.BlockHeader';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.BlockHeader.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.BlockHeader.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.BlockHeader} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockHeader.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    rawData: (f = msg.getRawData()) && proto.protocol.BlockHeader.raw.toObject(includeInstance, f),
	    witnessSignature: msg.getWitnessSignature_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BlockHeader}
	 */
	proto.protocol.BlockHeader.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BlockHeader;
	  return proto.protocol.BlockHeader.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BlockHeader} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BlockHeader}
	 */
	proto.protocol.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.BlockHeader.raw;
	      reader.readMessage(value,proto.protocol.BlockHeader.raw.deserializeBinaryFromReader);
	      msg.setRawData(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setWitnessSignature(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockHeader.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BlockHeader.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BlockHeader} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockHeader.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getRawData();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.protocol.BlockHeader.raw.serializeBinaryToWriter
	    );
	  }
	  f = message.getWitnessSignature_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BlockHeader.raw = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BlockHeader.raw, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BlockHeader.raw.displayName = 'proto.protocol.BlockHeader.raw';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.BlockHeader.raw.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.BlockHeader.raw.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.BlockHeader.raw} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockHeader.raw.toObject = function(includeInstance, msg) {
	  var obj = {
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    txtrieroot: msg.getTxtrieroot_asB64(),
	    parenthash: msg.getParenthash_asB64(),
	    number: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
	    witnessId: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
	    witnessAddress: msg.getWitnessAddress_asB64(),
	    version: googleProtobuf.Message.getFieldWithDefault(msg, 10, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BlockHeader.raw}
	 */
	proto.protocol.BlockHeader.raw.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BlockHeader.raw;
	  return proto.protocol.BlockHeader.raw.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BlockHeader.raw} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BlockHeader.raw}
	 */
	proto.protocol.BlockHeader.raw.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTxtrieroot(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setParenthash(value);
	      break;
	    case 7:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNumber(value);
	      break;
	    case 8:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setWitnessId(value);
	      break;
	    case 9:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setWitnessAddress(value);
	      break;
	    case 10:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setVersion(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockHeader.raw.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BlockHeader.raw.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BlockHeader.raw} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockHeader.raw.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getTxtrieroot_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getParenthash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeInt64(
	      7,
	      f
	    );
	  }
	  f = message.getWitnessId();
	  if (f !== 0) {
	    writer.writeInt64(
	      8,
	      f
	    );
	  }
	  f = message.getWitnessAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      9,
	      f
	    );
	  }
	  f = message.getVersion();
	  if (f !== 0) {
	    writer.writeInt32(
	      10,
	      f
	    );
	  }
	};


	/**
	 * optional int64 timestamp = 1;
	 * @return {number}
	 */
	proto.protocol.BlockHeader.raw.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.BlockHeader.raw.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes txTrieRoot = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BlockHeader.raw.prototype.getTxtrieroot = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes txTrieRoot = 2;
	 * This is a type-conversion wrapper around `getTxtrieroot()`
	 * @return {string}
	 */
	proto.protocol.BlockHeader.raw.prototype.getTxtrieroot_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTxtrieroot()));
	};


	/**
	 * optional bytes txTrieRoot = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTxtrieroot()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockHeader.raw.prototype.getTxtrieroot_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTxtrieroot()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BlockHeader.raw.prototype.setTxtrieroot = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes parentHash = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BlockHeader.raw.prototype.getParenthash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes parentHash = 3;
	 * This is a type-conversion wrapper around `getParenthash()`
	 * @return {string}
	 */
	proto.protocol.BlockHeader.raw.prototype.getParenthash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getParenthash()));
	};


	/**
	 * optional bytes parentHash = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getParenthash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockHeader.raw.prototype.getParenthash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getParenthash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BlockHeader.raw.prototype.setParenthash = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 number = 7;
	 * @return {number}
	 */
	proto.protocol.BlockHeader.raw.prototype.getNumber = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {number} value */
	proto.protocol.BlockHeader.raw.prototype.setNumber = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};


	/**
	 * optional int64 witness_id = 8;
	 * @return {number}
	 */
	proto.protocol.BlockHeader.raw.prototype.getWitnessId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {number} value */
	proto.protocol.BlockHeader.raw.prototype.setWitnessId = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * optional bytes witness_address = 9;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BlockHeader.raw.prototype.getWitnessAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 9, ""));
	};


	/**
	 * optional bytes witness_address = 9;
	 * This is a type-conversion wrapper around `getWitnessAddress()`
	 * @return {string}
	 */
	proto.protocol.BlockHeader.raw.prototype.getWitnessAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getWitnessAddress()));
	};


	/**
	 * optional bytes witness_address = 9;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getWitnessAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockHeader.raw.prototype.getWitnessAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getWitnessAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BlockHeader.raw.prototype.setWitnessAddress = function(value) {
	  googleProtobuf.Message.setField(this, 9, value);
	};


	/**
	 * optional int32 version = 10;
	 * @return {number}
	 */
	proto.protocol.BlockHeader.raw.prototype.getVersion = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, 0));
	};


	/** @param {number} value */
	proto.protocol.BlockHeader.raw.prototype.setVersion = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * optional raw raw_data = 1;
	 * @return {?proto.protocol.BlockHeader.raw}
	 */
	proto.protocol.BlockHeader.prototype.getRawData = function() {
	  return /** @type{?proto.protocol.BlockHeader.raw} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.BlockHeader.raw, 1));
	};


	/** @param {?proto.protocol.BlockHeader.raw|undefined} value */
	proto.protocol.BlockHeader.prototype.setRawData = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.BlockHeader.prototype.clearRawData = function() {
	  this.setRawData(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.BlockHeader.prototype.hasRawData = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional bytes witness_signature = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BlockHeader.prototype.getWitnessSignature = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes witness_signature = 2;
	 * This is a type-conversion wrapper around `getWitnessSignature()`
	 * @return {string}
	 */
	proto.protocol.BlockHeader.prototype.getWitnessSignature_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getWitnessSignature()));
	};


	/**
	 * optional bytes witness_signature = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getWitnessSignature()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockHeader.prototype.getWitnessSignature_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getWitnessSignature()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BlockHeader.prototype.setWitnessSignature = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Block = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Block.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Block, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Block.displayName = 'proto.protocol.Block';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Block.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Block.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Block.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Block} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Block.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    transactionsList: googleProtobuf.Message.toObjectList(msg.getTransactionsList(),
	    proto.protocol.Transaction.toObject, includeInstance),
	    blockHeader: (f = msg.getBlockHeader()) && proto.protocol.BlockHeader.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Block}
	 */
	proto.protocol.Block.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Block;
	  return proto.protocol.Block.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Block} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Block}
	 */
	proto.protocol.Block.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.Transaction;
	      reader.readMessage(value,proto.protocol.Transaction.deserializeBinaryFromReader);
	      msg.addTransactions(value);
	      break;
	    case 2:
	      var value = new proto.protocol.BlockHeader;
	      reader.readMessage(value,proto.protocol.BlockHeader.deserializeBinaryFromReader);
	      msg.setBlockHeader(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Block.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Block.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Block} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Block.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTransactionsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.Transaction.serializeBinaryToWriter
	    );
	  }
	  f = message.getBlockHeader();
	  if (f != null) {
	    writer.writeMessage(
	      2,
	      f,
	      proto.protocol.BlockHeader.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated Transaction transactions = 1;
	 * @return {!Array.<!proto.protocol.Transaction>}
	 */
	proto.protocol.Block.prototype.getTransactionsList = function() {
	  return /** @type{!Array.<!proto.protocol.Transaction>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Transaction, 1));
	};


	/** @param {!Array.<!proto.protocol.Transaction>} value */
	proto.protocol.Block.prototype.setTransactionsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.Transaction=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Transaction}
	 */
	proto.protocol.Block.prototype.addTransactions = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.Transaction, opt_index);
	};


	proto.protocol.Block.prototype.clearTransactionsList = function() {
	  this.setTransactionsList([]);
	};


	/**
	 * optional BlockHeader block_header = 2;
	 * @return {?proto.protocol.BlockHeader}
	 */
	proto.protocol.Block.prototype.getBlockHeader = function() {
	  return /** @type{?proto.protocol.BlockHeader} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.BlockHeader, 2));
	};


	/** @param {?proto.protocol.BlockHeader|undefined} value */
	proto.protocol.Block.prototype.setBlockHeader = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 2, value);
	};


	proto.protocol.Block.prototype.clearBlockHeader = function() {
	  this.setBlockHeader(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.Block.prototype.hasBlockHeader = function() {
	  return googleProtobuf.Message.getField(this, 2) != null;
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ChainInventory = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.ChainInventory.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.ChainInventory, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ChainInventory.displayName = 'proto.protocol.ChainInventory';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.ChainInventory.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.ChainInventory.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.ChainInventory.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.ChainInventory} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainInventory.toObject = function(includeInstance, msg) {
	  var obj = {
	    idsList: googleProtobuf.Message.toObjectList(msg.getIdsList(),
	    proto.protocol.ChainInventory.BlockId.toObject, includeInstance),
	    remainNum: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ChainInventory}
	 */
	proto.protocol.ChainInventory.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ChainInventory;
	  return proto.protocol.ChainInventory.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ChainInventory} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ChainInventory}
	 */
	proto.protocol.ChainInventory.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.ChainInventory.BlockId;
	      reader.readMessage(value,proto.protocol.ChainInventory.BlockId.deserializeBinaryFromReader);
	      msg.addIds(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setRemainNum(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ChainInventory.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ChainInventory.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ChainInventory} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainInventory.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.ChainInventory.BlockId.serializeBinaryToWriter
	    );
	  }
	  f = message.getRemainNum();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ChainInventory.BlockId = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ChainInventory.BlockId, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ChainInventory.BlockId.displayName = 'proto.protocol.ChainInventory.BlockId';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.ChainInventory.BlockId.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.ChainInventory.BlockId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.ChainInventory.BlockId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainInventory.BlockId.toObject = function(includeInstance, msg) {
	  var obj = {
	    hash: msg.getHash_asB64(),
	    number: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ChainInventory.BlockId}
	 */
	proto.protocol.ChainInventory.BlockId.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ChainInventory.BlockId;
	  return proto.protocol.ChainInventory.BlockId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ChainInventory.BlockId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ChainInventory.BlockId}
	 */
	proto.protocol.ChainInventory.BlockId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setHash(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ChainInventory.BlockId.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ChainInventory.BlockId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ChainInventory.BlockId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ChainInventory.BlockId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getHash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes hash = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ChainInventory.BlockId.prototype.getHash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes hash = 1;
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {string}
	 */
	proto.protocol.ChainInventory.BlockId.prototype.getHash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getHash()));
	};


	/**
	 * optional bytes hash = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ChainInventory.BlockId.prototype.getHash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getHash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ChainInventory.BlockId.prototype.setHash = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 number = 2;
	 * @return {number}
	 */
	proto.protocol.ChainInventory.BlockId.prototype.getNumber = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ChainInventory.BlockId.prototype.setNumber = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * repeated BlockId ids = 1;
	 * @return {!Array.<!proto.protocol.ChainInventory.BlockId>}
	 */
	proto.protocol.ChainInventory.prototype.getIdsList = function() {
	  return /** @type{!Array.<!proto.protocol.ChainInventory.BlockId>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.ChainInventory.BlockId, 1));
	};


	/** @param {!Array.<!proto.protocol.ChainInventory.BlockId>} value */
	proto.protocol.ChainInventory.prototype.setIdsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.ChainInventory.BlockId=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.ChainInventory.BlockId}
	 */
	proto.protocol.ChainInventory.prototype.addIds = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.ChainInventory.BlockId, opt_index);
	};


	proto.protocol.ChainInventory.prototype.clearIdsList = function() {
	  this.setIdsList([]);
	};


	/**
	 * optional int64 remain_num = 2;
	 * @return {number}
	 */
	proto.protocol.ChainInventory.prototype.getRemainNum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ChainInventory.prototype.setRemainNum = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BlockInventory = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.BlockInventory.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.BlockInventory, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BlockInventory.displayName = 'proto.protocol.BlockInventory';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.BlockInventory.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.BlockInventory.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.BlockInventory.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.BlockInventory} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockInventory.toObject = function(includeInstance, msg) {
	  var obj = {
	    idsList: googleProtobuf.Message.toObjectList(msg.getIdsList(),
	    proto.protocol.BlockInventory.BlockId.toObject, includeInstance),
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BlockInventory}
	 */
	proto.protocol.BlockInventory.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BlockInventory;
	  return proto.protocol.BlockInventory.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BlockInventory} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BlockInventory}
	 */
	proto.protocol.BlockInventory.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.BlockInventory.BlockId;
	      reader.readMessage(value,proto.protocol.BlockInventory.BlockId.deserializeBinaryFromReader);
	      msg.addIds(value);
	      break;
	    case 2:
	      var value = /** @type {!proto.protocol.BlockInventory.Type} */ (reader.readEnum());
	      msg.setType(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockInventory.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BlockInventory.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BlockInventory} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockInventory.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIdsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.BlockInventory.BlockId.serializeBinaryToWriter
	    );
	  }
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      2,
	      f
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.BlockInventory.Type = {
	  SYNC: 0,
	  ADVTISE: 1,
	  FETCH: 2
	};


	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BlockInventory.BlockId = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BlockInventory.BlockId, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BlockInventory.BlockId.displayName = 'proto.protocol.BlockInventory.BlockId';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.BlockInventory.BlockId.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.BlockInventory.BlockId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.BlockInventory.BlockId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockInventory.BlockId.toObject = function(includeInstance, msg) {
	  var obj = {
	    hash: msg.getHash_asB64(),
	    number: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BlockInventory.BlockId}
	 */
	proto.protocol.BlockInventory.BlockId.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BlockInventory.BlockId;
	  return proto.protocol.BlockInventory.BlockId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BlockInventory.BlockId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BlockInventory.BlockId}
	 */
	proto.protocol.BlockInventory.BlockId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setHash(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockInventory.BlockId.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BlockInventory.BlockId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BlockInventory.BlockId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BlockInventory.BlockId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getHash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes hash = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BlockInventory.BlockId.prototype.getHash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes hash = 1;
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {string}
	 */
	proto.protocol.BlockInventory.BlockId.prototype.getHash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getHash()));
	};


	/**
	 * optional bytes hash = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BlockInventory.BlockId.prototype.getHash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getHash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BlockInventory.BlockId.prototype.setHash = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 number = 2;
	 * @return {number}
	 */
	proto.protocol.BlockInventory.BlockId.prototype.getNumber = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.BlockInventory.BlockId.prototype.setNumber = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * repeated BlockId ids = 1;
	 * @return {!Array.<!proto.protocol.BlockInventory.BlockId>}
	 */
	proto.protocol.BlockInventory.prototype.getIdsList = function() {
	  return /** @type{!Array.<!proto.protocol.BlockInventory.BlockId>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.BlockInventory.BlockId, 1));
	};


	/** @param {!Array.<!proto.protocol.BlockInventory.BlockId>} value */
	proto.protocol.BlockInventory.prototype.setIdsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.BlockInventory.BlockId=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.BlockInventory.BlockId}
	 */
	proto.protocol.BlockInventory.prototype.addIds = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.BlockInventory.BlockId, opt_index);
	};


	proto.protocol.BlockInventory.prototype.clearIdsList = function() {
	  this.setIdsList([]);
	};


	/**
	 * optional Type type = 2;
	 * @return {!proto.protocol.BlockInventory.Type}
	 */
	proto.protocol.BlockInventory.prototype.getType = function() {
	  return /** @type {!proto.protocol.BlockInventory.Type} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {!proto.protocol.BlockInventory.Type} value */
	proto.protocol.BlockInventory.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Inventory = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Inventory.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Inventory, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Inventory.displayName = 'proto.protocol.Inventory';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Inventory.repeatedFields_ = [2];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Inventory.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Inventory.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Inventory} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Inventory.toObject = function(includeInstance, msg) {
	  var obj = {
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    idsList: msg.getIdsList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Inventory}
	 */
	proto.protocol.Inventory.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Inventory;
	  return proto.protocol.Inventory.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Inventory} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Inventory}
	 */
	proto.protocol.Inventory.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!proto.protocol.Inventory.InventoryType} */ (reader.readEnum());
	      msg.setType(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addIds(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Inventory.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Inventory.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Inventory} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Inventory.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      1,
	      f
	    );
	  }
	  f = message.getIdsList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.Inventory.InventoryType = {
	  TRX: 0,
	  BLOCK: 1
	};

	/**
	 * optional InventoryType type = 1;
	 * @return {!proto.protocol.Inventory.InventoryType}
	 */
	proto.protocol.Inventory.prototype.getType = function() {
	  return /** @type {!proto.protocol.Inventory.InventoryType} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {!proto.protocol.Inventory.InventoryType} value */
	proto.protocol.Inventory.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * repeated bytes ids = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.protocol.Inventory.prototype.getIdsList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (googleProtobuf.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes ids = 2;
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array.<string>}
	 */
	proto.protocol.Inventory.prototype.getIdsList_asB64 = function() {
	  return /** @type {!Array.<string>} */ (googleProtobuf.Message.bytesListAsB64(
	      this.getIdsList()));
	};


	/**
	 * repeated bytes ids = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIdsList()`
	 * @return {!Array.<!Uint8Array>}
	 */
	proto.protocol.Inventory.prototype.getIdsList_asU8 = function() {
	  return /** @type {!Array.<!Uint8Array>} */ (googleProtobuf.Message.bytesListAsU8(
	      this.getIdsList()));
	};


	/** @param {!(Array<!Uint8Array>|Array<string>)} value */
	proto.protocol.Inventory.prototype.setIdsList = function(value) {
	  googleProtobuf.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 */
	proto.protocol.Inventory.prototype.addIds = function(value, opt_index) {
	  googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	proto.protocol.Inventory.prototype.clearIdsList = function() {
	  this.setIdsList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.Items = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.Items.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.Items, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.Items.displayName = 'proto.protocol.Items';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.Items.repeatedFields_ = [2,3,4];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.Items.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.Items.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.Items} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Items.toObject = function(includeInstance, msg) {
	  var obj = {
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    blocksList: googleProtobuf.Message.toObjectList(msg.getBlocksList(),
	    proto.protocol.Block.toObject, includeInstance),
	    blockHeadersList: googleProtobuf.Message.toObjectList(msg.getBlockHeadersList(),
	    proto.protocol.BlockHeader.toObject, includeInstance),
	    transactionsList: googleProtobuf.Message.toObjectList(msg.getTransactionsList(),
	    proto.protocol.Transaction.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.Items}
	 */
	proto.protocol.Items.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.Items;
	  return proto.protocol.Items.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.Items} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.Items}
	 */
	proto.protocol.Items.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!proto.protocol.Items.ItemType} */ (reader.readEnum());
	      msg.setType(value);
	      break;
	    case 2:
	      var value = new proto.protocol.Block;
	      reader.readMessage(value,proto.protocol.Block.deserializeBinaryFromReader);
	      msg.addBlocks(value);
	      break;
	    case 3:
	      var value = new proto.protocol.BlockHeader;
	      reader.readMessage(value,proto.protocol.BlockHeader.deserializeBinaryFromReader);
	      msg.addBlockHeaders(value);
	      break;
	    case 4:
	      var value = new proto.protocol.Transaction;
	      reader.readMessage(value,proto.protocol.Transaction.deserializeBinaryFromReader);
	      msg.addTransactions(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.Items.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.Items.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.Items} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.Items.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      1,
	      f
	    );
	  }
	  f = message.getBlocksList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      2,
	      f,
	      proto.protocol.Block.serializeBinaryToWriter
	    );
	  }
	  f = message.getBlockHeadersList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      3,
	      f,
	      proto.protocol.BlockHeader.serializeBinaryToWriter
	    );
	  }
	  f = message.getTransactionsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      4,
	      f,
	      proto.protocol.Transaction.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.Items.ItemType = {
	  ERR: 0,
	  TRX: 1,
	  BLOCK: 2,
	  BLOCKHEADER: 3
	};

	/**
	 * optional ItemType type = 1;
	 * @return {!proto.protocol.Items.ItemType}
	 */
	proto.protocol.Items.prototype.getType = function() {
	  return /** @type {!proto.protocol.Items.ItemType} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {!proto.protocol.Items.ItemType} value */
	proto.protocol.Items.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * repeated Block blocks = 2;
	 * @return {!Array.<!proto.protocol.Block>}
	 */
	proto.protocol.Items.prototype.getBlocksList = function() {
	  return /** @type{!Array.<!proto.protocol.Block>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Block, 2));
	};


	/** @param {!Array.<!proto.protocol.Block>} value */
	proto.protocol.Items.prototype.setBlocksList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
	};


	/**
	 * @param {!proto.protocol.Block=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Block}
	 */
	proto.protocol.Items.prototype.addBlocks = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.Block, opt_index);
	};


	proto.protocol.Items.prototype.clearBlocksList = function() {
	  this.setBlocksList([]);
	};


	/**
	 * repeated BlockHeader block_headers = 3;
	 * @return {!Array.<!proto.protocol.BlockHeader>}
	 */
	proto.protocol.Items.prototype.getBlockHeadersList = function() {
	  return /** @type{!Array.<!proto.protocol.BlockHeader>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.BlockHeader, 3));
	};


	/** @param {!Array.<!proto.protocol.BlockHeader>} value */
	proto.protocol.Items.prototype.setBlockHeadersList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 3, value);
	};


	/**
	 * @param {!proto.protocol.BlockHeader=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.BlockHeader}
	 */
	proto.protocol.Items.prototype.addBlockHeaders = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protocol.BlockHeader, opt_index);
	};


	proto.protocol.Items.prototype.clearBlockHeadersList = function() {
	  this.setBlockHeadersList([]);
	};


	/**
	 * repeated Transaction transactions = 4;
	 * @return {!Array.<!proto.protocol.Transaction>}
	 */
	proto.protocol.Items.prototype.getTransactionsList = function() {
	  return /** @type{!Array.<!proto.protocol.Transaction>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.Transaction, 4));
	};


	/** @param {!Array.<!proto.protocol.Transaction>} value */
	proto.protocol.Items.prototype.setTransactionsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 4, value);
	};


	/**
	 * @param {!proto.protocol.Transaction=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.Transaction}
	 */
	proto.protocol.Items.prototype.addTransactions = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.Transaction, opt_index);
	};


	proto.protocol.Items.prototype.clearTransactionsList = function() {
	  this.setTransactionsList([]);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.DynamicProperties = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.DynamicProperties, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.DynamicProperties.displayName = 'proto.protocol.DynamicProperties';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.DynamicProperties.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.DynamicProperties.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.DynamicProperties} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.DynamicProperties.toObject = function(includeInstance, msg) {
	  var obj = {
	    lastSolidityBlockNum: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.DynamicProperties}
	 */
	proto.protocol.DynamicProperties.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.DynamicProperties;
	  return proto.protocol.DynamicProperties.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.DynamicProperties} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.DynamicProperties}
	 */
	proto.protocol.DynamicProperties.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setLastSolidityBlockNum(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.DynamicProperties.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.DynamicProperties.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.DynamicProperties} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.DynamicProperties.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getLastSolidityBlockNum();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int64 last_solidity_block_num = 1;
	 * @return {number}
	 */
	proto.protocol.DynamicProperties.prototype.getLastSolidityBlockNum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.DynamicProperties.prototype.setLastSolidityBlockNum = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.DisconnectMessage = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.DisconnectMessage, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.DisconnectMessage.displayName = 'proto.protocol.DisconnectMessage';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.DisconnectMessage.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.DisconnectMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.DisconnectMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.DisconnectMessage.toObject = function(includeInstance, msg) {
	  var obj = {
	    reason: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.DisconnectMessage}
	 */
	proto.protocol.DisconnectMessage.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.DisconnectMessage;
	  return proto.protocol.DisconnectMessage.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.DisconnectMessage} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.DisconnectMessage}
	 */
	proto.protocol.DisconnectMessage.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!proto.protocol.ReasonCode} */ (reader.readEnum());
	      msg.setReason(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.DisconnectMessage.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.DisconnectMessage.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.DisconnectMessage} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.DisconnectMessage.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getReason();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional ReasonCode reason = 1;
	 * @return {!proto.protocol.ReasonCode}
	 */
	proto.protocol.DisconnectMessage.prototype.getReason = function() {
	  return /** @type {!proto.protocol.ReasonCode} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {!proto.protocol.ReasonCode} value */
	proto.protocol.DisconnectMessage.prototype.setReason = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.HelloMessage = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.HelloMessage, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.HelloMessage.displayName = 'proto.protocol.HelloMessage';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.HelloMessage.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.HelloMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.HelloMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.HelloMessage.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    from: (f = msg.getFrom()) && Discover_pb.Endpoint.toObject(includeInstance, f),
	    version: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	    timestamp: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	    genesisblockid: (f = msg.getGenesisblockid()) && proto.protocol.HelloMessage.BlockId.toObject(includeInstance, f),
	    solidblockid: (f = msg.getSolidblockid()) && proto.protocol.HelloMessage.BlockId.toObject(includeInstance, f),
	    headblockid: (f = msg.getHeadblockid()) && proto.protocol.HelloMessage.BlockId.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.HelloMessage}
	 */
	proto.protocol.HelloMessage.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.HelloMessage;
	  return proto.protocol.HelloMessage.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.HelloMessage} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.HelloMessage}
	 */
	proto.protocol.HelloMessage.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new Discover_pb.Endpoint;
	      reader.readMessage(value,Discover_pb.Endpoint.deserializeBinaryFromReader);
	      msg.setFrom(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setVersion(value);
	      break;
	    case 3:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setTimestamp(value);
	      break;
	    case 4:
	      var value = new proto.protocol.HelloMessage.BlockId;
	      reader.readMessage(value,proto.protocol.HelloMessage.BlockId.deserializeBinaryFromReader);
	      msg.setGenesisblockid(value);
	      break;
	    case 5:
	      var value = new proto.protocol.HelloMessage.BlockId;
	      reader.readMessage(value,proto.protocol.HelloMessage.BlockId.deserializeBinaryFromReader);
	      msg.setSolidblockid(value);
	      break;
	    case 6:
	      var value = new proto.protocol.HelloMessage.BlockId;
	      reader.readMessage(value,proto.protocol.HelloMessage.BlockId.deserializeBinaryFromReader);
	      msg.setHeadblockid(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.HelloMessage.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.HelloMessage.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.HelloMessage} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.HelloMessage.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrom();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      Discover_pb.Endpoint.serializeBinaryToWriter
	    );
	  }
	  f = message.getVersion();
	  if (f !== 0) {
	    writer.writeInt32(
	      2,
	      f
	    );
	  }
	  f = message.getTimestamp();
	  if (f !== 0) {
	    writer.writeInt64(
	      3,
	      f
	    );
	  }
	  f = message.getGenesisblockid();
	  if (f != null) {
	    writer.writeMessage(
	      4,
	      f,
	      proto.protocol.HelloMessage.BlockId.serializeBinaryToWriter
	    );
	  }
	  f = message.getSolidblockid();
	  if (f != null) {
	    writer.writeMessage(
	      5,
	      f,
	      proto.protocol.HelloMessage.BlockId.serializeBinaryToWriter
	    );
	  }
	  f = message.getHeadblockid();
	  if (f != null) {
	    writer.writeMessage(
	      6,
	      f,
	      proto.protocol.HelloMessage.BlockId.serializeBinaryToWriter
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.HelloMessage.BlockId = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.HelloMessage.BlockId, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.HelloMessage.BlockId.displayName = 'proto.protocol.HelloMessage.BlockId';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.HelloMessage.BlockId.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.HelloMessage.BlockId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.HelloMessage.BlockId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.HelloMessage.BlockId.toObject = function(includeInstance, msg) {
	  var obj = {
	    hash: msg.getHash_asB64(),
	    number: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.HelloMessage.BlockId}
	 */
	proto.protocol.HelloMessage.BlockId.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.HelloMessage.BlockId;
	  return proto.protocol.HelloMessage.BlockId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.HelloMessage.BlockId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.HelloMessage.BlockId}
	 */
	proto.protocol.HelloMessage.BlockId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setHash(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.HelloMessage.BlockId.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.HelloMessage.BlockId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.HelloMessage.BlockId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.HelloMessage.BlockId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getHash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes hash = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.HelloMessage.BlockId.prototype.getHash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes hash = 1;
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {string}
	 */
	proto.protocol.HelloMessage.BlockId.prototype.getHash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getHash()));
	};


	/**
	 * optional bytes hash = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.HelloMessage.BlockId.prototype.getHash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getHash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.HelloMessage.BlockId.prototype.setHash = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 number = 2;
	 * @return {number}
	 */
	proto.protocol.HelloMessage.BlockId.prototype.getNumber = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.HelloMessage.BlockId.prototype.setNumber = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional Endpoint from = 1;
	 * @return {?proto.protocol.Endpoint}
	 */
	proto.protocol.HelloMessage.prototype.getFrom = function() {
	  return /** @type{?proto.protocol.Endpoint} */ (
	    googleProtobuf.Message.getWrapperField(this, Discover_pb.Endpoint, 1));
	};


	/** @param {?proto.protocol.Endpoint|undefined} value */
	proto.protocol.HelloMessage.prototype.setFrom = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 1, value);
	};


	proto.protocol.HelloMessage.prototype.clearFrom = function() {
	  this.setFrom(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.HelloMessage.prototype.hasFrom = function() {
	  return googleProtobuf.Message.getField(this, 1) != null;
	};


	/**
	 * optional int32 version = 2;
	 * @return {number}
	 */
	proto.protocol.HelloMessage.prototype.getVersion = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.HelloMessage.prototype.setVersion = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 timestamp = 3;
	 * @return {number}
	 */
	proto.protocol.HelloMessage.prototype.getTimestamp = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.HelloMessage.prototype.setTimestamp = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional BlockId genesisBlockId = 4;
	 * @return {?proto.protocol.HelloMessage.BlockId}
	 */
	proto.protocol.HelloMessage.prototype.getGenesisblockid = function() {
	  return /** @type{?proto.protocol.HelloMessage.BlockId} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.HelloMessage.BlockId, 4));
	};


	/** @param {?proto.protocol.HelloMessage.BlockId|undefined} value */
	proto.protocol.HelloMessage.prototype.setGenesisblockid = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 4, value);
	};


	proto.protocol.HelloMessage.prototype.clearGenesisblockid = function() {
	  this.setGenesisblockid(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.HelloMessage.prototype.hasGenesisblockid = function() {
	  return googleProtobuf.Message.getField(this, 4) != null;
	};


	/**
	 * optional BlockId solidBlockId = 5;
	 * @return {?proto.protocol.HelloMessage.BlockId}
	 */
	proto.protocol.HelloMessage.prototype.getSolidblockid = function() {
	  return /** @type{?proto.protocol.HelloMessage.BlockId} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.HelloMessage.BlockId, 5));
	};


	/** @param {?proto.protocol.HelloMessage.BlockId|undefined} value */
	proto.protocol.HelloMessage.prototype.setSolidblockid = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 5, value);
	};


	proto.protocol.HelloMessage.prototype.clearSolidblockid = function() {
	  this.setSolidblockid(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.HelloMessage.prototype.hasSolidblockid = function() {
	  return googleProtobuf.Message.getField(this, 5) != null;
	};


	/**
	 * optional BlockId headBlockId = 6;
	 * @return {?proto.protocol.HelloMessage.BlockId}
	 */
	proto.protocol.HelloMessage.prototype.getHeadblockid = function() {
	  return /** @type{?proto.protocol.HelloMessage.BlockId} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.HelloMessage.BlockId, 6));
	};


	/** @param {?proto.protocol.HelloMessage.BlockId|undefined} value */
	proto.protocol.HelloMessage.prototype.setHeadblockid = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 6, value);
	};


	proto.protocol.HelloMessage.prototype.clearHeadblockid = function() {
	  this.setHeadblockid(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.HelloMessage.prototype.hasHeadblockid = function() {
	  return googleProtobuf.Message.getField(this, 6) != null;
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.SmartContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.SmartContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.SmartContract.displayName = 'proto.protocol.SmartContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.SmartContract.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.SmartContract.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.SmartContract} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    originAddress: msg.getOriginAddress_asB64(),
	    contractAddress: msg.getContractAddress_asB64(),
	    abi: (f = msg.getAbi()) && proto.protocol.SmartContract.ABI.toObject(includeInstance, f),
	    bytecode: msg.getBytecode_asB64(),
	    callValue: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
	    consumeUserResourcePercent: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
	    name: googleProtobuf.Message.getFieldWithDefault(msg, 7, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.SmartContract}
	 */
	proto.protocol.SmartContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.SmartContract;
	  return proto.protocol.SmartContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.SmartContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.SmartContract}
	 */
	proto.protocol.SmartContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setOriginAddress(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setContractAddress(value);
	      break;
	    case 3:
	      var value = new proto.protocol.SmartContract.ABI;
	      reader.readMessage(value,proto.protocol.SmartContract.ABI.deserializeBinaryFromReader);
	      msg.setAbi(value);
	      break;
	    case 4:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setBytecode(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setCallValue(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setConsumeUserResourcePercent(value);
	      break;
	    case 7:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.SmartContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.SmartContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOriginAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getContractAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getAbi();
	  if (f != null) {
	    writer.writeMessage(
	      3,
	      f,
	      proto.protocol.SmartContract.ABI.serializeBinaryToWriter
	    );
	  }
	  f = message.getBytecode_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      4,
	      f
	    );
	  }
	  f = message.getCallValue();
	  if (f !== 0) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	  f = message.getConsumeUserResourcePercent();
	  if (f !== 0) {
	    writer.writeInt64(
	      6,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      7,
	      f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.SmartContract.ABI = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.SmartContract.ABI.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.SmartContract.ABI, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.SmartContract.ABI.displayName = 'proto.protocol.SmartContract.ABI';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.SmartContract.ABI.repeatedFields_ = [1];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.SmartContract.ABI.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.SmartContract.ABI.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.SmartContract.ABI} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.ABI.toObject = function(includeInstance, msg) {
	  var obj = {
	    entrysList: googleProtobuf.Message.toObjectList(msg.getEntrysList(),
	    proto.protocol.SmartContract.ABI.Entry.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.SmartContract.ABI}
	 */
	proto.protocol.SmartContract.ABI.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.SmartContract.ABI;
	  return proto.protocol.SmartContract.ABI.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.SmartContract.ABI} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.SmartContract.ABI}
	 */
	proto.protocol.SmartContract.ABI.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.protocol.SmartContract.ABI.Entry;
	      reader.readMessage(value,proto.protocol.SmartContract.ABI.Entry.deserializeBinaryFromReader);
	      msg.addEntrys(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.ABI.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.SmartContract.ABI.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.SmartContract.ABI} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.ABI.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getEntrysList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.protocol.SmartContract.ABI.Entry.serializeBinaryToWriter
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.SmartContract.ABI.Entry = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.SmartContract.ABI.Entry.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.SmartContract.ABI.Entry, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.SmartContract.ABI.Entry.displayName = 'proto.protocol.SmartContract.ABI.Entry';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.SmartContract.ABI.Entry.repeatedFields_ = [4,5];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.SmartContract.ABI.Entry.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.SmartContract.ABI.Entry} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.ABI.Entry.toObject = function(includeInstance, msg) {
	  var obj = {
	    anonymous: googleProtobuf.Message.getFieldWithDefault(msg, 1, false),
	    constant: googleProtobuf.Message.getFieldWithDefault(msg, 2, false),
	    name: googleProtobuf.Message.getFieldWithDefault(msg, 3, ""),
	    inputsList: googleProtobuf.Message.toObjectList(msg.getInputsList(),
	    proto.protocol.SmartContract.ABI.Entry.Param.toObject, includeInstance),
	    outputsList: googleProtobuf.Message.toObjectList(msg.getOutputsList(),
	    proto.protocol.SmartContract.ABI.Entry.Param.toObject, includeInstance),
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
	    payable: googleProtobuf.Message.getFieldWithDefault(msg, 7, false),
	    statemutability: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.SmartContract.ABI.Entry}
	 */
	proto.protocol.SmartContract.ABI.Entry.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.SmartContract.ABI.Entry;
	  return proto.protocol.SmartContract.ABI.Entry.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.SmartContract.ABI.Entry} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.SmartContract.ABI.Entry}
	 */
	proto.protocol.SmartContract.ABI.Entry.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setAnonymous(value);
	      break;
	    case 2:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setConstant(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = new proto.protocol.SmartContract.ABI.Entry.Param;
	      reader.readMessage(value,proto.protocol.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader);
	      msg.addInputs(value);
	      break;
	    case 5:
	      var value = new proto.protocol.SmartContract.ABI.Entry.Param;
	      reader.readMessage(value,proto.protocol.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader);
	      msg.addOutputs(value);
	      break;
	    case 6:
	      var value = /** @type {!proto.protocol.SmartContract.ABI.Entry.EntryType} */ (reader.readEnum());
	      msg.setType(value);
	      break;
	    case 7:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setPayable(value);
	      break;
	    case 8:
	      var value = /** @type {!proto.protocol.SmartContract.ABI.Entry.StateMutabilityType} */ (reader.readEnum());
	      msg.setStatemutability(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.SmartContract.ABI.Entry.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.SmartContract.ABI.Entry} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.ABI.Entry.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAnonymous();
	  if (f) {
	    writer.writeBool(
	      1,
	      f
	    );
	  }
	  f = message.getConstant();
	  if (f) {
	    writer.writeBool(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getInputsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      4,
	      f,
	      proto.protocol.SmartContract.ABI.Entry.Param.serializeBinaryToWriter
	    );
	  }
	  f = message.getOutputsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      5,
	      f,
	      proto.protocol.SmartContract.ABI.Entry.Param.serializeBinaryToWriter
	    );
	  }
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      6,
	      f
	    );
	  }
	  f = message.getPayable();
	  if (f) {
	    writer.writeBool(
	      7,
	      f
	    );
	  }
	  f = message.getStatemutability();
	  if (f !== 0.0) {
	    writer.writeEnum(
	      8,
	      f
	    );
	  }
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.SmartContract.ABI.Entry.EntryType = {
	  UNKNOWNENTRYTYPE: 0,
	  CONSTRUCTOR: 1,
	  FUNCTION: 2,
	  EVENT: 3,
	  FALLBACK: 4
	};

	/**
	 * @enum {number}
	 */
	proto.protocol.SmartContract.ABI.Entry.StateMutabilityType = {
	  UNKNOWNMUTABILITYTYPE: 0,
	  PURE: 1,
	  VIEW: 2,
	  NONPAYABLE: 3,
	  PAYABLE: 4
	};


	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.SmartContract.ABI.Entry.Param = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.SmartContract.ABI.Entry.Param, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.SmartContract.ABI.Entry.Param.displayName = 'proto.protocol.SmartContract.ABI.Entry.Param';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.SmartContract.ABI.Entry.Param.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.SmartContract.ABI.Entry.Param} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.toObject = function(includeInstance, msg) {
	  var obj = {
	    indexed: googleProtobuf.Message.getFieldWithDefault(msg, 1, false),
	    name: googleProtobuf.Message.getFieldWithDefault(msg, 2, ""),
	    type: googleProtobuf.Message.getFieldWithDefault(msg, 3, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.SmartContract.ABI.Entry.Param}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.SmartContract.ABI.Entry.Param;
	  return proto.protocol.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.SmartContract.ABI.Entry.Param} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.SmartContract.ABI.Entry.Param}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIndexed(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setType(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.SmartContract.ABI.Entry.Param.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.SmartContract.ABI.Entry.Param} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getIndexed();
	  if (f) {
	    writer.writeBool(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getType();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bool indexed = 1;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.getIndexed = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, false));
	};


	/** @param {boolean} value */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.setIndexed = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.getName = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/** @param {string} value */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.setName = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional string type = 3;
	 * @return {string}
	 */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.getType = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/** @param {string} value */
	proto.protocol.SmartContract.ABI.Entry.Param.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bool anonymous = 1;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getAnonymous = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, false));
	};


	/** @param {boolean} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setAnonymous = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bool constant = 2;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getConstant = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, false));
	};


	/** @param {boolean} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setConstant = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getName = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/** @param {string} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setName = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * repeated Param inputs = 4;
	 * @return {!Array.<!proto.protocol.SmartContract.ABI.Entry.Param>}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getInputsList = function() {
	  return /** @type{!Array.<!proto.protocol.SmartContract.ABI.Entry.Param>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.SmartContract.ABI.Entry.Param, 4));
	};


	/** @param {!Array.<!proto.protocol.SmartContract.ABI.Entry.Param>} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setInputsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 4, value);
	};


	/**
	 * @param {!proto.protocol.SmartContract.ABI.Entry.Param=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.SmartContract.ABI.Entry.Param}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.addInputs = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.SmartContract.ABI.Entry.Param, opt_index);
	};


	proto.protocol.SmartContract.ABI.Entry.prototype.clearInputsList = function() {
	  this.setInputsList([]);
	};


	/**
	 * repeated Param outputs = 5;
	 * @return {!Array.<!proto.protocol.SmartContract.ABI.Entry.Param>}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getOutputsList = function() {
	  return /** @type{!Array.<!proto.protocol.SmartContract.ABI.Entry.Param>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.SmartContract.ABI.Entry.Param, 5));
	};


	/** @param {!Array.<!proto.protocol.SmartContract.ABI.Entry.Param>} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setOutputsList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.protocol.SmartContract.ABI.Entry.Param=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.SmartContract.ABI.Entry.Param}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.addOutputs = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.protocol.SmartContract.ABI.Entry.Param, opt_index);
	};


	proto.protocol.SmartContract.ABI.Entry.prototype.clearOutputsList = function() {
	  this.setOutputsList([]);
	};


	/**
	 * optional EntryType type = 6;
	 * @return {!proto.protocol.SmartContract.ABI.Entry.EntryType}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getType = function() {
	  return /** @type {!proto.protocol.SmartContract.ABI.Entry.EntryType} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {!proto.protocol.SmartContract.ABI.Entry.EntryType} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional bool payable = 7;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getPayable = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, false));
	};


	/** @param {boolean} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setPayable = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};


	/**
	 * optional StateMutabilityType stateMutability = 8;
	 * @return {!proto.protocol.SmartContract.ABI.Entry.StateMutabilityType}
	 */
	proto.protocol.SmartContract.ABI.Entry.prototype.getStatemutability = function() {
	  return /** @type {!proto.protocol.SmartContract.ABI.Entry.StateMutabilityType} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {!proto.protocol.SmartContract.ABI.Entry.StateMutabilityType} value */
	proto.protocol.SmartContract.ABI.Entry.prototype.setStatemutability = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * repeated Entry entrys = 1;
	 * @return {!Array.<!proto.protocol.SmartContract.ABI.Entry>}
	 */
	proto.protocol.SmartContract.ABI.prototype.getEntrysList = function() {
	  return /** @type{!Array.<!proto.protocol.SmartContract.ABI.Entry>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.SmartContract.ABI.Entry, 1));
	};


	/** @param {!Array.<!proto.protocol.SmartContract.ABI.Entry>} value */
	proto.protocol.SmartContract.ABI.prototype.setEntrysList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.protocol.SmartContract.ABI.Entry=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.SmartContract.ABI.Entry}
	 */
	proto.protocol.SmartContract.ABI.prototype.addEntrys = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.SmartContract.ABI.Entry, opt_index);
	};


	proto.protocol.SmartContract.ABI.prototype.clearEntrysList = function() {
	  this.setEntrysList([]);
	};


	/**
	 * optional bytes origin_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.SmartContract.prototype.getOriginAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes origin_address = 1;
	 * This is a type-conversion wrapper around `getOriginAddress()`
	 * @return {string}
	 */
	proto.protocol.SmartContract.prototype.getOriginAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOriginAddress()));
	};


	/**
	 * optional bytes origin_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOriginAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.prototype.getOriginAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOriginAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.SmartContract.prototype.setOriginAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes contract_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.SmartContract.prototype.getContractAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes contract_address = 2;
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {string}
	 */
	proto.protocol.SmartContract.prototype.getContractAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getContractAddress()));
	};


	/**
	 * optional bytes contract_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.prototype.getContractAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getContractAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.SmartContract.prototype.setContractAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional ABI abi = 3;
	 * @return {?proto.protocol.SmartContract.ABI}
	 */
	proto.protocol.SmartContract.prototype.getAbi = function() {
	  return /** @type{?proto.protocol.SmartContract.ABI} */ (
	    googleProtobuf.Message.getWrapperField(this, proto.protocol.SmartContract.ABI, 3));
	};


	/** @param {?proto.protocol.SmartContract.ABI|undefined} value */
	proto.protocol.SmartContract.prototype.setAbi = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 3, value);
	};


	proto.protocol.SmartContract.prototype.clearAbi = function() {
	  this.setAbi(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.SmartContract.prototype.hasAbi = function() {
	  return googleProtobuf.Message.getField(this, 3) != null;
	};


	/**
	 * optional bytes bytecode = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.SmartContract.prototype.getBytecode = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes bytecode = 4;
	 * This is a type-conversion wrapper around `getBytecode()`
	 * @return {string}
	 */
	proto.protocol.SmartContract.prototype.getBytecode_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getBytecode()));
	};


	/**
	 * optional bytes bytecode = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getBytecode()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.SmartContract.prototype.getBytecode_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getBytecode()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.SmartContract.prototype.setBytecode = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 call_value = 5;
	 * @return {number}
	 */
	proto.protocol.SmartContract.prototype.getCallValue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.SmartContract.prototype.setCallValue = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * optional int64 consume_user_resource_percent = 6;
	 * @return {number}
	 */
	proto.protocol.SmartContract.prototype.getConsumeUserResourcePercent = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {number} value */
	proto.protocol.SmartContract.prototype.setConsumeUserResourcePercent = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional string name = 7;
	 * @return {string}
	 */
	proto.protocol.SmartContract.prototype.getName = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, ""));
	};


	/** @param {string} value */
	proto.protocol.SmartContract.prototype.setName = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.InternalTransaction = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.InternalTransaction.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.InternalTransaction, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.InternalTransaction.displayName = 'proto.protocol.InternalTransaction';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.InternalTransaction.repeatedFields_ = [4];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.InternalTransaction.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.InternalTransaction.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.InternalTransaction} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.InternalTransaction.toObject = function(includeInstance, msg) {
	  var obj = {
	    hash: msg.getHash_asB64(),
	    callerAddress: msg.getCallerAddress_asB64(),
	    transfertoAddress: msg.getTransfertoAddress_asB64(),
	    callvalueinfoList: googleProtobuf.Message.toObjectList(msg.getCallvalueinfoList(),
	    proto.protocol.InternalTransaction.CallValueInfo.toObject, includeInstance),
	    note: msg.getNote_asB64(),
	    rejected: googleProtobuf.Message.getFieldWithDefault(msg, 6, false)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.InternalTransaction}
	 */
	proto.protocol.InternalTransaction.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.InternalTransaction;
	  return proto.protocol.InternalTransaction.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.InternalTransaction} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.InternalTransaction}
	 */
	proto.protocol.InternalTransaction.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setHash(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setCallerAddress(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTransfertoAddress(value);
	      break;
	    case 4:
	      var value = new proto.protocol.InternalTransaction.CallValueInfo;
	      reader.readMessage(value,proto.protocol.InternalTransaction.CallValueInfo.deserializeBinaryFromReader);
	      msg.addCallvalueinfo(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setNote(value);
	      break;
	    case 6:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setRejected(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.InternalTransaction.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.InternalTransaction} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.InternalTransaction.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getHash_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getCallerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getTransfertoAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getCallvalueinfoList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      4,
	      f,
	      proto.protocol.InternalTransaction.CallValueInfo.serializeBinaryToWriter
	    );
	  }
	  f = message.getNote_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      5,
	      f
	    );
	  }
	  f = message.getRejected();
	  if (f) {
	    writer.writeBool(
	      6,
	      f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.InternalTransaction.CallValueInfo = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.InternalTransaction.CallValueInfo, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.InternalTransaction.CallValueInfo.displayName = 'proto.protocol.InternalTransaction.CallValueInfo';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.toObject = function(opt_includeInstance) {
	  return proto.protocol.InternalTransaction.CallValueInfo.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.protocol.InternalTransaction.CallValueInfo} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.InternalTransaction.CallValueInfo.toObject = function(includeInstance, msg) {
	  var obj = {
	    callvalue: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	    tokenname: msg.getTokenname_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.InternalTransaction.CallValueInfo}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.InternalTransaction.CallValueInfo;
	  return proto.protocol.InternalTransaction.CallValueInfo.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.InternalTransaction.CallValueInfo} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.InternalTransaction.CallValueInfo}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setCallvalue(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setTokenname(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.InternalTransaction.CallValueInfo.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.InternalTransaction.CallValueInfo} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.InternalTransaction.CallValueInfo.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getCallvalue();
	  if (f !== 0) {
	    writer.writeInt64(
	      1,
	      f
	    );
	  }
	  f = message.getTokenname_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional int64 callValue = 1;
	 * @return {number}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.getCallvalue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.setCallvalue = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes tokenName = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.getTokenname = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes tokenName = 2;
	 * This is a type-conversion wrapper around `getTokenname()`
	 * @return {string}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.getTokenname_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTokenname()));
	};


	/**
	 * optional bytes tokenName = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTokenname()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.getTokenname_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTokenname()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.InternalTransaction.CallValueInfo.prototype.setTokenname = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes hash = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.InternalTransaction.prototype.getHash = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes hash = 1;
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {string}
	 */
	proto.protocol.InternalTransaction.prototype.getHash_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getHash()));
	};


	/**
	 * optional bytes hash = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getHash()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.prototype.getHash_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getHash()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.InternalTransaction.prototype.setHash = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes caller_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.InternalTransaction.prototype.getCallerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes caller_address = 2;
	 * This is a type-conversion wrapper around `getCallerAddress()`
	 * @return {string}
	 */
	proto.protocol.InternalTransaction.prototype.getCallerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getCallerAddress()));
	};


	/**
	 * optional bytes caller_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getCallerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.prototype.getCallerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getCallerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.InternalTransaction.prototype.setCallerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes transferTo_address = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.InternalTransaction.prototype.getTransfertoAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes transferTo_address = 3;
	 * This is a type-conversion wrapper around `getTransfertoAddress()`
	 * @return {string}
	 */
	proto.protocol.InternalTransaction.prototype.getTransfertoAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTransfertoAddress()));
	};


	/**
	 * optional bytes transferTo_address = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTransfertoAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.prototype.getTransfertoAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTransfertoAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.InternalTransaction.prototype.setTransfertoAddress = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * repeated CallValueInfo callValueInfo = 4;
	 * @return {!Array.<!proto.protocol.InternalTransaction.CallValueInfo>}
	 */
	proto.protocol.InternalTransaction.prototype.getCallvalueinfoList = function() {
	  return /** @type{!Array.<!proto.protocol.InternalTransaction.CallValueInfo>} */ (
	    googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.InternalTransaction.CallValueInfo, 4));
	};


	/** @param {!Array.<!proto.protocol.InternalTransaction.CallValueInfo>} value */
	proto.protocol.InternalTransaction.prototype.setCallvalueinfoList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 4, value);
	};


	/**
	 * @param {!proto.protocol.InternalTransaction.CallValueInfo=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.InternalTransaction.CallValueInfo}
	 */
	proto.protocol.InternalTransaction.prototype.addCallvalueinfo = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protocol.InternalTransaction.CallValueInfo, opt_index);
	};


	proto.protocol.InternalTransaction.prototype.clearCallvalueinfoList = function() {
	  this.setCallvalueinfoList([]);
	};


	/**
	 * optional bytes note = 5;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.InternalTransaction.prototype.getNote = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * optional bytes note = 5;
	 * This is a type-conversion wrapper around `getNote()`
	 * @return {string}
	 */
	proto.protocol.InternalTransaction.prototype.getNote_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getNote()));
	};


	/**
	 * optional bytes note = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getNote()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.InternalTransaction.prototype.getNote_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getNote()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.InternalTransaction.prototype.setNote = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * optional bool rejected = 6;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.InternalTransaction.prototype.getRejected = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, false));
	};


	/** @param {boolean} value */
	proto.protocol.InternalTransaction.prototype.setRejected = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.AccountType = {
	  NORMAL: 0,
	  ASSETISSUE: 1,
	  CONTRACT: 2
	};

	/**
	 * @enum {number}
	 */
	proto.protocol.ReasonCode = {
	  REQUESTED: 0,
	  BAD_PROTOCOL: 2,
	  TOO_MANY_PEERS: 4,
	  DUPLICATE_PEER: 5,
	  INCOMPATIBLE_PROTOCOL: 6,
	  NULL_IDENTITY: 7,
	  PEER_QUITING: 8,
	  UNEXPECTED_IDENTITY: 9,
	  LOCAL_IDENTITY: 10,
	  PING_TIMEOUT: 11,
	  USER_REASON: 16,
	  RESET: 17,
	  SYNC_FAIL: 18,
	  FETCH_FAIL: 19,
	  BAD_TX: 20,
	  BAD_BLOCK: 21,
	  FORKED: 22,
	  UNLINKABLE: 23,
	  INCOMPATIBLE_VERSION: 24,
	  INCOMPATIBLE_CHAIN: 25,
	  TIME_OUT: 32,
	  CONNECT_FAIL: 33,
	  TOO_MANY_PEERS_WITH_SAME_IP: 34,
	  UNKNOWN: 255
	};

	goog.object.extend(exports, proto.protocol);
	});

	var Contract_pb = createCommonjsModule(function (module, exports) {
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!


	var goog = googleProtobuf;
	var global = Function('return this')();


	goog.exportSymbol('proto.protocol.AccountCreateContract', null, global);
	goog.exportSymbol('proto.protocol.AccountUpdateContract', null, global);
	goog.exportSymbol('proto.protocol.AssetIssueContract', null, global);
	goog.exportSymbol('proto.protocol.AssetIssueContract.FrozenSupply', null, global);
	goog.exportSymbol('proto.protocol.BuyStorageBytesContract', null, global);
	goog.exportSymbol('proto.protocol.BuyStorageContract', null, global);
	goog.exportSymbol('proto.protocol.CreateSmartContract', null, global);
	goog.exportSymbol('proto.protocol.ExchangeCreateContract', null, global);
	goog.exportSymbol('proto.protocol.ExchangeInjectContract', null, global);
	goog.exportSymbol('proto.protocol.ExchangeTransactionContract', null, global);
	goog.exportSymbol('proto.protocol.ExchangeWithdrawContract', null, global);
	goog.exportSymbol('proto.protocol.FreezeBalanceContract', null, global);
	goog.exportSymbol('proto.protocol.ParticipateAssetIssueContract', null, global);
	goog.exportSymbol('proto.protocol.ProposalApproveContract', null, global);
	goog.exportSymbol('proto.protocol.ProposalCreateContract', null, global);
	goog.exportSymbol('proto.protocol.ProposalDeleteContract', null, global);
	goog.exportSymbol('proto.protocol.ResourceCode', null, global);
	goog.exportSymbol('proto.protocol.SellStorageContract', null, global);
	goog.exportSymbol('proto.protocol.SetAccountIdContract', null, global);
	goog.exportSymbol('proto.protocol.TransferAssetContract', null, global);
	goog.exportSymbol('proto.protocol.TransferContract', null, global);
	goog.exportSymbol('proto.protocol.TriggerSmartContract', null, global);
	goog.exportSymbol('proto.protocol.UnfreezeAssetContract', null, global);
	goog.exportSymbol('proto.protocol.UnfreezeBalanceContract', null, global);
	goog.exportSymbol('proto.protocol.UpdateAssetContract', null, global);
	goog.exportSymbol('proto.protocol.UpdateEnergyLimitContract', null, global);
	goog.exportSymbol('proto.protocol.UpdateSettingContract', null, global);
	goog.exportSymbol('proto.protocol.VoteAssetContract', null, global);
	goog.exportSymbol('proto.protocol.VoteWitnessContract', null, global);
	goog.exportSymbol('proto.protocol.VoteWitnessContract.Vote', null, global);
	goog.exportSymbol('proto.protocol.WithdrawBalanceContract', null, global);
	goog.exportSymbol('proto.protocol.WitnessCreateContract', null, global);
	goog.exportSymbol('proto.protocol.WitnessUpdateContract', null, global);

	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.AccountCreateContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.AccountCreateContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.AccountCreateContract.displayName = 'proto.protocol.AccountCreateContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.AccountCreateContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.AccountCreateContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.AccountCreateContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.AccountCreateContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      accountAddress: msg.getAccountAddress_asB64(),
	      type: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.AccountCreateContract}
	 */
	proto.protocol.AccountCreateContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.AccountCreateContract;
	  return proto.protocol.AccountCreateContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.AccountCreateContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.AccountCreateContract}
	 */
	proto.protocol.AccountCreateContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setAccountAddress(value);
	        break;
	      case 3:
	        var value = /** @type {!proto.protocol.AccountType} */ (reader.readEnum());
	        msg.setType(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountCreateContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.AccountCreateContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.AccountCreateContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.AccountCreateContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getAccountAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getType();
	  if (f !== 0.0) {
	    writer.writeEnum(
	        3,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AccountCreateContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.AccountCreateContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountCreateContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AccountCreateContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes account_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AccountCreateContract.prototype.getAccountAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes account_address = 2;
	 * This is a type-conversion wrapper around `getAccountAddress()`
	 * @return {string}
	 */
	proto.protocol.AccountCreateContract.prototype.getAccountAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAccountAddress()));
	};


	/**
	 * optional bytes account_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccountAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountCreateContract.prototype.getAccountAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAccountAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AccountCreateContract.prototype.setAccountAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional AccountType type = 3;
	 * @return {!proto.protocol.AccountType}
	 */
	proto.protocol.AccountCreateContract.prototype.getType = function() {
	  return /** @type {!proto.protocol.AccountType} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {!proto.protocol.AccountType} value */
	proto.protocol.AccountCreateContract.prototype.setType = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.AccountUpdateContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.AccountUpdateContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.AccountUpdateContract.displayName = 'proto.protocol.AccountUpdateContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.AccountUpdateContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.AccountUpdateContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.AccountUpdateContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.AccountUpdateContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      accountName: msg.getAccountName_asB64(),
	      ownerAddress: msg.getOwnerAddress_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.AccountUpdateContract}
	 */
	proto.protocol.AccountUpdateContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.AccountUpdateContract;
	  return proto.protocol.AccountUpdateContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.AccountUpdateContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.AccountUpdateContract}
	 */
	proto.protocol.AccountUpdateContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setAccountName(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountUpdateContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.AccountUpdateContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.AccountUpdateContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.AccountUpdateContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccountName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes account_name = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AccountUpdateContract.prototype.getAccountName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes account_name = 1;
	 * This is a type-conversion wrapper around `getAccountName()`
	 * @return {string}
	 */
	proto.protocol.AccountUpdateContract.prototype.getAccountName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAccountName()));
	};


	/**
	 * optional bytes account_name = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccountName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountUpdateContract.prototype.getAccountName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAccountName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AccountUpdateContract.prototype.setAccountName = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes owner_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AccountUpdateContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes owner_address = 2;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.AccountUpdateContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AccountUpdateContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AccountUpdateContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.SetAccountIdContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.SetAccountIdContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.SetAccountIdContract.displayName = 'proto.protocol.SetAccountIdContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.SetAccountIdContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.SetAccountIdContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.SetAccountIdContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.SetAccountIdContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      accountId: msg.getAccountId_asB64(),
	      ownerAddress: msg.getOwnerAddress_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.SetAccountIdContract}
	 */
	proto.protocol.SetAccountIdContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.SetAccountIdContract;
	  return proto.protocol.SetAccountIdContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.SetAccountIdContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.SetAccountIdContract}
	 */
	proto.protocol.SetAccountIdContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setAccountId(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.SetAccountIdContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.SetAccountIdContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.SetAccountIdContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SetAccountIdContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccountId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes account_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.SetAccountIdContract.prototype.getAccountId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes account_id = 1;
	 * This is a type-conversion wrapper around `getAccountId()`
	 * @return {string}
	 */
	proto.protocol.SetAccountIdContract.prototype.getAccountId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAccountId()));
	};


	/**
	 * optional bytes account_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccountId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.SetAccountIdContract.prototype.getAccountId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAccountId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.SetAccountIdContract.prototype.setAccountId = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes owner_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.SetAccountIdContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes owner_address = 2;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.SetAccountIdContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.SetAccountIdContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.SetAccountIdContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TransferContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TransferContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TransferContract.displayName = 'proto.protocol.TransferContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.TransferContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.TransferContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.TransferContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.TransferContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      toAddress: msg.getToAddress_asB64(),
	      amount: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TransferContract}
	 */
	proto.protocol.TransferContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TransferContract;
	  return proto.protocol.TransferContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TransferContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TransferContract}
	 */
	proto.protocol.TransferContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setToAddress(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setAmount(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TransferContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TransferContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransferContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getToAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransferContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.TransferContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransferContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes to_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransferContract.prototype.getToAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes to_address = 2;
	 * This is a type-conversion wrapper around `getToAddress()`
	 * @return {string}
	 */
	proto.protocol.TransferContract.prototype.getToAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getToAddress()));
	};


	/**
	 * optional bytes to_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getToAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferContract.prototype.getToAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getToAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransferContract.prototype.setToAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 amount = 3;
	 * @return {number}
	 */
	proto.protocol.TransferContract.prototype.getAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.TransferContract.prototype.setAmount = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TransferAssetContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TransferAssetContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TransferAssetContract.displayName = 'proto.protocol.TransferAssetContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.TransferAssetContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.TransferAssetContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.TransferAssetContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.TransferAssetContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      assetName: msg.getAssetName_asB64(),
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      toAddress: msg.getToAddress_asB64(),
	      amount: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TransferAssetContract}
	 */
	proto.protocol.TransferAssetContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TransferAssetContract;
	  return proto.protocol.TransferAssetContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TransferAssetContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TransferAssetContract}
	 */
	proto.protocol.TransferAssetContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setAssetName(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setToAddress(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setAmount(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferAssetContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TransferAssetContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TransferAssetContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TransferAssetContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAssetName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getToAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	};


	/**
	 * optional bytes asset_name = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransferAssetContract.prototype.getAssetName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes asset_name = 1;
	 * This is a type-conversion wrapper around `getAssetName()`
	 * @return {string}
	 */
	proto.protocol.TransferAssetContract.prototype.getAssetName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAssetName()));
	};


	/**
	 * optional bytes asset_name = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAssetName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferAssetContract.prototype.getAssetName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAssetName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransferAssetContract.prototype.setAssetName = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes owner_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransferAssetContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes owner_address = 2;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.TransferAssetContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferAssetContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransferAssetContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes to_address = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TransferAssetContract.prototype.getToAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes to_address = 3;
	 * This is a type-conversion wrapper around `getToAddress()`
	 * @return {string}
	 */
	proto.protocol.TransferAssetContract.prototype.getToAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getToAddress()));
	};


	/**
	 * optional bytes to_address = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getToAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TransferAssetContract.prototype.getToAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getToAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TransferAssetContract.prototype.setToAddress = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 amount = 4;
	 * @return {number}
	 */
	proto.protocol.TransferAssetContract.prototype.getAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.TransferAssetContract.prototype.setAmount = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.VoteAssetContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.VoteAssetContract.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.VoteAssetContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.VoteAssetContract.displayName = 'proto.protocol.VoteAssetContract';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.VoteAssetContract.repeatedFields_ = [2];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.VoteAssetContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.VoteAssetContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.VoteAssetContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.VoteAssetContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      voteAddressList: msg.getVoteAddressList_asB64(),
	      support: googleProtobuf.Message.getFieldWithDefault(msg, 3, false),
	      count: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.VoteAssetContract}
	 */
	proto.protocol.VoteAssetContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.VoteAssetContract;
	  return proto.protocol.VoteAssetContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.VoteAssetContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.VoteAssetContract}
	 */
	proto.protocol.VoteAssetContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.addVoteAddress(value);
	        break;
	      case 3:
	        var value = /** @type {boolean} */ (reader.readBool());
	        msg.setSupport(value);
	        break;
	      case 5:
	        var value = /** @type {number} */ (reader.readInt32());
	        msg.setCount(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.VoteAssetContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.VoteAssetContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.VoteAssetContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.VoteAssetContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getVoteAddressList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	        2,
	        f
	    );
	  }
	  f = message.getSupport();
	  if (f) {
	    writer.writeBool(
	        3,
	        f
	    );
	  }
	  f = message.getCount();
	  if (f !== 0) {
	    writer.writeInt32(
	        5,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.VoteAssetContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.VoteAssetContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.VoteAssetContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.VoteAssetContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * repeated bytes vote_address = 2;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.protocol.VoteAssetContract.prototype.getVoteAddressList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (googleProtobuf.Message.getRepeatedField(this, 2));
	};


	/**
	 * repeated bytes vote_address = 2;
	 * This is a type-conversion wrapper around `getVoteAddressList()`
	 * @return {!Array.<string>}
	 */
	proto.protocol.VoteAssetContract.prototype.getVoteAddressList_asB64 = function() {
	  return /** @type {!Array.<string>} */ (googleProtobuf.Message.bytesListAsB64(
	      this.getVoteAddressList()));
	};


	/**
	 * repeated bytes vote_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getVoteAddressList()`
	 * @return {!Array.<!Uint8Array>}
	 */
	proto.protocol.VoteAssetContract.prototype.getVoteAddressList_asU8 = function() {
	  return /** @type {!Array.<!Uint8Array>} */ (googleProtobuf.Message.bytesListAsU8(
	      this.getVoteAddressList()));
	};


	/** @param {!(Array<!Uint8Array>|Array<string>)} value */
	proto.protocol.VoteAssetContract.prototype.setVoteAddressList = function(value) {
	  googleProtobuf.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 */
	proto.protocol.VoteAssetContract.prototype.addVoteAddress = function(value, opt_index) {
	  googleProtobuf.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	proto.protocol.VoteAssetContract.prototype.clearVoteAddressList = function() {
	  this.setVoteAddressList([]);
	};


	/**
	 * optional bool support = 3;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.VoteAssetContract.prototype.getSupport = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, false));
	};


	/** @param {boolean} value */
	proto.protocol.VoteAssetContract.prototype.setSupport = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int32 count = 5;
	 * @return {number}
	 */
	proto.protocol.VoteAssetContract.prototype.getCount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.VoteAssetContract.prototype.setCount = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.VoteWitnessContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.VoteWitnessContract.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.VoteWitnessContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.VoteWitnessContract.displayName = 'proto.protocol.VoteWitnessContract';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.VoteWitnessContract.repeatedFields_ = [2];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.VoteWitnessContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.VoteWitnessContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.VoteWitnessContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.VoteWitnessContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      votesList: googleProtobuf.Message.toObjectList(msg.getVotesList(),
	          proto.protocol.VoteWitnessContract.Vote.toObject, includeInstance),
	      support: googleProtobuf.Message.getFieldWithDefault(msg, 3, false)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.VoteWitnessContract}
	 */
	proto.protocol.VoteWitnessContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.VoteWitnessContract;
	  return proto.protocol.VoteWitnessContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.VoteWitnessContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.VoteWitnessContract}
	 */
	proto.protocol.VoteWitnessContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = new proto.protocol.VoteWitnessContract.Vote;
	        reader.readMessage(value,proto.protocol.VoteWitnessContract.Vote.deserializeBinaryFromReader);
	        msg.addVotes(value);
	        break;
	      case 3:
	        var value = /** @type {boolean} */ (reader.readBool());
	        msg.setSupport(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.VoteWitnessContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.VoteWitnessContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.VoteWitnessContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.VoteWitnessContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getVotesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	        2,
	        f,
	        proto.protocol.VoteWitnessContract.Vote.serializeBinaryToWriter
	    );
	  }
	  f = message.getSupport();
	  if (f) {
	    writer.writeBool(
	        3,
	        f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.VoteWitnessContract.Vote = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.VoteWitnessContract.Vote, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.VoteWitnessContract.Vote.displayName = 'proto.protocol.VoteWitnessContract.Vote';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.VoteWitnessContract.Vote.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.VoteWitnessContract.Vote.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.VoteWitnessContract.Vote} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.VoteWitnessContract.Vote.toObject = function(includeInstance, msg) {
	    var obj = {
	      voteAddress: msg.getVoteAddress_asB64(),
	      voteCount: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.VoteWitnessContract.Vote}
	 */
	proto.protocol.VoteWitnessContract.Vote.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.VoteWitnessContract.Vote;
	  return proto.protocol.VoteWitnessContract.Vote.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.VoteWitnessContract.Vote} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.VoteWitnessContract.Vote}
	 */
	proto.protocol.VoteWitnessContract.Vote.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setVoteAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setVoteCount(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.VoteWitnessContract.Vote.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.VoteWitnessContract.Vote.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.VoteWitnessContract.Vote} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.VoteWitnessContract.Vote.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getVoteAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getVoteCount();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes vote_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.VoteWitnessContract.Vote.prototype.getVoteAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes vote_address = 1;
	 * This is a type-conversion wrapper around `getVoteAddress()`
	 * @return {string}
	 */
	proto.protocol.VoteWitnessContract.Vote.prototype.getVoteAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getVoteAddress()));
	};


	/**
	 * optional bytes vote_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getVoteAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.VoteWitnessContract.Vote.prototype.getVoteAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getVoteAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.VoteWitnessContract.Vote.prototype.setVoteAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 vote_count = 2;
	 * @return {number}
	 */
	proto.protocol.VoteWitnessContract.Vote.prototype.getVoteCount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.VoteWitnessContract.Vote.prototype.setVoteCount = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.VoteWitnessContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.VoteWitnessContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.VoteWitnessContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.VoteWitnessContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * repeated Vote votes = 2;
	 * @return {!Array.<!proto.protocol.VoteWitnessContract.Vote>}
	 */
	proto.protocol.VoteWitnessContract.prototype.getVotesList = function() {
	  return /** @type{!Array.<!proto.protocol.VoteWitnessContract.Vote>} */ (
	      googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.VoteWitnessContract.Vote, 2));
	};


	/** @param {!Array.<!proto.protocol.VoteWitnessContract.Vote>} value */
	proto.protocol.VoteWitnessContract.prototype.setVotesList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 2, value);
	};


	/**
	 * @param {!proto.protocol.VoteWitnessContract.Vote=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.VoteWitnessContract.Vote}
	 */
	proto.protocol.VoteWitnessContract.prototype.addVotes = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.protocol.VoteWitnessContract.Vote, opt_index);
	};


	proto.protocol.VoteWitnessContract.prototype.clearVotesList = function() {
	  this.setVotesList([]);
	};


	/**
	 * optional bool support = 3;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.VoteWitnessContract.prototype.getSupport = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, false));
	};


	/** @param {boolean} value */
	proto.protocol.VoteWitnessContract.prototype.setSupport = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.UpdateSettingContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.UpdateSettingContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.UpdateSettingContract.displayName = 'proto.protocol.UpdateSettingContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.UpdateSettingContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.UpdateSettingContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.UpdateSettingContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.UpdateSettingContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      contractAddress: msg.getContractAddress_asB64(),
	      consumeUserResourcePercent: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.UpdateSettingContract}
	 */
	proto.protocol.UpdateSettingContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.UpdateSettingContract;
	  return proto.protocol.UpdateSettingContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.UpdateSettingContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.UpdateSettingContract}
	 */
	proto.protocol.UpdateSettingContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setContractAddress(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setConsumeUserResourcePercent(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateSettingContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.UpdateSettingContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.UpdateSettingContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.UpdateSettingContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getContractAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getConsumeUserResourcePercent();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateSettingContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.UpdateSettingContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateSettingContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateSettingContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes contract_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateSettingContract.prototype.getContractAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes contract_address = 2;
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {string}
	 */
	proto.protocol.UpdateSettingContract.prototype.getContractAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getContractAddress()));
	};


	/**
	 * optional bytes contract_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateSettingContract.prototype.getContractAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getContractAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateSettingContract.prototype.setContractAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 consume_user_resource_percent = 3;
	 * @return {number}
	 */
	proto.protocol.UpdateSettingContract.prototype.getConsumeUserResourcePercent = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.UpdateSettingContract.prototype.setConsumeUserResourcePercent = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.UpdateEnergyLimitContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.UpdateEnergyLimitContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.UpdateEnergyLimitContract.displayName = 'proto.protocol.UpdateEnergyLimitContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.UpdateEnergyLimitContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.UpdateEnergyLimitContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.UpdateEnergyLimitContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.UpdateEnergyLimitContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      contractAddress: msg.getContractAddress_asB64(),
	      originEnergyLimit: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.UpdateEnergyLimitContract}
	 */
	proto.protocol.UpdateEnergyLimitContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.UpdateEnergyLimitContract;
	  return proto.protocol.UpdateEnergyLimitContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.UpdateEnergyLimitContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.UpdateEnergyLimitContract}
	 */
	proto.protocol.UpdateEnergyLimitContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setContractAddress(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setOriginEnergyLimit(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.UpdateEnergyLimitContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.UpdateEnergyLimitContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.UpdateEnergyLimitContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getContractAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getOriginEnergyLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateEnergyLimitContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes contract_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getContractAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes contract_address = 2;
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {string}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getContractAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getContractAddress()));
	};


	/**
	 * optional bytes contract_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getContractAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getContractAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateEnergyLimitContract.prototype.setContractAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 origin_energy_limit = 3;
	 * @return {number}
	 */
	proto.protocol.UpdateEnergyLimitContract.prototype.getOriginEnergyLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.UpdateEnergyLimitContract.prototype.setOriginEnergyLimit = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.WitnessCreateContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.WitnessCreateContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.WitnessCreateContract.displayName = 'proto.protocol.WitnessCreateContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.WitnessCreateContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.WitnessCreateContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.WitnessCreateContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.WitnessCreateContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      url: msg.getUrl_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.WitnessCreateContract}
	 */
	proto.protocol.WitnessCreateContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.WitnessCreateContract;
	  return proto.protocol.WitnessCreateContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.WitnessCreateContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.WitnessCreateContract}
	 */
	proto.protocol.WitnessCreateContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setUrl(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.WitnessCreateContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.WitnessCreateContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.WitnessCreateContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.WitnessCreateContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getUrl_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.WitnessCreateContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.WitnessCreateContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.WitnessCreateContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.WitnessCreateContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes url = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.WitnessCreateContract.prototype.getUrl = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes url = 2;
	 * This is a type-conversion wrapper around `getUrl()`
	 * @return {string}
	 */
	proto.protocol.WitnessCreateContract.prototype.getUrl_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getUrl()));
	};


	/**
	 * optional bytes url = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUrl()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.WitnessCreateContract.prototype.getUrl_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getUrl()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.WitnessCreateContract.prototype.setUrl = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.WitnessUpdateContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.WitnessUpdateContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.WitnessUpdateContract.displayName = 'proto.protocol.WitnessUpdateContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.WitnessUpdateContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.WitnessUpdateContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.WitnessUpdateContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.WitnessUpdateContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      updateUrl: msg.getUpdateUrl_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.WitnessUpdateContract}
	 */
	proto.protocol.WitnessUpdateContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.WitnessUpdateContract;
	  return proto.protocol.WitnessUpdateContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.WitnessUpdateContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.WitnessUpdateContract}
	 */
	proto.protocol.WitnessUpdateContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 12:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setUpdateUrl(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.WitnessUpdateContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.WitnessUpdateContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.WitnessUpdateContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.WitnessUpdateContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getUpdateUrl_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        12,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.WitnessUpdateContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.WitnessUpdateContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.WitnessUpdateContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.WitnessUpdateContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes update_url = 12;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.WitnessUpdateContract.prototype.getUpdateUrl = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 12, ""));
	};


	/**
	 * optional bytes update_url = 12;
	 * This is a type-conversion wrapper around `getUpdateUrl()`
	 * @return {string}
	 */
	proto.protocol.WitnessUpdateContract.prototype.getUpdateUrl_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getUpdateUrl()));
	};


	/**
	 * optional bytes update_url = 12;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUpdateUrl()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.WitnessUpdateContract.prototype.getUpdateUrl_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getUpdateUrl()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.WitnessUpdateContract.prototype.setUpdateUrl = function(value) {
	  googleProtobuf.Message.setField(this, 12, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.AssetIssueContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, proto.protocol.AssetIssueContract.repeatedFields_, null);
	};
	goog.inherits(proto.protocol.AssetIssueContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.AssetIssueContract.displayName = 'proto.protocol.AssetIssueContract';
	}
	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.protocol.AssetIssueContract.repeatedFields_ = [5];



	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.AssetIssueContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.AssetIssueContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.AssetIssueContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.AssetIssueContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      id: googleProtobuf.Message.getFieldWithDefault(msg, 41, ""),
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      name: msg.getName_asB64(),
	      abbr: msg.getAbbr_asB64(),
	      totalSupply: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	      frozenSupplyList: googleProtobuf.Message.toObjectList(msg.getFrozenSupplyList(),
	          proto.protocol.AssetIssueContract.FrozenSupply.toObject, includeInstance),
	      trxNum: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0),
	      precision: googleProtobuf.Message.getFieldWithDefault(msg, 7, 0),
	      num: googleProtobuf.Message.getFieldWithDefault(msg, 8, 0),
	      startTime: googleProtobuf.Message.getFieldWithDefault(msg, 9, 0),
	      endTime: googleProtobuf.Message.getFieldWithDefault(msg, 10, 0),
	      order: googleProtobuf.Message.getFieldWithDefault(msg, 11, 0),
	      voteScore: googleProtobuf.Message.getFieldWithDefault(msg, 16, 0),
	      description: msg.getDescription_asB64(),
	      url: msg.getUrl_asB64(),
	      freeAssetNetLimit: googleProtobuf.Message.getFieldWithDefault(msg, 22, 0),
	      publicFreeAssetNetLimit: googleProtobuf.Message.getFieldWithDefault(msg, 23, 0),
	      publicFreeAssetNetUsage: googleProtobuf.Message.getFieldWithDefault(msg, 24, 0),
	      publicLatestFreeNetTime: googleProtobuf.Message.getFieldWithDefault(msg, 25, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.AssetIssueContract}
	 */
	proto.protocol.AssetIssueContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.AssetIssueContract;
	  return proto.protocol.AssetIssueContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.AssetIssueContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.AssetIssueContract}
	 */
	proto.protocol.AssetIssueContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 41:
	        var value = /** @type {string} */ (reader.readString());
	        msg.setId(value);
	        break;
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setName(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setAbbr(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setTotalSupply(value);
	        break;
	      case 5:
	        var value = new proto.protocol.AssetIssueContract.FrozenSupply;
	        reader.readMessage(value,proto.protocol.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader);
	        msg.addFrozenSupply(value);
	        break;
	      case 6:
	        var value = /** @type {number} */ (reader.readInt32());
	        msg.setTrxNum(value);
	        break;
	      case 7:
	        var value = /** @type {number} */ (reader.readInt32());
	        msg.setPrecision(value);
	        break;
	      case 8:
	        var value = /** @type {number} */ (reader.readInt32());
	        msg.setNum(value);
	        break;
	      case 9:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setStartTime(value);
	        break;
	      case 10:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setEndTime(value);
	        break;
	      case 11:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setOrder(value);
	        break;
	      case 16:
	        var value = /** @type {number} */ (reader.readInt32());
	        msg.setVoteScore(value);
	        break;
	      case 20:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setDescription(value);
	        break;
	      case 21:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setUrl(value);
	        break;
	      case 22:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setFreeAssetNetLimit(value);
	        break;
	      case 23:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setPublicFreeAssetNetLimit(value);
	        break;
	      case 24:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setPublicFreeAssetNetUsage(value);
	        break;
	      case 25:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setPublicLatestFreeNetTime(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.AssetIssueContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.AssetIssueContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.AssetIssueContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId();
	  if (f.length > 0) {
	    writer.writeString(
	        41,
	        f
	    );
	  }
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getAbbr_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getTotalSupply();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	  f = message.getFrozenSupplyList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	        5,
	        f,
	        proto.protocol.AssetIssueContract.FrozenSupply.serializeBinaryToWriter
	    );
	  }
	  f = message.getTrxNum();
	  if (f !== 0) {
	    writer.writeInt32(
	        6,
	        f
	    );
	  }
	  f = message.getPrecision();
	  if (f !== 0) {
	    writer.writeInt32(
	        7,
	        f
	    );
	  }
	  f = message.getNum();
	  if (f !== 0) {
	    writer.writeInt32(
	        8,
	        f
	    );
	  }
	  f = message.getStartTime();
	  if (f !== 0) {
	    writer.writeInt64(
	        9,
	        f
	    );
	  }
	  f = message.getEndTime();
	  if (f !== 0) {
	    writer.writeInt64(
	        10,
	        f
	    );
	  }
	  f = message.getOrder();
	  if (f !== 0) {
	    writer.writeInt64(
	        11,
	        f
	    );
	  }
	  f = message.getVoteScore();
	  if (f !== 0) {
	    writer.writeInt32(
	        16,
	        f
	    );
	  }
	  f = message.getDescription_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        20,
	        f
	    );
	  }
	  f = message.getUrl_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        21,
	        f
	    );
	  }
	  f = message.getFreeAssetNetLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	        22,
	        f
	    );
	  }
	  f = message.getPublicFreeAssetNetLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	        23,
	        f
	    );
	  }
	  f = message.getPublicFreeAssetNetUsage();
	  if (f !== 0) {
	    writer.writeInt64(
	        24,
	        f
	    );
	  }
	  f = message.getPublicLatestFreeNetTime();
	  if (f !== 0) {
	    writer.writeInt64(
	        25,
	        f
	    );
	  }
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.AssetIssueContract.FrozenSupply = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.AssetIssueContract.FrozenSupply, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.AssetIssueContract.FrozenSupply.displayName = 'proto.protocol.AssetIssueContract.FrozenSupply';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.AssetIssueContract.FrozenSupply.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.AssetIssueContract.FrozenSupply.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.AssetIssueContract.FrozenSupply} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.AssetIssueContract.FrozenSupply.toObject = function(includeInstance, msg) {
	    var obj = {
	      frozenAmount: googleProtobuf.Message.getFieldWithDefault(msg, 1, 0),
	      frozenDays: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.AssetIssueContract.FrozenSupply}
	 */
	proto.protocol.AssetIssueContract.FrozenSupply.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.AssetIssueContract.FrozenSupply;
	  return proto.protocol.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.AssetIssueContract.FrozenSupply} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.AssetIssueContract.FrozenSupply}
	 */
	proto.protocol.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setFrozenAmount(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setFrozenDays(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.FrozenSupply.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.AssetIssueContract.FrozenSupply.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.AssetIssueContract.FrozenSupply} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.AssetIssueContract.FrozenSupply.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getFrozenAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	        1,
	        f
	    );
	  }
	  f = message.getFrozenDays();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional int64 frozen_amount = 1;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.FrozenSupply.prototype.getFrozenAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.FrozenSupply.prototype.setFrozenAmount = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 frozen_days = 2;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.FrozenSupply.prototype.getFrozenDays = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.FrozenSupply.prototype.setFrozenDays = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional string id = 41;
	 * @return {string}
	 */
	proto.protocol.AssetIssueContract.prototype.getId = function() {
	  return /** @type {string} */ (googleProtobuf.Message.getFieldWithDefault(this, 41, ""));
	};


	/** @param {string} value */
	proto.protocol.AssetIssueContract.prototype.setId = function(value) {
	  googleProtobuf.Message.setField(this, 41, value);
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AssetIssueContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.AssetIssueContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AssetIssueContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes name = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AssetIssueContract.prototype.getName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes name = 2;
	 * This is a type-conversion wrapper around `getName()`
	 * @return {string}
	 */
	proto.protocol.AssetIssueContract.prototype.getName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getName()));
	};


	/**
	 * optional bytes name = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.prototype.getName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AssetIssueContract.prototype.setName = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes abbr = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AssetIssueContract.prototype.getAbbr = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes abbr = 3;
	 * This is a type-conversion wrapper around `getAbbr()`
	 * @return {string}
	 */
	proto.protocol.AssetIssueContract.prototype.getAbbr_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAbbr()));
	};


	/**
	 * optional bytes abbr = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAbbr()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.prototype.getAbbr_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAbbr()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AssetIssueContract.prototype.setAbbr = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 total_supply = 4;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getTotalSupply = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setTotalSupply = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * repeated FrozenSupply frozen_supply = 5;
	 * @return {!Array.<!proto.protocol.AssetIssueContract.FrozenSupply>}
	 */
	proto.protocol.AssetIssueContract.prototype.getFrozenSupplyList = function() {
	  return /** @type{!Array.<!proto.protocol.AssetIssueContract.FrozenSupply>} */ (
	      googleProtobuf.Message.getRepeatedWrapperField(this, proto.protocol.AssetIssueContract.FrozenSupply, 5));
	};


	/** @param {!Array.<!proto.protocol.AssetIssueContract.FrozenSupply>} value */
	proto.protocol.AssetIssueContract.prototype.setFrozenSupplyList = function(value) {
	  googleProtobuf.Message.setRepeatedWrapperField(this, 5, value);
	};


	/**
	 * @param {!proto.protocol.AssetIssueContract.FrozenSupply=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.protocol.AssetIssueContract.FrozenSupply}
	 */
	proto.protocol.AssetIssueContract.prototype.addFrozenSupply = function(opt_value, opt_index) {
	  return googleProtobuf.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.protocol.AssetIssueContract.FrozenSupply, opt_index);
	};


	proto.protocol.AssetIssueContract.prototype.clearFrozenSupplyList = function() {
	  this.setFrozenSupplyList([]);
	};


	/**
	 * optional int32 trx_num = 6;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getTrxNum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setTrxNum = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};


	/**
	 * optional int32 precision = 7;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getPrecision = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 7, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setPrecision = function(value) {
	  googleProtobuf.Message.setField(this, 7, value);
	};


	/**
	 * optional int32 num = 8;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getNum = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 8, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setNum = function(value) {
	  googleProtobuf.Message.setField(this, 8, value);
	};


	/**
	 * optional int64 start_time = 9;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getStartTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 9, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setStartTime = function(value) {
	  googleProtobuf.Message.setField(this, 9, value);
	};


	/**
	 * optional int64 end_time = 10;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getEndTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setEndTime = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * optional int64 order = 11;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getOrder = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 11, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setOrder = function(value) {
	  googleProtobuf.Message.setField(this, 11, value);
	};


	/**
	 * optional int32 vote_score = 16;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getVoteScore = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 16, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setVoteScore = function(value) {
	  googleProtobuf.Message.setField(this, 16, value);
	};


	/**
	 * optional bytes description = 20;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AssetIssueContract.prototype.getDescription = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 20, ""));
	};


	/**
	 * optional bytes description = 20;
	 * This is a type-conversion wrapper around `getDescription()`
	 * @return {string}
	 */
	proto.protocol.AssetIssueContract.prototype.getDescription_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getDescription()));
	};


	/**
	 * optional bytes description = 20;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDescription()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.prototype.getDescription_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getDescription()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AssetIssueContract.prototype.setDescription = function(value) {
	  googleProtobuf.Message.setField(this, 20, value);
	};


	/**
	 * optional bytes url = 21;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.AssetIssueContract.prototype.getUrl = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 21, ""));
	};


	/**
	 * optional bytes url = 21;
	 * This is a type-conversion wrapper around `getUrl()`
	 * @return {string}
	 */
	proto.protocol.AssetIssueContract.prototype.getUrl_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getUrl()));
	};


	/**
	 * optional bytes url = 21;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUrl()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.AssetIssueContract.prototype.getUrl_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getUrl()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.AssetIssueContract.prototype.setUrl = function(value) {
	  googleProtobuf.Message.setField(this, 21, value);
	};


	/**
	 * optional int64 free_asset_net_limit = 22;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getFreeAssetNetLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 22, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setFreeAssetNetLimit = function(value) {
	  googleProtobuf.Message.setField(this, 22, value);
	};


	/**
	 * optional int64 public_free_asset_net_limit = 23;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getPublicFreeAssetNetLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 23, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setPublicFreeAssetNetLimit = function(value) {
	  googleProtobuf.Message.setField(this, 23, value);
	};


	/**
	 * optional int64 public_free_asset_net_usage = 24;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getPublicFreeAssetNetUsage = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 24, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setPublicFreeAssetNetUsage = function(value) {
	  googleProtobuf.Message.setField(this, 24, value);
	};


	/**
	 * optional int64 public_latest_free_net_time = 25;
	 * @return {number}
	 */
	proto.protocol.AssetIssueContract.prototype.getPublicLatestFreeNetTime = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 25, 0));
	};


	/** @param {number} value */
	proto.protocol.AssetIssueContract.prototype.setPublicLatestFreeNetTime = function(value) {
	  googleProtobuf.Message.setField(this, 25, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ParticipateAssetIssueContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ParticipateAssetIssueContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ParticipateAssetIssueContract.displayName = 'proto.protocol.ParticipateAssetIssueContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ParticipateAssetIssueContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ParticipateAssetIssueContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ParticipateAssetIssueContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ParticipateAssetIssueContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      toAddress: msg.getToAddress_asB64(),
	      assetName: msg.getAssetName_asB64(),
	      amount: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ParticipateAssetIssueContract}
	 */
	proto.protocol.ParticipateAssetIssueContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ParticipateAssetIssueContract;
	  return proto.protocol.ParticipateAssetIssueContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ParticipateAssetIssueContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ParticipateAssetIssueContract}
	 */
	proto.protocol.ParticipateAssetIssueContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setToAddress(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setAssetName(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setAmount(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ParticipateAssetIssueContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ParticipateAssetIssueContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ParticipateAssetIssueContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getToAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getAssetName_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getAmount();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ParticipateAssetIssueContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes to_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getToAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes to_address = 2;
	 * This is a type-conversion wrapper around `getToAddress()`
	 * @return {string}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getToAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getToAddress()));
	};


	/**
	 * optional bytes to_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getToAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getToAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getToAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ParticipateAssetIssueContract.prototype.setToAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes asset_name = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getAssetName = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes asset_name = 3;
	 * This is a type-conversion wrapper around `getAssetName()`
	 * @return {string}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getAssetName_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getAssetName()));
	};


	/**
	 * optional bytes asset_name = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAssetName()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getAssetName_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getAssetName()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ParticipateAssetIssueContract.prototype.setAssetName = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 amount = 4;
	 * @return {number}
	 */
	proto.protocol.ParticipateAssetIssueContract.prototype.getAmount = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.ParticipateAssetIssueContract.prototype.setAmount = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.FreezeBalanceContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.FreezeBalanceContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.FreezeBalanceContract.displayName = 'proto.protocol.FreezeBalanceContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.FreezeBalanceContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.FreezeBalanceContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.FreezeBalanceContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.FreezeBalanceContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      frozenBalance: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	      frozenDuration: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	      resource: googleProtobuf.Message.getFieldWithDefault(msg, 10, 0),
	      receiverAddress: msg.getReceiverAddress_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.FreezeBalanceContract}
	 */
	proto.protocol.FreezeBalanceContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.FreezeBalanceContract;
	  return proto.protocol.FreezeBalanceContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.FreezeBalanceContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.FreezeBalanceContract}
	 */
	proto.protocol.FreezeBalanceContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setFrozenBalance(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setFrozenDuration(value);
	        break;
	      case 10:
	        var value = /** @type {!proto.protocol.ResourceCode} */ (reader.readEnum());
	        msg.setResource(value);
	        break;
	      case 15:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setReceiverAddress(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.FreezeBalanceContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.FreezeBalanceContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.FreezeBalanceContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.FreezeBalanceContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getFrozenBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	  f = message.getFrozenDuration();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	  f = message.getResource();
	  if (f !== 0.0) {
	    writer.writeEnum(
	        10,
	        f
	    );
	  }
	  f = message.getReceiverAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        15,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.FreezeBalanceContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 frozen_balance = 2;
	 * @return {number}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getFrozenBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.FreezeBalanceContract.prototype.setFrozenBalance = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 frozen_duration = 3;
	 * @return {number}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getFrozenDuration = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.FreezeBalanceContract.prototype.setFrozenDuration = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional ResourceCode resource = 10;
	 * @return {!proto.protocol.ResourceCode}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getResource = function() {
	  return /** @type {!proto.protocol.ResourceCode} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, 0));
	};


	/** @param {!proto.protocol.ResourceCode} value */
	proto.protocol.FreezeBalanceContract.prototype.setResource = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * optional bytes receiver_address = 15;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getReceiverAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 15, ""));
	};


	/**
	 * optional bytes receiver_address = 15;
	 * This is a type-conversion wrapper around `getReceiverAddress()`
	 * @return {string}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getReceiverAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getReceiverAddress()));
	};


	/**
	 * optional bytes receiver_address = 15;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getReceiverAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.FreezeBalanceContract.prototype.getReceiverAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getReceiverAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.FreezeBalanceContract.prototype.setReceiverAddress = function(value) {
	  googleProtobuf.Message.setField(this, 15, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.UnfreezeBalanceContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.UnfreezeBalanceContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.UnfreezeBalanceContract.displayName = 'proto.protocol.UnfreezeBalanceContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.UnfreezeBalanceContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.UnfreezeBalanceContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.UnfreezeBalanceContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.UnfreezeBalanceContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      resource: googleProtobuf.Message.getFieldWithDefault(msg, 10, 0),
	      receiverAddress: msg.getReceiverAddress_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.UnfreezeBalanceContract}
	 */
	proto.protocol.UnfreezeBalanceContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.UnfreezeBalanceContract;
	  return proto.protocol.UnfreezeBalanceContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.UnfreezeBalanceContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.UnfreezeBalanceContract}
	 */
	proto.protocol.UnfreezeBalanceContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 10:
	        var value = /** @type {!proto.protocol.ResourceCode} */ (reader.readEnum());
	        msg.setResource(value);
	        break;
	      case 15:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setReceiverAddress(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.UnfreezeBalanceContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.UnfreezeBalanceContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.UnfreezeBalanceContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getResource();
	  if (f !== 0.0) {
	    writer.writeEnum(
	        10,
	        f
	    );
	  }
	  f = message.getReceiverAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        15,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UnfreezeBalanceContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional ResourceCode resource = 10;
	 * @return {!proto.protocol.ResourceCode}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getResource = function() {
	  return /** @type {!proto.protocol.ResourceCode} */ (googleProtobuf.Message.getFieldWithDefault(this, 10, 0));
	};


	/** @param {!proto.protocol.ResourceCode} value */
	proto.protocol.UnfreezeBalanceContract.prototype.setResource = function(value) {
	  googleProtobuf.Message.setField(this, 10, value);
	};


	/**
	 * optional bytes receiver_address = 15;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getReceiverAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 15, ""));
	};


	/**
	 * optional bytes receiver_address = 15;
	 * This is a type-conversion wrapper around `getReceiverAddress()`
	 * @return {string}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getReceiverAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getReceiverAddress()));
	};


	/**
	 * optional bytes receiver_address = 15;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getReceiverAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UnfreezeBalanceContract.prototype.getReceiverAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getReceiverAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UnfreezeBalanceContract.prototype.setReceiverAddress = function(value) {
	  googleProtobuf.Message.setField(this, 15, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.UnfreezeAssetContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.UnfreezeAssetContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.UnfreezeAssetContract.displayName = 'proto.protocol.UnfreezeAssetContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.UnfreezeAssetContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.UnfreezeAssetContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.UnfreezeAssetContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.UnfreezeAssetContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.UnfreezeAssetContract}
	 */
	proto.protocol.UnfreezeAssetContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.UnfreezeAssetContract;
	  return proto.protocol.UnfreezeAssetContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.UnfreezeAssetContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.UnfreezeAssetContract}
	 */
	proto.protocol.UnfreezeAssetContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.UnfreezeAssetContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.UnfreezeAssetContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.UnfreezeAssetContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.UnfreezeAssetContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UnfreezeAssetContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.UnfreezeAssetContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UnfreezeAssetContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UnfreezeAssetContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.WithdrawBalanceContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.WithdrawBalanceContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.WithdrawBalanceContract.displayName = 'proto.protocol.WithdrawBalanceContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.WithdrawBalanceContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.WithdrawBalanceContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.WithdrawBalanceContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.WithdrawBalanceContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64()
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.WithdrawBalanceContract}
	 */
	proto.protocol.WithdrawBalanceContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.WithdrawBalanceContract;
	  return proto.protocol.WithdrawBalanceContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.WithdrawBalanceContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.WithdrawBalanceContract}
	 */
	proto.protocol.WithdrawBalanceContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.WithdrawBalanceContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.WithdrawBalanceContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.WithdrawBalanceContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.WithdrawBalanceContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.WithdrawBalanceContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.WithdrawBalanceContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.WithdrawBalanceContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.WithdrawBalanceContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.UpdateAssetContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.UpdateAssetContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.UpdateAssetContract.displayName = 'proto.protocol.UpdateAssetContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.UpdateAssetContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.UpdateAssetContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.UpdateAssetContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.UpdateAssetContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      description: msg.getDescription_asB64(),
	      url: msg.getUrl_asB64(),
	      newLimit: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	      newPublicLimit: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.UpdateAssetContract}
	 */
	proto.protocol.UpdateAssetContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.UpdateAssetContract;
	  return proto.protocol.UpdateAssetContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.UpdateAssetContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.UpdateAssetContract}
	 */
	proto.protocol.UpdateAssetContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setDescription(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setUrl(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setNewLimit(value);
	        break;
	      case 5:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setNewPublicLimit(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateAssetContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.UpdateAssetContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.UpdateAssetContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.UpdateAssetContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getDescription_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getUrl_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getNewLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	  f = message.getNewPublicLimit();
	  if (f !== 0) {
	    writer.writeInt64(
	        5,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateAssetContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.UpdateAssetContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateAssetContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateAssetContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes description = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateAssetContract.prototype.getDescription = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes description = 2;
	 * This is a type-conversion wrapper around `getDescription()`
	 * @return {string}
	 */
	proto.protocol.UpdateAssetContract.prototype.getDescription_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getDescription()));
	};


	/**
	 * optional bytes description = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getDescription()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateAssetContract.prototype.getDescription_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getDescription()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateAssetContract.prototype.setDescription = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes url = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.UpdateAssetContract.prototype.getUrl = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes url = 3;
	 * This is a type-conversion wrapper around `getUrl()`
	 * @return {string}
	 */
	proto.protocol.UpdateAssetContract.prototype.getUrl_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getUrl()));
	};


	/**
	 * optional bytes url = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUrl()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.UpdateAssetContract.prototype.getUrl_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getUrl()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.UpdateAssetContract.prototype.setUrl = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 new_limit = 4;
	 * @return {number}
	 */
	proto.protocol.UpdateAssetContract.prototype.getNewLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.UpdateAssetContract.prototype.setNewLimit = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 new_public_limit = 5;
	 * @return {number}
	 */
	proto.protocol.UpdateAssetContract.prototype.getNewPublicLimit = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.UpdateAssetContract.prototype.setNewPublicLimit = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ProposalCreateContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ProposalCreateContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ProposalCreateContract.displayName = 'proto.protocol.ProposalCreateContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ProposalCreateContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ProposalCreateContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ProposalCreateContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ProposalCreateContract.toObject = function(includeInstance, msg) {
	    var f, obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : []
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ProposalCreateContract}
	 */
	proto.protocol.ProposalCreateContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ProposalCreateContract;
	  return proto.protocol.ProposalCreateContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ProposalCreateContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ProposalCreateContract}
	 */
	proto.protocol.ProposalCreateContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = msg.getParametersMap();
	        reader.readMessage(value, function(message, reader) {
	          googleProtobuf.Map.deserializeBinary(message, reader, googleProtobuf.BinaryReader.prototype.readInt64, googleProtobuf.BinaryReader.prototype.readInt64);
	        });
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ProposalCreateContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ProposalCreateContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ProposalCreateContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ProposalCreateContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getParametersMap(true);
	  if (f && f.getLength() > 0) {
	    f.serializeBinary(2, writer, googleProtobuf.BinaryWriter.prototype.writeInt64, googleProtobuf.BinaryWriter.prototype.writeInt64);
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ProposalCreateContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ProposalCreateContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ProposalCreateContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ProposalCreateContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * map<int64, int64> parameters = 2;
	 * @param {boolean=} opt_noLazyCreate Do not create the map if
	 * empty, instead returning `undefined`
	 * @return {!jspb.Map<number,number>}
	 */
	proto.protocol.ProposalCreateContract.prototype.getParametersMap = function(opt_noLazyCreate) {
	  return /** @type {!jspb.Map<number,number>} */ (
	      googleProtobuf.Message.getMapField(this, 2, opt_noLazyCreate,
	          null));
	};


	proto.protocol.ProposalCreateContract.prototype.clearParametersMap = function() {
	  this.getParametersMap().clear();
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ProposalApproveContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ProposalApproveContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ProposalApproveContract.displayName = 'proto.protocol.ProposalApproveContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ProposalApproveContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ProposalApproveContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ProposalApproveContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ProposalApproveContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      proposalId: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	      isAddApproval: googleProtobuf.Message.getFieldWithDefault(msg, 3, false)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ProposalApproveContract}
	 */
	proto.protocol.ProposalApproveContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ProposalApproveContract;
	  return proto.protocol.ProposalApproveContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ProposalApproveContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ProposalApproveContract}
	 */
	proto.protocol.ProposalApproveContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setProposalId(value);
	        break;
	      case 3:
	        var value = /** @type {boolean} */ (reader.readBool());
	        msg.setIsAddApproval(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ProposalApproveContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ProposalApproveContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ProposalApproveContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ProposalApproveContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getProposalId();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	  f = message.getIsAddApproval();
	  if (f) {
	    writer.writeBool(
	        3,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ProposalApproveContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ProposalApproveContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ProposalApproveContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ProposalApproveContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 proposal_id = 2;
	 * @return {number}
	 */
	proto.protocol.ProposalApproveContract.prototype.getProposalId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ProposalApproveContract.prototype.setProposalId = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bool is_add_approval = 3;
	 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	 * You should avoid comparisons like {@code val === true/false} in those cases.
	 * @return {boolean}
	 */
	proto.protocol.ProposalApproveContract.prototype.getIsAddApproval = function() {
	  return /** @type {boolean} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, false));
	};


	/** @param {boolean} value */
	proto.protocol.ProposalApproveContract.prototype.setIsAddApproval = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ProposalDeleteContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ProposalDeleteContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ProposalDeleteContract.displayName = 'proto.protocol.ProposalDeleteContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ProposalDeleteContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ProposalDeleteContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ProposalDeleteContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ProposalDeleteContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      proposalId: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ProposalDeleteContract}
	 */
	proto.protocol.ProposalDeleteContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ProposalDeleteContract;
	  return proto.protocol.ProposalDeleteContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ProposalDeleteContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ProposalDeleteContract}
	 */
	proto.protocol.ProposalDeleteContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setProposalId(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ProposalDeleteContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ProposalDeleteContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ProposalDeleteContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ProposalDeleteContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getProposalId();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ProposalDeleteContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ProposalDeleteContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ProposalDeleteContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ProposalDeleteContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 proposal_id = 2;
	 * @return {number}
	 */
	proto.protocol.ProposalDeleteContract.prototype.getProposalId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ProposalDeleteContract.prototype.setProposalId = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.CreateSmartContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.CreateSmartContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.CreateSmartContract.displayName = 'proto.protocol.CreateSmartContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.CreateSmartContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.CreateSmartContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.CreateSmartContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.CreateSmartContract.toObject = function(includeInstance, msg) {
	    var f, obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      newContract: (f = msg.getNewContract()) && Tron_pb.SmartContract.toObject(includeInstance, f),
	      callTokenValue: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	      tokenId: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.CreateSmartContract}
	 */
	proto.protocol.CreateSmartContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.CreateSmartContract;
	  return proto.protocol.CreateSmartContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.CreateSmartContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.CreateSmartContract}
	 */
	proto.protocol.CreateSmartContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = new Tron_pb.SmartContract;
	        reader.readMessage(value,Tron_pb.SmartContract.deserializeBinaryFromReader);
	        msg.setNewContract(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setCallTokenValue(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setTokenId(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.CreateSmartContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.CreateSmartContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.CreateSmartContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.CreateSmartContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getNewContract();
	  if (f != null) {
	    writer.writeMessage(
	        2,
	        f,
	        Tron_pb.SmartContract.serializeBinaryToWriter
	    );
	  }
	  f = message.getCallTokenValue();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	  f = message.getTokenId();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.CreateSmartContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.CreateSmartContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.CreateSmartContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.CreateSmartContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional SmartContract new_contract = 2;
	 * @return {?proto.protocol.SmartContract}
	 */
	proto.protocol.CreateSmartContract.prototype.getNewContract = function() {
	  return /** @type{?proto.protocol.SmartContract} */ (
	      googleProtobuf.Message.getWrapperField(this, Tron_pb.SmartContract, 2));
	};


	/** @param {?proto.protocol.SmartContract|undefined} value */
	proto.protocol.CreateSmartContract.prototype.setNewContract = function(value) {
	  googleProtobuf.Message.setWrapperField(this, 2, value);
	};


	proto.protocol.CreateSmartContract.prototype.clearNewContract = function() {
	  this.setNewContract(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {!boolean}
	 */
	proto.protocol.CreateSmartContract.prototype.hasNewContract = function() {
	  return googleProtobuf.Message.getField(this, 2) != null;
	};


	/**
	 * optional int64 call_token_value = 3;
	 * @return {number}
	 */
	proto.protocol.CreateSmartContract.prototype.getCallTokenValue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.CreateSmartContract.prototype.setCallTokenValue = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 token_id = 4;
	 * @return {number}
	 */
	proto.protocol.CreateSmartContract.prototype.getTokenId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.CreateSmartContract.prototype.setTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.TriggerSmartContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.TriggerSmartContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.TriggerSmartContract.displayName = 'proto.protocol.TriggerSmartContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.TriggerSmartContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.TriggerSmartContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.TriggerSmartContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.TriggerSmartContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      contractAddress: msg.getContractAddress_asB64(),
	      callValue: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	      data: msg.getData_asB64(),
	      callTokenValue: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0),
	      tokenId: googleProtobuf.Message.getFieldWithDefault(msg, 6, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.TriggerSmartContract}
	 */
	proto.protocol.TriggerSmartContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.TriggerSmartContract;
	  return proto.protocol.TriggerSmartContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.TriggerSmartContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.TriggerSmartContract}
	 */
	proto.protocol.TriggerSmartContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setContractAddress(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setCallValue(value);
	        break;
	      case 4:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setData(value);
	        break;
	      case 5:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setCallTokenValue(value);
	        break;
	      case 6:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setTokenId(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.TriggerSmartContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.TriggerSmartContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.TriggerSmartContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.TriggerSmartContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getContractAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getCallValue();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	  f = message.getData_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        4,
	        f
	    );
	  }
	  f = message.getCallTokenValue();
	  if (f !== 0) {
	    writer.writeInt64(
	        5,
	        f
	    );
	  }
	  f = message.getTokenId();
	  if (f !== 0) {
	    writer.writeInt64(
	        6,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TriggerSmartContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.TriggerSmartContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TriggerSmartContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TriggerSmartContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes contract_address = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TriggerSmartContract.prototype.getContractAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes contract_address = 2;
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {string}
	 */
	proto.protocol.TriggerSmartContract.prototype.getContractAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getContractAddress()));
	};


	/**
	 * optional bytes contract_address = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getContractAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TriggerSmartContract.prototype.getContractAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getContractAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TriggerSmartContract.prototype.setContractAddress = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 call_value = 3;
	 * @return {number}
	 */
	proto.protocol.TriggerSmartContract.prototype.getCallValue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.TriggerSmartContract.prototype.setCallValue = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bytes data = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.TriggerSmartContract.prototype.getData = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes data = 4;
	 * This is a type-conversion wrapper around `getData()`
	 * @return {string}
	 */
	proto.protocol.TriggerSmartContract.prototype.getData_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getData()));
	};


	/**
	 * optional bytes data = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getData()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.TriggerSmartContract.prototype.getData_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getData()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.TriggerSmartContract.prototype.setData = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 call_token_value = 5;
	 * @return {number}
	 */
	proto.protocol.TriggerSmartContract.prototype.getCallTokenValue = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.TriggerSmartContract.prototype.setCallTokenValue = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * optional int64 token_id = 6;
	 * @return {number}
	 */
	proto.protocol.TriggerSmartContract.prototype.getTokenId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 6, 0));
	};


	/** @param {number} value */
	proto.protocol.TriggerSmartContract.prototype.setTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 6, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BuyStorageContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BuyStorageContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BuyStorageContract.displayName = 'proto.protocol.BuyStorageContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.BuyStorageContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.BuyStorageContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.BuyStorageContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.BuyStorageContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      quant: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BuyStorageContract}
	 */
	proto.protocol.BuyStorageContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BuyStorageContract;
	  return proto.protocol.BuyStorageContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BuyStorageContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BuyStorageContract}
	 */
	proto.protocol.BuyStorageContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setQuant(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BuyStorageContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BuyStorageContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BuyStorageContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BuyStorageContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getQuant();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BuyStorageContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.BuyStorageContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BuyStorageContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BuyStorageContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 quant = 2;
	 * @return {number}
	 */
	proto.protocol.BuyStorageContract.prototype.getQuant = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.BuyStorageContract.prototype.setQuant = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.BuyStorageBytesContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.BuyStorageBytesContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.BuyStorageBytesContract.displayName = 'proto.protocol.BuyStorageBytesContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.BuyStorageBytesContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.BuyStorageBytesContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.BuyStorageBytesContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.BuyStorageBytesContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      bytes: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.BuyStorageBytesContract}
	 */
	proto.protocol.BuyStorageBytesContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.BuyStorageBytesContract;
	  return proto.protocol.BuyStorageBytesContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.BuyStorageBytesContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.BuyStorageBytesContract}
	 */
	proto.protocol.BuyStorageBytesContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setBytes(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.BuyStorageBytesContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.BuyStorageBytesContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.BuyStorageBytesContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.BuyStorageBytesContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getBytes();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.BuyStorageBytesContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.BuyStorageBytesContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.BuyStorageBytesContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.BuyStorageBytesContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 bytes = 2;
	 * @return {number}
	 */
	proto.protocol.BuyStorageBytesContract.prototype.getBytes = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.BuyStorageBytesContract.prototype.setBytes = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.SellStorageContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.SellStorageContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.SellStorageContract.displayName = 'proto.protocol.SellStorageContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.SellStorageContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.SellStorageContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.SellStorageContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.SellStorageContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      storageBytes: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.SellStorageContract}
	 */
	proto.protocol.SellStorageContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.SellStorageContract;
	  return proto.protocol.SellStorageContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.SellStorageContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.SellStorageContract}
	 */
	proto.protocol.SellStorageContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setStorageBytes(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.SellStorageContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.SellStorageContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.SellStorageContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.SellStorageContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getStorageBytes();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.SellStorageContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.SellStorageContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.SellStorageContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.SellStorageContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 storage_bytes = 2;
	 * @return {number}
	 */
	proto.protocol.SellStorageContract.prototype.getStorageBytes = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.SellStorageContract.prototype.setStorageBytes = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ExchangeCreateContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ExchangeCreateContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ExchangeCreateContract.displayName = 'proto.protocol.ExchangeCreateContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ExchangeCreateContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ExchangeCreateContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ExchangeCreateContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ExchangeCreateContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      firstTokenId: msg.getFirstTokenId_asB64(),
	      firstTokenBalance: googleProtobuf.Message.getFieldWithDefault(msg, 3, 0),
	      secondTokenId: msg.getSecondTokenId_asB64(),
	      secondTokenBalance: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ExchangeCreateContract}
	 */
	proto.protocol.ExchangeCreateContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ExchangeCreateContract;
	  return proto.protocol.ExchangeCreateContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ExchangeCreateContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ExchangeCreateContract}
	 */
	proto.protocol.ExchangeCreateContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setFirstTokenId(value);
	        break;
	      case 3:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setFirstTokenBalance(value);
	        break;
	      case 4:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setSecondTokenId(value);
	        break;
	      case 5:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setSecondTokenBalance(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeCreateContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ExchangeCreateContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ExchangeCreateContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ExchangeCreateContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getFirstTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        2,
	        f
	    );
	  }
	  f = message.getFirstTokenBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	        3,
	        f
	    );
	  }
	  f = message.getSecondTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        4,
	        f
	    );
	  }
	  f = message.getSecondTokenBalance();
	  if (f !== 0) {
	    writer.writeInt64(
	        5,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeCreateContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional bytes first_token_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getFirstTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes first_token_id = 2;
	 * This is a type-conversion wrapper around `getFirstTokenId()`
	 * @return {string}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getFirstTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getFirstTokenId()));
	};


	/**
	 * optional bytes first_token_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getFirstTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getFirstTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getFirstTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeCreateContract.prototype.setFirstTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional int64 first_token_balance = 3;
	 * @return {number}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getFirstTokenBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeCreateContract.prototype.setFirstTokenBalance = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional bytes second_token_id = 4;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getSecondTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * optional bytes second_token_id = 4;
	 * This is a type-conversion wrapper around `getSecondTokenId()`
	 * @return {string}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getSecondTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getSecondTokenId()));
	};


	/**
	 * optional bytes second_token_id = 4;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getSecondTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getSecondTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getSecondTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeCreateContract.prototype.setSecondTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 second_token_balance = 5;
	 * @return {number}
	 */
	proto.protocol.ExchangeCreateContract.prototype.getSecondTokenBalance = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeCreateContract.prototype.setSecondTokenBalance = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ExchangeInjectContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ExchangeInjectContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ExchangeInjectContract.displayName = 'proto.protocol.ExchangeInjectContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ExchangeInjectContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ExchangeInjectContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ExchangeInjectContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ExchangeInjectContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      exchangeId: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	      tokenId: msg.getTokenId_asB64(),
	      quant: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ExchangeInjectContract}
	 */
	proto.protocol.ExchangeInjectContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ExchangeInjectContract;
	  return proto.protocol.ExchangeInjectContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ExchangeInjectContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ExchangeInjectContract}
	 */
	proto.protocol.ExchangeInjectContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setExchangeId(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setTokenId(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setQuant(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeInjectContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ExchangeInjectContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ExchangeInjectContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ExchangeInjectContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getExchangeId();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	  f = message.getTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getQuant();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeInjectContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 exchange_id = 2;
	 * @return {number}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getExchangeId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeInjectContract.prototype.setExchangeId = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes token_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes token_id = 3;
	 * This is a type-conversion wrapper around `getTokenId()`
	 * @return {string}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTokenId()));
	};


	/**
	 * optional bytes token_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeInjectContract.prototype.setTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 quant = 4;
	 * @return {number}
	 */
	proto.protocol.ExchangeInjectContract.prototype.getQuant = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeInjectContract.prototype.setQuant = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ExchangeWithdrawContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ExchangeWithdrawContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ExchangeWithdrawContract.displayName = 'proto.protocol.ExchangeWithdrawContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ExchangeWithdrawContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ExchangeWithdrawContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ExchangeWithdrawContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ExchangeWithdrawContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      exchangeId: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	      tokenId: msg.getTokenId_asB64(),
	      quant: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ExchangeWithdrawContract}
	 */
	proto.protocol.ExchangeWithdrawContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ExchangeWithdrawContract;
	  return proto.protocol.ExchangeWithdrawContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ExchangeWithdrawContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ExchangeWithdrawContract}
	 */
	proto.protocol.ExchangeWithdrawContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setExchangeId(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setTokenId(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setQuant(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ExchangeWithdrawContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ExchangeWithdrawContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ExchangeWithdrawContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getExchangeId();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	  f = message.getTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getQuant();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeWithdrawContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 exchange_id = 2;
	 * @return {number}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getExchangeId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeWithdrawContract.prototype.setExchangeId = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes token_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes token_id = 3;
	 * This is a type-conversion wrapper around `getTokenId()`
	 * @return {string}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTokenId()));
	};


	/**
	 * optional bytes token_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeWithdrawContract.prototype.setTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 quant = 4;
	 * @return {number}
	 */
	proto.protocol.ExchangeWithdrawContract.prototype.getQuant = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeWithdrawContract.prototype.setQuant = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};



	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.protocol.ExchangeTransactionContract = function(opt_data) {
	  googleProtobuf.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.protocol.ExchangeTransactionContract, googleProtobuf.Message);
	if (goog.DEBUG && !COMPILED) {
	  proto.protocol.ExchangeTransactionContract.displayName = 'proto.protocol.ExchangeTransactionContract';
	}


	if (googleProtobuf.Message.GENERATE_TO_OBJECT) {
	  /**
	   * Creates an object representation of this proto suitable for use in Soy templates.
	   * Field names that are reserved in JavaScript and will be renamed to pb_name.
	   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	   * For the list of reserved names please see:
	   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	   *     for transitional soy proto support: http://goto/soy-param-migration
	   * @return {!Object}
	   */
	  proto.protocol.ExchangeTransactionContract.prototype.toObject = function(opt_includeInstance) {
	    return proto.protocol.ExchangeTransactionContract.toObject(opt_includeInstance, this);
	  };


	  /**
	   * Static version of the {@see toObject} method.
	   * @param {boolean|undefined} includeInstance Whether to include the JSPB
	   *     instance for transitional soy proto support:
	   *     http://goto/soy-param-migration
	   * @param {!proto.protocol.ExchangeTransactionContract} msg The msg instance to transform.
	   * @return {!Object}
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */
	  proto.protocol.ExchangeTransactionContract.toObject = function(includeInstance, msg) {
	    var obj = {
	      ownerAddress: msg.getOwnerAddress_asB64(),
	      exchangeId: googleProtobuf.Message.getFieldWithDefault(msg, 2, 0),
	      tokenId: msg.getTokenId_asB64(),
	      quant: googleProtobuf.Message.getFieldWithDefault(msg, 4, 0),
	      expected: googleProtobuf.Message.getFieldWithDefault(msg, 5, 0)
	    };

	    if (includeInstance) {
	      obj.$jspbMessageInstance = msg;
	    }
	    return obj;
	  };
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.protocol.ExchangeTransactionContract}
	 */
	proto.protocol.ExchangeTransactionContract.deserializeBinary = function(bytes) {
	  var reader = new googleProtobuf.BinaryReader(bytes);
	  var msg = new proto.protocol.ExchangeTransactionContract;
	  return proto.protocol.ExchangeTransactionContract.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.protocol.ExchangeTransactionContract} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.protocol.ExchangeTransactionContract}
	 */
	proto.protocol.ExchangeTransactionContract.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	      case 1:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setOwnerAddress(value);
	        break;
	      case 2:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setExchangeId(value);
	        break;
	      case 3:
	        var value = /** @type {!Uint8Array} */ (reader.readBytes());
	        msg.setTokenId(value);
	        break;
	      case 4:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setQuant(value);
	        break;
	      case 5:
	        var value = /** @type {number} */ (reader.readInt64());
	        msg.setExpected(value);
	        break;
	      default:
	        reader.skipField();
	        break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.serializeBinary = function() {
	  var writer = new googleProtobuf.BinaryWriter();
	  proto.protocol.ExchangeTransactionContract.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.protocol.ExchangeTransactionContract} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.protocol.ExchangeTransactionContract.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getOwnerAddress_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        1,
	        f
	    );
	  }
	  f = message.getExchangeId();
	  if (f !== 0) {
	    writer.writeInt64(
	        2,
	        f
	    );
	  }
	  f = message.getTokenId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	        3,
	        f
	    );
	  }
	  f = message.getQuant();
	  if (f !== 0) {
	    writer.writeInt64(
	        4,
	        f
	    );
	  }
	  f = message.getExpected();
	  if (f !== 0) {
	    writer.writeInt64(
	        5,
	        f
	    );
	  }
	};


	/**
	 * optional bytes owner_address = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getOwnerAddress = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes owner_address = 1;
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {string}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getOwnerAddress_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getOwnerAddress()));
	};


	/**
	 * optional bytes owner_address = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getOwnerAddress()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getOwnerAddress_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getOwnerAddress()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeTransactionContract.prototype.setOwnerAddress = function(value) {
	  googleProtobuf.Message.setField(this, 1, value);
	};


	/**
	 * optional int64 exchange_id = 2;
	 * @return {number}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getExchangeId = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 2, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeTransactionContract.prototype.setExchangeId = function(value) {
	  googleProtobuf.Message.setField(this, 2, value);
	};


	/**
	 * optional bytes token_id = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getTokenId = function() {
	  return /** @type {!(string|Uint8Array)} */ (googleProtobuf.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes token_id = 3;
	 * This is a type-conversion wrapper around `getTokenId()`
	 * @return {string}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getTokenId_asB64 = function() {
	  return /** @type {string} */ (googleProtobuf.Message.bytesAsB64(
	      this.getTokenId()));
	};


	/**
	 * optional bytes token_id = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getTokenId()`
	 * @return {!Uint8Array}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getTokenId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (googleProtobuf.Message.bytesAsU8(
	      this.getTokenId()));
	};


	/** @param {!(string|Uint8Array)} value */
	proto.protocol.ExchangeTransactionContract.prototype.setTokenId = function(value) {
	  googleProtobuf.Message.setField(this, 3, value);
	};


	/**
	 * optional int64 quant = 4;
	 * @return {number}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getQuant = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 4, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeTransactionContract.prototype.setQuant = function(value) {
	  googleProtobuf.Message.setField(this, 4, value);
	};


	/**
	 * optional int64 expected = 5;
	 * @return {number}
	 */
	proto.protocol.ExchangeTransactionContract.prototype.getExpected = function() {
	  return /** @type {number} */ (googleProtobuf.Message.getFieldWithDefault(this, 5, 0));
	};


	/** @param {number} value */
	proto.protocol.ExchangeTransactionContract.prototype.setExpected = function(value) {
	  googleProtobuf.Message.setField(this, 5, value);
	};


	/**
	 * @enum {number}
	 */
	proto.protocol.ResourceCode = {
	  BANDWIDTH: 0,
	  ENERGY: 1
	};

	goog.object.extend(exports, proto.protocol);
	});

	const decode58Check$1 = crypto$2.decode58Check;
	const {Block, Transaction, Account} = Tron_pb;

	const encodeString$1 = code.encodeString;

	const {
	  TransferContract,
	  TransferAssetContract,
	  AccountUpdateContract,
	  VoteWitnessContract,
	  ParticipateAssetIssueContract,
	  AssetIssueContract,
	  FreezeBalanceContract,
	  UnfreezeBalanceContract,
	  WitnessUpdateContract,
	  WithdrawBalanceContract,
	  WitnessCreateContract,
	  UnfreezeAssetContract,
	  ExchangeCreateContract,
	  ExchangeInjectContract,
	  ExchangeWithdrawContract,
	  ExchangeTransactionContract,
	  UpdateAssetContract,
	} = Contract_pb;

	function buildTransferContract(message, contractType, typeName) {
	  let anyValue = new any_pb.Any();
	  anyValue.pack(message.serializeBinary(), "protocol." + typeName);
	  let contract = new Transaction.Contract();
	  contract.setType(contractType);
	  contract.setParameter(anyValue);
	  let raw = new Transaction.raw();
	  raw.addContract(contract);
	  // raw.setTimestamp(new Date().getTime() * 1000000);

	  let transaction = new Transaction();
	  transaction.setRawData(raw);
	  return transaction;
	}

	function buildTransferTransaction(token, from, to, amount) {

	  if (token === '_') {

	    let transferContract = new TransferContract();
	    transferContract.setToAddress(Uint8Array.from(decode58Check$1(to)));
	    transferContract.setOwnerAddress(Uint8Array.from(decode58Check$1(from)));
	    transferContract.setAmount(amount);

	    return buildTransferContract(
	      transferContract,
	      Transaction.Contract.ContractType.TRANSFERCONTRACT,
	      "TransferContract");
	  } else {

	    let transferContract = new TransferAssetContract();
	    transferContract.setToAddress(Uint8Array.from(decode58Check$1(to)));
	    transferContract.setOwnerAddress(Uint8Array.from(decode58Check$1(from)));
	    transferContract.setAmount(amount);
	    transferContract.setAssetName(encodeString$1(token));

	    return buildTransferContract(
	      transferContract,
	      Transaction.Contract.ContractType.TRANSFERASSETCONTRACT,
	      "TransferAssetContract");
	  }
	}

	function buildAccountUpdate(address, name) {
	  let contract = new AccountUpdateContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setAccountName(encodeString$1(name));

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.ACCOUNTUPDATECONTRACT,
	    "AccountUpdateContract");
	}

	function buildAssetUpdate(address, description, url) {
	  let contract = new UpdateAssetContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setDescription(encodeString$1(description));
	  contract.setUrl(encodeString$1(url));

	  return buildTransferContract(
	      contract,
	      Transaction.Contract.ContractType.UPDATEASSETCONTRACT,
	      "UpdateAssetContract");
	}

	function buildWitnessCreate(address, url) {
	  let contract = new WitnessCreateContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setUrl(encodeString$1(url));

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.WITNESSCREATECONTRACT,
	    "WitnessCreateContract");
	}

	function buildWitnessUpdate(address, url) {
	  let contract = new WitnessUpdateContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setUpdateUrl(encodeString$1(url));

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.WITNESSUPDATECONTRACT,
	    "WitnessUpdateContract");
	}

	function buildWithdrawBalance(address) {
	  let contract = new WithdrawBalanceContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.WITHDRAWBALANCECONTRACT,
	    "WithdrawBalanceContract");
	}

	function buildVote(address, votes) {
	  let contract = new VoteWitnessContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));

	  for (let address of Object.keys(votes)) {
	    let vote = new VoteWitnessContract.Vote();
	    vote.setVoteAddress(Uint8Array.from(decode58Check$1(address)));
	    let numberOfVotes = parseInt(votes[address]);
	    if (isNaN(numberOfVotes) || numberOfVotes <= 0) {
	      continue;
	    }
	    vote.setVoteCount(numberOfVotes);
	    contract.addVotes(vote);
	  }

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.VOTEWITNESSCONTRACT,
	    "VoteWitnessContract");
	}


	function buildAssetParticipate(address, issuerAddress, token, amount) {
	  let contract = new ParticipateAssetIssueContract();

	  contract.setToAddress(Uint8Array.from(decode58Check$1(issuerAddress)));
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setAssetName(encodeString$1(token));
	  contract.setAmount(amount);

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.PARTICIPATEASSETISSUECONTRACT,
	    "ParticipateAssetIssueContract");
	}

	function buildAssetIssue(options) {

	  let contract = new AssetIssueContract();
	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(options.address)));
	  contract.setName(encodeString$1(options.name));
	  contract.setAbbr(encodeString$1(options.shortName));
	  contract.setTotalSupply(options.totalSupply);
	  contract.setNum(options.num);
	  contract.setEndTime(Date.parse(options.endTime));
	  contract.setStartTime(Date.parse(options.startTime));
	  contract.setTrxNum(options.trxNum);
	  contract.setPrecision(options.precision);
	  contract.setDescription(encodeString$1(options.description));
	  contract.setUrl(encodeString$1(options.url));
	  contract.setPublicFreeAssetNetUsage(0);
	  contract.setFreeAssetNetLimit(0);
	  contract.setPublicFreeAssetNetLimit(0);

	  if (options.frozenSupply) {
	    for (let frozenSupply of options.frozenSupply) {
	      let frozenSupplyContract = new AssetIssueContract.FrozenSupply();
	      frozenSupplyContract.setFrozenAmount(frozenSupply.amount);
	      frozenSupplyContract.setFrozenDays(frozenSupply.days);
	      contract.addFrozenSupply(frozenSupplyContract);
	    }
	  }

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.ASSETISSUECONTRACT,
	    "AssetIssueContract");
	}

	/**
	 * Freeze balance
	 *
	 * @param address From which address to freze
	 * @param amount The amount of TRX to freeze
	 * @param duration Duration in days
	 * @param andwith or energy   Bandwidth Point = 0，Energy = 1
	 */
	function buildFreezeBalance(address, amount, duration, resource, receiver) {
	  let contract = new FreezeBalanceContract();

	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setFrozenBalance(amount);
	  contract.setFrozenDuration(duration);
	  contract.setResource(resource);
	  if(receiver) {
	    contract.setReceiverAddress(Uint8Array.from(decode58Check$1(receiver)));
	  }
	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.FREEZEBALANCECONTRACT,
	    "FreezeBalanceContract");
	}

	/**
	 * Unfreeze balance
	 *
	 * @param address From which address to freeze
	 */
	function buildUnfreezeBalance(address, resource, receiver) {
	  let contract = new UnfreezeBalanceContract();

	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	  contract.setResource(resource);
	  if(receiver) {
	    contract.setReceiverAddress(Uint8Array.from(decode58Check$1(receiver)));
	  }
	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.UNFREEZEBALANCECONTRACT,
	    "UnfreezeBalanceContract");
	}

	/**
	 * Unfreeze Assets
	 *
	 * @param address From which address to unfreeze
	 */
	function buildUnfreezeAsset(address) {
	  let contract = new UnfreezeAssetContract();

	  contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));

	  return buildTransferContract(
	    contract,
	    Transaction.Contract.ContractType.UNFREEZEASSETCONTRACT,
	    "UnfreezeAssetContract");
	}

	/**
	 * Create Exchange
	 *
	 * @param address From  which address to create exchange
	 * @param firstTokenID  The first token id
	 * @param secondTokenId  The second token id
	 * @param firstTokenBalance   The balance of the first token
	 * @param secondTokenBalance  The balance of the second token
	 */
	function buildExchangeCreate(address,firstTokenID,secondTokenId,firstTokenBalance,secondTokenBalance) {
	    let contract = new ExchangeCreateContract();
	    contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	    contract.setFirstTokenId(encodeString$1(firstTokenID));
	    contract.setFirstTokenBalance(firstTokenBalance);
	    contract.setSecondTokenId(encodeString$1(secondTokenId));
	    contract.setSecondTokenBalance(secondTokenBalance);

	    return buildTransferContract(
	        contract,
	        Transaction.Contract.ContractType.EXCHANGECREATECONTRACT,
	        "ExchangeCreateContract");
	}

	/**
	 * Inject Exchange
	 *
	 * @param address  From which address to create exchange
	 * @param exchangeId  The id of the transaction pair
	 * @param tokenId  The id of the token to be funded
	 * @param quant  The amount of the token to be injected
	 */
	function buildExchangeInject(address,exchangeId, tokenId, quant) {
	    let contract = new ExchangeInjectContract();
	    contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	    contract.setExchangeId(exchangeId);
	    contract.setTokenId(encodeString$1(tokenId));
	    contract.setQuant(quant);

	    return buildTransferContract(
	        contract,
	        Transaction.Contract.ContractType.EXCHANGEINJECTCONTRACT,
	        "ExchangeInjectContract");
	}

	/**
	 * Withdraw Exchange
	 *
	 * @param address  From which address to create exchange
	 * @param exchangeId  The id of the transaction pair
	 * @param tokenId  The id of the token to be funded
	 * @param quant  The amount of the token to be injected
	 */
	function buildExchangeWithdraw(address,exchangeId, tokenId, quant) {
	    let contract = new ExchangeWithdrawContract();
	    contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	    contract.setExchangeId(exchangeId);
	    contract.setTokenId(encodeString$1(tokenId));
	    contract.setQuant(quant);

	    return buildTransferContract(
	        contract,
	        Transaction.Contract.ContractType.EXCHANGEWITHDRAWCONTRACT,
	        "ExchangeWithdrawContract");
	}


	/**
	 * Withdraw Exchange
	 *
	 * @param address  From which address to create exchange
	 * @param exchangeId  The id of the transaction pair
	 * @param tokenId  The id of the token to be funded
	 * @param quant  The amount of the token to be injected
	 * @param expected  The minimum amount of another token expected to be obtained. If it is less than this value, the transaction will not succeed
	 */
	function buildTransactionExchange(address,exchange_id, token_id, quant, expected) {
	    let contract = new ExchangeTransactionContract();
	    contract.setOwnerAddress(Uint8Array.from(decode58Check$1(address)));
	    contract.setExchangeId(exchange_id);
	    contract.setTokenId(encodeString$1(token_id));
	    contract.setQuant(quant);
	    contract.setExpected(expected);

	    return buildTransferContract(
	        contract,
	        Transaction.Contract.ContractType.EXCHANGETRANSACTIONCONTRACT,
	        "ExchangeTransactionContract");
	}


	var transactionBuilder = {
	  buildTransferTransaction,
	  buildAccountUpdate,
	  buildAssetParticipate,
	  buildVote,
	  buildFreezeBalance,
	  buildUnfreezeBalance,
	  buildAssetIssue,
	  buildWitnessUpdate,
	  buildWithdrawBalance,
	  buildWitnessCreate,
	  buildUnfreezeAsset,
	  buildExchangeCreate,
	  buildExchangeInject,
	  buildExchangeWithdraw,
	  buildTransactionExchange,
	  buildTransferContract,
	  buildAssetUpdate,
	};
	var transactionBuilder_1 = transactionBuilder.buildTransferTransaction;
	var transactionBuilder_2 = transactionBuilder.buildAccountUpdate;
	var transactionBuilder_3 = transactionBuilder.buildAssetParticipate;
	var transactionBuilder_4 = transactionBuilder.buildVote;
	var transactionBuilder_5 = transactionBuilder.buildFreezeBalance;
	var transactionBuilder_6 = transactionBuilder.buildUnfreezeBalance;
	var transactionBuilder_7 = transactionBuilder.buildAssetIssue;

	var sha$1 = createCommonjsModule(function (module, exports) {
	(function(Y){function C(c,a,b){var e=0,h=[],n=0,g,l,d,f,m,q,u,r,I=!1,v=[],w=[],t,y=!1,z=!1,x=-1;b=b||{};g=b.encoding||"UTF8";t=b.numRounds||1;if(t!==parseInt(t,10)||1>t)throw Error("numRounds must a integer >= 1");if("SHA-1"===c)m=512,q=K,u=Z,f=160,r=function(a){return a.slice()};else if(0===c.lastIndexOf("SHA-",0))if(q=function(a,b){return L(a,b,c)},u=function(a,b,h,e){var k,f;if("SHA-224"===c||"SHA-256"===c)k=(b+65>>>9<<4)+15,f=16;else if("SHA-384"===c||"SHA-512"===c)k=(b+129>>>10<<
	5)+31,f=32;else throw Error("Unexpected error in SHA-2 implementation");for(;a.length<=k;)a.push(0);a[b>>>5]|=128<<24-b%32;b=b+h;a[k]=b&4294967295;a[k-1]=b/4294967296|0;h=a.length;for(b=0;b<h;b+=f)e=L(a.slice(b,b+f),e,c);if("SHA-224"===c)a=[e[0],e[1],e[2],e[3],e[4],e[5],e[6]];else if("SHA-256"===c)a=e;else if("SHA-384"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,e[4].b,e[5].a,e[5].b];else if("SHA-512"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,
	e[4].b,e[5].a,e[5].b,e[6].a,e[6].b,e[7].a,e[7].b];else throw Error("Unexpected error in SHA-2 implementation");return a},r=function(a){return a.slice()},"SHA-224"===c)m=512,f=224;else if("SHA-256"===c)m=512,f=256;else if("SHA-384"===c)m=1024,f=384;else if("SHA-512"===c)m=1024,f=512;else throw Error("Chosen SHA variant is not supported");else if(0===c.lastIndexOf("SHA3-",0)||0===c.lastIndexOf("SHAKE",0)){var F=6;q=D;r=function(a){var c=[],e;for(e=0;5>e;e+=1)c[e]=a[e].slice();return c};x=1;if("SHA3-224"===
	c)m=1152,f=224;else if("SHA3-256"===c)m=1088,f=256;else if("SHA3-384"===c)m=832,f=384;else if("SHA3-512"===c)m=576,f=512;else if("SHAKE128"===c)m=1344,f=-1,F=31,z=!0;else if("SHAKE256"===c)m=1088,f=-1,F=31,z=!0;else throw Error("Chosen SHA variant is not supported");u=function(a,c,e,b,h){e=m;var k=F,f,g=[],n=e>>>5,l=0,d=c>>>5;for(f=0;f<d&&c>=e;f+=n)b=D(a.slice(f,f+n),b),c-=e;a=a.slice(f);for(c%=e;a.length<n;)a.push(0);f=c>>>3;a[f>>2]^=k<<f%4*8;a[n-1]^=2147483648;for(b=D(a,b);32*g.length<h;){a=b[l%
	5][l/5|0];g.push(a.b);if(32*g.length>=h)break;g.push(a.a);l+=1;0===64*l%e&&D(null,b);}return g};}else throw Error("Chosen SHA variant is not supported");d=M(a,g,x);l=A(c);this.setHMACKey=function(a,b,h){var k;if(!0===I)throw Error("HMAC key already set");if(!0===y)throw Error("Cannot set HMAC key after calling update");if(!0===z)throw Error("SHAKE is not supported for HMAC");g=(h||{}).encoding||"UTF8";b=M(b,g,x)(a);a=b.binLen;b=b.value;k=m>>>3;h=k/4-1;if(k<a/8){for(b=u(b,a,0,A(c),f);b.length<=h;)b.push(0);
	b[h]&=4294967040;}else if(k>a/8){for(;b.length<=h;)b.push(0);b[h]&=4294967040;}for(a=0;a<=h;a+=1)v[a]=b[a]^909522486,w[a]=b[a]^1549556828;l=q(v,l);e=m;I=!0;};this.update=function(a){var c,b,k,f=0,g=m>>>5;c=d(a,h,n);a=c.binLen;b=c.value;c=a>>>5;for(k=0;k<c;k+=g)f+m<=a&&(l=q(b.slice(k,k+g),l),f+=m);e+=f;h=b.slice(f>>>5);n=a%m;y=!0;};this.getHash=function(a,b){var k,g,d,m;if(!0===I)throw Error("Cannot call getHash after setting HMAC key");d=N(b);if(!0===z){if(-1===d.shakeLen)throw Error("shakeLen must be specified in options");
	f=d.shakeLen;}switch(a){case "HEX":k=function(a){return O(a,f,x,d)};break;case "B64":k=function(a){return P(a,f,x,d)};break;case "BYTES":k=function(a){return Q(a,f,x)};break;case "ARRAYBUFFER":try{g=new ArrayBuffer(0);}catch(p){throw Error("ARRAYBUFFER not supported by this environment");}k=function(a){return R(a,f,x)};break;default:throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER");}m=u(h.slice(),n,e,r(l),f);for(g=1;g<t;g+=1)!0===z&&0!==f%32&&(m[m.length-1]&=16777215>>>24-f%32),m=u(m,f,
	0,A(c),f);return k(m)};this.getHMAC=function(a,b){var k,g,d,p;if(!1===I)throw Error("Cannot call getHMAC without first setting HMAC key");d=N(b);switch(a){case "HEX":k=function(a){return O(a,f,x,d)};break;case "B64":k=function(a){return P(a,f,x,d)};break;case "BYTES":k=function(a){return Q(a,f,x)};break;case "ARRAYBUFFER":try{k=new ArrayBuffer(0);}catch(v){throw Error("ARRAYBUFFER not supported by this environment");}k=function(a){return R(a,f,x)};break;default:throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");
	}g=u(h.slice(),n,e,r(l),f);p=q(w,A(c));p=u(g,f,m,p,f);return k(p)};}function b(c,a){this.a=c;this.b=a;}function O(c,a,b,e){var h="";a/=8;var n,g,d;d=-1===b?3:0;for(n=0;n<a;n+=1)g=c[n>>>2]>>>8*(d+n%4*b),h+="0123456789abcdef".charAt(g>>>4&15)+"0123456789abcdef".charAt(g&15);return e.outputUpper?h.toUpperCase():h}function P(c,a,b,e){var h="",n=a/8,g,d,p,f;f=-1===b?3:0;for(g=0;g<n;g+=3)for(d=g+1<n?c[g+1>>>2]:0,p=g+2<n?c[g+2>>>2]:0,p=(c[g>>>2]>>>8*(f+g%4*b)&255)<<16|(d>>>8*(f+(g+1)%4*b)&255)<<8|p>>>8*(f+
	(g+2)%4*b)&255,d=0;4>d;d+=1)8*g+6*d<=a?h+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(p>>>6*(3-d)&63):h+=e.b64Pad;return h}function Q(c,a,b){var e="";a/=8;var h,d,g;g=-1===b?3:0;for(h=0;h<a;h+=1)d=c[h>>>2]>>>8*(g+h%4*b)&255,e+=String.fromCharCode(d);return e}function R(c,a,b){a/=8;var e,h=new ArrayBuffer(a),d,g;g=new Uint8Array(h);d=-1===b?3:0;for(e=0;e<a;e+=1)g[e]=c[e>>>2]>>>8*(d+e%4*b)&255;return h}function N(c){var a={outputUpper:!1,b64Pad:"=",shakeLen:-1};c=c||{};
	a.outputUpper=c.outputUpper||!1;!0===c.hasOwnProperty("b64Pad")&&(a.b64Pad=c.b64Pad);if(!0===c.hasOwnProperty("shakeLen")){if(0!==c.shakeLen%8)throw Error("shakeLen must be a multiple of 8");a.shakeLen=c.shakeLen;}if("boolean"!==typeof a.outputUpper)throw Error("Invalid outputUpper formatting option");if("string"!==typeof a.b64Pad)throw Error("Invalid b64Pad formatting option");return a}function M(c,a,b){switch(a){case "UTF8":case "UTF16BE":case "UTF16LE":break;default:throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");
	}switch(c){case "HEX":c=function(a,c,d){var g=a.length,l,p,f,m,q,u;if(0!==g%2)throw Error("String of HEX type must be in byte increments");c=c||[0];d=d||0;q=d>>>3;u=-1===b?3:0;for(l=0;l<g;l+=2){p=parseInt(a.substr(l,2),16);if(isNaN(p))throw Error("String of HEX type contains invalid characters");m=(l>>>1)+q;for(f=m>>>2;c.length<=f;)c.push(0);c[f]|=p<<8*(u+m%4*b);}return{value:c,binLen:4*g+d}};break;case "TEXT":c=function(c,h,d){var g,l,p=0,f,m,q,u,r,t;h=h||[0];d=d||0;q=d>>>3;if("UTF8"===a)for(t=-1===
	b?3:0,f=0;f<c.length;f+=1)for(g=c.charCodeAt(f),l=[],128>g?l.push(g):2048>g?(l.push(192|g>>>6),l.push(128|g&63)):55296>g||57344<=g?l.push(224|g>>>12,128|g>>>6&63,128|g&63):(f+=1,g=65536+((g&1023)<<10|c.charCodeAt(f)&1023),l.push(240|g>>>18,128|g>>>12&63,128|g>>>6&63,128|g&63)),m=0;m<l.length;m+=1){r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=l[m]<<8*(t+r%4*b);p+=1;}else if("UTF16BE"===a||"UTF16LE"===a)for(t=-1===b?2:0,l="UTF16LE"===a&&1!==b||"UTF16LE"!==a&&1===b,f=0;f<c.length;f+=1){g=c.charCodeAt(f);
	!0===l&&(m=g&255,g=m<<8|g>>>8);r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=g<<8*(t+r%4*b);p+=2;}return{value:h,binLen:8*p+d}};break;case "B64":c=function(a,c,d){var g=0,l,p,f,m,q,u,r,t;if(-1===a.search(/^[a-zA-Z0-9=+\/]+$/))throw Error("Invalid character in base-64 string");p=a.indexOf("=");a=a.replace(/\=/g,"");if(-1!==p&&p<a.length)throw Error("Invalid '=' found in base-64 string");c=c||[0];d=d||0;u=d>>>3;t=-1===b?3:0;for(p=0;p<a.length;p+=4){q=a.substr(p,4);for(f=m=0;f<q.length;f+=1)l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(q[f]),
	m|=l<<18-6*f;for(f=0;f<q.length-1;f+=1){r=g+u;for(l=r>>>2;c.length<=l;)c.push(0);c[l]|=(m>>>16-8*f&255)<<8*(t+r%4*b);g+=1;}}return{value:c,binLen:8*g+d}};break;case "BYTES":c=function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;p=d>>>3;q=-1===b?3:0;for(l=0;l<a.length;l+=1)g=a.charCodeAt(l),m=l+p,f=m>>>2,c.length<=f&&c.push(0),c[f]|=g<<8*(q+m%4*b);return{value:c,binLen:8*a.length+d}};break;case "ARRAYBUFFER":try{c=new ArrayBuffer(0);}catch(e){throw Error("ARRAYBUFFER not supported by this environment");}c=
	function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;l=d>>>3;m=-1===b?3:0;q=new Uint8Array(a);for(g=0;g<a.byteLength;g+=1)f=g+l,p=f>>>2,c.length<=p&&c.push(0),c[p]|=q[g]<<8*(m+f%4*b);return{value:c,binLen:8*a.byteLength+d}};break;default:throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");}return c}function y(c,a){return c<<a|c>>>32-a}function S(c,a){return 32<a?(a-=32,new b(c.b<<a|c.a>>>32-a,c.a<<a|c.b>>>32-a)):0!==a?new b(c.a<<a|c.b>>>32-a,c.b<<a|c.a>>>32-a):c}function w(c,a){return c>>>
	a|c<<32-a}function t(c,a){var k=null,k=new b(c.a,c.b);return k=32>=a?new b(k.a>>>a|k.b<<32-a&4294967295,k.b>>>a|k.a<<32-a&4294967295):new b(k.b>>>a-32|k.a<<64-a&4294967295,k.a>>>a-32|k.b<<64-a&4294967295)}function T(c,a){var k=null;return k=32>=a?new b(c.a>>>a,c.b>>>a|c.a<<32-a&4294967295):new b(0,c.a>>>a-32)}function aa(c,a,b){return c&a^~c&b}function ba(c,a,k){return new b(c.a&a.a^~c.a&k.a,c.b&a.b^~c.b&k.b)}function U(c,a,b){return c&a^c&b^a&b}function ca(c,a,k){return new b(c.a&a.a^c.a&k.a^a.a&
	k.a,c.b&a.b^c.b&k.b^a.b&k.b)}function da(c){return w(c,2)^w(c,13)^w(c,22)}function ea(c){var a=t(c,28),k=t(c,34);c=t(c,39);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function fa(c){return w(c,6)^w(c,11)^w(c,25)}function ga(c){var a=t(c,14),k=t(c,18);c=t(c,41);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ha(c){return w(c,7)^w(c,18)^c>>>3}function ia(c){var a=t(c,1),k=t(c,8);c=T(c,7);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ja(c){return w(c,17)^w(c,19)^c>>>10}function ka(c){var a=t(c,19),k=t(c,61);
	c=T(c,6);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function G(c,a){var b=(c&65535)+(a&65535);return((c>>>16)+(a>>>16)+(b>>>16)&65535)<<16|b&65535}function la(c,a,b,e){var h=(c&65535)+(a&65535)+(b&65535)+(e&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)&65535)<<16|h&65535}function H(c,a,b,e,h){var d=(c&65535)+(a&65535)+(b&65535)+(e&65535)+(h&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)+(d>>>16)&65535)<<16|d&65535}function ma(c,a){var d,e,h;d=(c.b&65535)+(a.b&65535);e=(c.b>>>16)+
	(a.b>>>16)+(d>>>16);h=(e&65535)<<16|d&65535;d=(c.a&65535)+(a.a&65535)+(e>>>16);e=(c.a>>>16)+(a.a>>>16)+(d>>>16);return new b((e&65535)<<16|d&65535,h)}function na(c,a,d,e){var h,n,g;h=(c.b&65535)+(a.b&65535)+(d.b&65535)+(e.b&65535);n=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h>>>16);g=(n&65535)<<16|h&65535;h=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(n>>>16);n=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h>>>16);return new b((n&65535)<<16|h&65535,g)}function oa(c,a,d,e,h){var n,g,l;n=(c.b&
	65535)+(a.b&65535)+(d.b&65535)+(e.b&65535)+(h.b&65535);g=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h.b>>>16)+(n>>>16);l=(g&65535)<<16|n&65535;n=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(h.a&65535)+(g>>>16);g=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h.a>>>16)+(n>>>16);return new b((g&65535)<<16|n&65535,l)}function B(c,a){return new b(c.a^a.a,c.b^a.b)}function A(c){var a=[],d;if("SHA-1"===c)a=[1732584193,4023233417,2562383102,271733878,3285377520];else if(0===c.lastIndexOf("SHA-",0))switch(a=
	[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],d=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],c){case "SHA-224":break;case "SHA-256":a=d;break;case "SHA-384":a=[new b(3418070365,a[0]),new b(1654270250,a[1]),new b(2438529370,a[2]),new b(355462360,a[3]),new b(1731405415,a[4]),new b(41048885895,a[5]),new b(3675008525,a[6]),new b(1203062813,a[7])];break;case "SHA-512":a=[new b(d[0],4089235720),new b(d[1],2227873595),
	new b(d[2],4271175723),new b(d[3],1595750129),new b(d[4],2917565137),new b(d[5],725511199),new b(d[6],4215389547),new b(d[7],327033209)];break;default:throw Error("Unknown SHA variant");}else if(0===c.lastIndexOf("SHA3-",0)||0===c.lastIndexOf("SHAKE",0))for(c=0;5>c;c+=1)a[c]=[new b(0,0),new b(0,0),new b(0,0),new b(0,0),new b(0,0)];else throw Error("No SHA variants supported");return a}function K(c,a){var b=[],e,d,n,g,l,p,f;e=a[0];d=a[1];n=a[2];g=a[3];l=a[4];for(f=0;80>f;f+=1)b[f]=16>f?c[f]:y(b[f-
	3]^b[f-8]^b[f-14]^b[f-16],1),p=20>f?H(y(e,5),d&n^~d&g,l,1518500249,b[f]):40>f?H(y(e,5),d^n^g,l,1859775393,b[f]):60>f?H(y(e,5),U(d,n,g),l,2400959708,b[f]):H(y(e,5),d^n^g,l,3395469782,b[f]),l=g,g=n,n=y(d,30),d=e,e=p;a[0]=G(e,a[0]);a[1]=G(d,a[1]);a[2]=G(n,a[2]);a[3]=G(g,a[3]);a[4]=G(l,a[4]);return a}function Z(c,a,b,e){var d;for(d=(a+65>>>9<<4)+15;c.length<=d;)c.push(0);c[a>>>5]|=128<<24-a%32;a+=b;c[d]=a&4294967295;c[d-1]=a/4294967296|0;a=c.length;for(d=0;d<a;d+=16)e=K(c.slice(d,d+16),e);return e}function L(c,
	a,k){var e,h,n,g,l,p,f,m,q,u,r,t,v,w,y,A,z,x,F,B,C,D,E=[],J;if("SHA-224"===k||"SHA-256"===k)u=64,t=1,D=Number,v=G,w=la,y=H,A=ha,z=ja,x=da,F=fa,C=U,B=aa,J=d;else if("SHA-384"===k||"SHA-512"===k)u=80,t=2,D=b,v=ma,w=na,y=oa,A=ia,z=ka,x=ea,F=ga,C=ca,B=ba,J=V;else throw Error("Unexpected error in SHA-2 implementation");k=a[0];e=a[1];h=a[2];n=a[3];g=a[4];l=a[5];p=a[6];f=a[7];for(r=0;r<u;r+=1)16>r?(q=r*t,m=c.length<=q?0:c[q],q=c.length<=q+1?0:c[q+1],E[r]=new D(m,q)):E[r]=w(z(E[r-2]),E[r-7],A(E[r-15]),E[r-
	16]),m=y(f,F(g),B(g,l,p),J[r],E[r]),q=v(x(k),C(k,e,h)),f=p,p=l,l=g,g=v(n,m),n=h,h=e,e=k,k=v(m,q);a[0]=v(k,a[0]);a[1]=v(e,a[1]);a[2]=v(h,a[2]);a[3]=v(n,a[3]);a[4]=v(g,a[4]);a[5]=v(l,a[5]);a[6]=v(p,a[6]);a[7]=v(f,a[7]);return a}function D(c,a){var d,e,h,n,g=[],l=[];if(null!==c)for(e=0;e<c.length;e+=2)a[(e>>>1)%5][(e>>>1)/5|0]=B(a[(e>>>1)%5][(e>>>1)/5|0],new b(c[e+1],c[e]));for(d=0;24>d;d+=1){n=A("SHA3-");for(e=0;5>e;e+=1){h=a[e][0];var p=a[e][1],f=a[e][2],m=a[e][3],q=a[e][4];g[e]=new b(h.a^p.a^f.a^
	m.a^q.a,h.b^p.b^f.b^m.b^q.b);}for(e=0;5>e;e+=1)l[e]=B(g[(e+4)%5],S(g[(e+1)%5],1));for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(a[e][h],l[e]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)n[h][(2*e+3*h)%5]=S(a[e][h],W[e][h]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(n[e][h],new b(~n[(e+1)%5][h].a&n[(e+2)%5][h].a,~n[(e+1)%5][h].b&n[(e+2)%5][h].b));a[0][0]=B(a[0][0],X[d]);}return a}var d,V,W,X;d=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,
	1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,
	2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];V=[new b(d[0],3609767458),new b(d[1],602891725),new b(d[2],3964484399),new b(d[3],2173295548),new b(d[4],4081628472),new b(d[5],3053834265),new b(d[6],2937671579),new b(d[7],3664609560),new b(d[8],2734883394),new b(d[9],1164996542),new b(d[10],1323610764),new b(d[11],3590304994),new b(d[12],4068182383),new b(d[13],991336113),new b(d[14],633803317),new b(d[15],3479774868),new b(d[16],2666613458),new b(d[17],944711139),new b(d[18],2341262773),
	new b(d[19],2007800933),new b(d[20],1495990901),new b(d[21],1856431235),new b(d[22],3175218132),new b(d[23],2198950837),new b(d[24],3999719339),new b(d[25],766784016),new b(d[26],2566594879),new b(d[27],3203337956),new b(d[28],1034457026),new b(d[29],2466948901),new b(d[30],3758326383),new b(d[31],168717936),new b(d[32],1188179964),new b(d[33],1546045734),new b(d[34],1522805485),new b(d[35],2643833823),new b(d[36],2343527390),new b(d[37],1014477480),new b(d[38],1206759142),new b(d[39],344077627),
	new b(d[40],1290863460),new b(d[41],3158454273),new b(d[42],3505952657),new b(d[43],106217008),new b(d[44],3606008344),new b(d[45],1432725776),new b(d[46],1467031594),new b(d[47],851169720),new b(d[48],3100823752),new b(d[49],1363258195),new b(d[50],3750685593),new b(d[51],3785050280),new b(d[52],3318307427),new b(d[53],3812723403),new b(d[54],2003034995),new b(d[55],3602036899),new b(d[56],1575990012),new b(d[57],1125592928),new b(d[58],2716904306),new b(d[59],442776044),new b(d[60],593698344),new b(d[61],
	3733110249),new b(d[62],2999351573),new b(d[63],3815920427),new b(3391569614,3928383900),new b(3515267271,566280711),new b(3940187606,3454069534),new b(4118630271,4000239992),new b(116418474,1914138554),new b(174292421,2731055270),new b(289380356,3203993006),new b(460393269,320620315),new b(685471733,587496836),new b(852142971,1086792851),new b(1017036298,365543100),new b(1126000580,2618297676),new b(1288033470,3409855158),new b(1501505948,4234509866),new b(1607167915,987167468),new b(1816402316,
	1246189591)];X=[new b(0,1),new b(0,32898),new b(2147483648,32906),new b(2147483648,2147516416),new b(0,32907),new b(0,2147483649),new b(2147483648,2147516545),new b(2147483648,32777),new b(0,138),new b(0,136),new b(0,2147516425),new b(0,2147483658),new b(0,2147516555),new b(2147483648,139),new b(2147483648,32905),new b(2147483648,32771),new b(2147483648,32770),new b(2147483648,128),new b(0,32778),new b(2147483648,2147483658),new b(2147483648,2147516545),new b(2147483648,32896),new b(0,2147483649),
	new b(2147483648,2147516424)];W=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];"function"===typeof undefined&&undefined.amd?undefined(function(){return C}):(module.exports&&(module.exports=C),exports=C);})(commonjsGlobal);
	});

	// base-x encoding / decoding
	// Copyright (c) 2018 base-x contributors
	// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
	// Distributed under the MIT software license, see the accompanying
	// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
	// @ts-ignore
	var _Buffer = safeBuffer.Buffer;
	function base$1 (ALPHABET) {
	  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
	  var BASE_MAP = new Uint8Array(256);
	  BASE_MAP.fill(255);
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
	  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
	  function encode (source) {
	    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }
	    if (source.length === 0) { return '' }
	        // Skip & count leading zeroes.
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	        // Allocate enough space in big-endian base58 representation.
	    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
	    var b58 = new Uint8Array(size);
	        // Process the bytes.
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	            // Apply "b58 = b58 * 256 + ch".
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
	        carry += (256 * b58[it1]) >>> 0;
	        b58[it1] = (carry % BASE) >>> 0;
	        carry = (carry / BASE) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      pbegin++;
	    }
	        // Skip leading zeroes in base58 result.
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	        // Translate the result into a string.
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
	    return str
	  }
	  function decodeUnsafe (source) {
	    if (typeof source !== 'string') { throw new TypeError('Expected String') }
	    if (source.length === 0) { return _Buffer.alloc(0) }
	    var psz = 0;
	        // Skip leading spaces.
	    if (source[psz] === ' ') { return }
	        // Skip and count leading '1's.
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	        // Allocate enough space in big-endian base256 representation.
	    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
	    var b256 = new Uint8Array(size);
	        // Process the characters.
	    while (source[psz]) {
	            // Decode character
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	            // Invalid character
	      if (carry === 255) { return }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
	        carry += (BASE * b256[it3]) >>> 0;
	        b256[it3] = (carry % 256) >>> 0;
	        carry = (carry / 256) >>> 0;
	      }
	      if (carry !== 0) { throw new Error('Non-zero carry') }
	      length = i;
	      psz++;
	    }
	        // Skip trailing spaces.
	    if (source[psz] === ' ') { return }
	        // Skip leading zeroes in b256.
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
	    vch.fill(0x00, 0, zeroes);
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch
	  }
	  function decode (string) {
	    var buffer$$1 = decodeUnsafe(string);
	    if (buffer$$1) { return buffer$$1 }
	    throw new Error('Non-base' + BASE + ' character')
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  }
	}
	var src = base$1;

	var ALPHABET$2 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

	var bs58$1 = src(ALPHABET$2);

	// credit - https://github.com/tronprotocol/node-wallet-api
	const EC$2 = require('elliptic').ec;

	const prefixTestNet = 'a0';
	const prefix = '41';

	function computeAddress$1 (pubBytes, isTestNet = false) {
	  if (pubBytes.length === 65) {
	    pubBytes = pubBytes.slice(1);
	  }
	  var hash = sha3.keccak256(pubBytes).toString();
	  var addressHex = hash.substring(24);
	  addressHex = (isTestNet ? prefixTestNet : prefix) + addressHex;
	  var addressBytes = hexStr2byteArray$2(addressHex);
	  return addressBytes
	}

	function getBase58CheckAddress$1 (addressBytes) {
	  var hash0 = SHA256$2(addressBytes);
	  var hash1 = SHA256$2(hash0);
	  var checkSum = hash1.slice(0, 4);
	  checkSum = addressBytes.concat(checkSum);
	  checkSum = Buffer.from(checkSum);
	  var base58Check = bs58$1.encode(checkSum);
	  return base58Check
	}

	function getPubKeyFromPriKey$1 (priKeyBytes) {
	  var ec = new EC$2('secp256k1');
	  var key = ec.keyFromPrivate(priKeyBytes, 'bytes');
	  var pubkey = key.getPublic();
	  var x = pubkey.x;
	  var y = pubkey.y;
	  var xHex = x.toString('hex');
	  while (xHex.length < 64) {
	    xHex = '0' + xHex;
	  }
	  var yHex = y.toString('hex');
	  while (yHex.length < 64) {
	    yHex = '0' + yHex;
	  }
	  var pubkeyHex = '04' + xHex + yHex;
	  var pubkeyBytes = hexStr2byteArray$2(pubkeyHex);
	  return pubkeyBytes
	}

	function byte2hexStr$3 (byte) {
	  var hexByteMap = '0123456789ABCDEF';
	  var str = '';
	  str += hexByteMap.charAt(byte >> 4);
	  str += hexByteMap.charAt(byte & 0x0f);
	  return str
	}

	function byteArray2hexStr$3 (byteArray) {
	  let str = '';
	  for (let i = 0; i < (byteArray.length); i++) {
	    str += byte2hexStr$3(byteArray[i]);
	  }
	  return str
	}

	function isHexChar$1 (c) {
	  if ((c >= 'A' && c <= 'F') ||
	      (c >= 'a' && c <= 'f') ||
	      (c >= '0' && c <= '9')) {
	    return 1
	  }
	  return 0
	}

	function hexChar2byte$1 (c) {
	  var d = 0;
	  if (c >= 'A' && c <= 'F') {
	    d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;
	  } else if (c >= 'a' && c <= 'f') {
	    d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;
	  } else if (c >= '0' && c <= '9') {
	    d = c.charCodeAt(0) - '0'.charCodeAt(0);
	  }
	  return d
	}

	function hexStr2byteArray$2 (str) {
	  var byteArray = [];
	  var d = 0;
	  var j = 0;
	  var k = 0;

	  for (let i = 0; i < str.length; i++) {
	    var c = str.charAt(i);
	    if (isHexChar$1(c)) {
	      d <<= 4;
	      d += hexChar2byte$1(c);
	      j++;
	      if ((j % 2) === 0) {
	        byteArray[k++] = d;
	        d = 0;
	      }
	    }
	  }
	  return byteArray
	}

	function longToByteArray (/* long */long) {
	  // we want to represent the input as a 8-bytes array
	  var byteArray = [0, 0, 0, 0, 0, 0, 0, 0];

	  for (var index = 0; index < byteArray.length; index++) {
	    var byte = long & 0xff;
	    byteArray[ index ] = byte;
	    long = (long - byte) / 256;
	  }

	  return byteArray
	}

	function SHA256$2 (msgBytes) {
	  let shaObj = new sha$1('SHA-256', 'HEX');
	  let msgHex = byteArray2hexStr$3(msgBytes);
	  shaObj.update(msgHex);
	  let hashHex = shaObj.getHash('HEX');
	  return hexStr2byteArray$2(hashHex)
	}

	function addRef (transaction, latestBlock) {
	  let latestBlockHash = latestBlock.hash;
	  let latestBlockNum = latestBlock.number;
	  let numBytes = longToByteArray(latestBlockNum);
	  numBytes.reverse();
	  let hashBytes = hexStr2byteArray$2(latestBlockHash);
	  let generateBlockId = [...numBytes.slice(0, 8), ...hashBytes.slice(8, hashBytes.length - 1)];
	  let rawData = transaction.getRawData();
	  rawData.setRefBlockHash(Uint8Array.from(generateBlockId.slice(8, 16)));
	  rawData.setRefBlockBytes(Uint8Array.from(numBytes.slice(6, 8)));
	  rawData.setExpiration(latestBlock.timestamp + (60 * 5 * 1000));
	  transaction.setRawData(rawData);
	  return transaction
	}

	class TronWallet {
	  static generateMnemonic () {
	    return bip39.generateMnemonic()
	  }

	  static fromMnemonic (mnemonic, isTestNet = false) {
	    const seed = bip39.mnemonicToSeedHex(mnemonic);
	    return new this({ seed, isTestNet })
	  }

	  static fromMasterSeed (seed, isTestNet = false) {
	    return new this({ seed, isTestNet })
	  }

	  static fromExtendedKey (extendedKey, isTestNet = false) {
	    return new this({ extendedKey, isTestNet })
	  }

	  static fromPrivateKey (privateKey, isTestNet = false) {
	    return new this({ privateKey, isTestNet })
	  }

	  static fromTronPrivateKey (pk, isTestNet = false) {
	    return new this({ privateKey: safeBuffer_1(pk, 'hex'), isTestNet })
	  }

	  constructor ({ seed, extendedKey, privateKey, isTestNet }) {
	    if (seed) {
	      this._seed = seed;
	      this._node = hdkey.fromMasterSeed(safeBuffer_1(seed, 'hex'));
	    } else if (extendedKey) {
	      this._seed = null;
	      this._node = hdkey.fromExtendedKey(extendedKey);
	    } else {
	      assert.equal(privateKey.length, 32, 'Private key must be 32 bytes.');
	      assert(secp256k1$1.privateKeyVerify(privateKey), 'Invalid private key');
	      this._seed = null;
	      this._node = {
	        _publicKey: secp256k1$1.publicKeyCreate(privateKey, true),
	        _privateKey: privateKey
	      };
	    }
	    this._isTestNet = isTestNet || false;
	    this._init();
	  }

	  _init () {
	    const priKey = this.getPrivateKey();
	    let priKeyHex = priKey.toString('hex');
	    while (priKeyHex.length < 64) {
	      priKeyHex = '0' + priKeyHex;
	    }
	    this._priKeyBytes = hexStr2byteArray$2(priKeyHex);
	  }

	  derivePath (path$$1) {
	    assert(this._node.derive, 'can not derive when generate from private / public key');
	    this._node = this._node.derive(path$$1);
	    return new TronWallet({ extendedKey: this._node.privateExtendedKey, isTestNet: this._isTestNet })
	  }

	  deriveChild (index) {
	    assert(this._node.deriveChild, 'can not derive when generate from private / public key');
	    this._node = this._node.deriveChild(index);
	    return new TronWallet({ extendedKey: this._node.privateExtendedKey, isTestNet: this._isTestNet })
	  }

	  getPrivateExtendedKey () {
	    assert(this._node.privateExtendedKey, 'can not get xpriv when generate from private / public key');
	    return this._node.privateExtendedKey
	  }

	  getPublicExtendedKey () {
	    assert(this._node.publicExtendedKey, 'can not get xpub when generate from private / public key');
	    return this._node.publicExtendedKey
	  }

	  getPrivateKey () {
	    assert(this._node._privateKey, 'can not get private when generate from public key');
	    return this._node._privateKey
	  }

	  getTronPrivateKey () {
	    return byteArray2hexStr$3(this._priKeyBytes)
	  }

	  getAddress () {
	    const addressBytes = computeAddress$1(getPubKeyFromPriKey$1(this._priKeyBytes), this._isTestNet);
	    return getBase58CheckAddress$1(addressBytes)
	  }

	  updateTransaction (tx, latestBlock) {
	    const transactionWithRefs = addRef(tx, latestBlock);
	    const signed = crypto_1(this.getTronPrivateKey(), transactionWithRefs);
	    const shaObj = new sha$1('SHA-256', 'HEX');
	    shaObj.update(signed.hex);
	    const txid = shaObj.getHash('HEX');
	    return { txid, ...signed }
	  }

	  generateTransaction (to, amount, token = 'TRX', latestBlock) {
	    const transaction = transactionBuilder_1(token, this.getAddress(), to, amount);
	    return this.updateTransaction(transaction, latestBlock)
	  }

	  updateAccount (name, latestBlock) {
	    const transaction = transactionBuilder_2(this.getAddress(), name);
	    return this.updateTransaction(transaction, latestBlock)
	  }

	  freeze (amount, duration = 3, latestBlock) {
	    const transaction = transactionBuilder_5(this.getAddress(), amount, duration);
	    return this.updateTransaction(transaction, latestBlock)
	  }

	  unfreeze (latestBlock) {
	    const transaction = transactionBuilder_6(this.getAddress());
	    return this.updateTransaction(transaction, latestBlock)
	  }

	  vote (votes, latestBlock) {
	    const transaction = transactionBuilder_4(this.getAddress(), votes);
	    return this.updateTransaction(transaction, latestBlock)
	  }

	  issueAssets (options, latestBlock) {
	    const transaction = transactionBuilder_7(options, latestBlock);
	    return this.updateTransaction(transaction, latestBlock)
	  }

	  buyAssets (issuer, token, amount, latestBlock) {
	    const transaction = transactionBuilder_3(this.getAddress(), issuer, token, amount);
	    return this.updateTransaction(transaction, latestBlock)
	  }
	}

	return TronWallet;

})));
